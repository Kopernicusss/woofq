#!/bin/bash


export TEXTDOMAIN=woofV
export OUTPUT_CHARSET=UTF-8
LANGorig="$LANG"
export LANG=C

. /etc/rc.d/PUPSTATE

E1='/mnt/wkg/data/woofV'
L1='/usr/local/woofV'
mkdir -p /tmp/woofV

. ${L1}/configure/DISTRO_SPECS

cd ${E1}
#the files we want are export/easy_*.sfs,
# initrd/initrd, sandbox/vmlinuz,
# easy-skeleton-7-880-889mb.img.gz

if [ ! -f "${DISTRO_SKELETON_IMAGE}" ];then
 echo "ERROR not exist: ${DISTRO_SKELETON_IMAGE}"
 exit 1
fi

#181205 random number for disk-id
if ! which openssl >/dev/null ;then
 echo 'utility openssl missing. aborting.'
 exit 1
fi
RANDHEX8="$(openssl rand -hex 4)" #want this for disk identifier.
[ "$RANDHEX8" == "12345678" ] && RANDHEX8="$(openssl rand -hex 4)" #181205 reserved, try again.
echo "Random hex number: ${RANDHEX8}"

cp -a -f ${DISTRO_SKELETON_IMAGE} export/
cp -a -f initrd/initrd export/
cp -a -f sandbox/vmlinuz export/

cd export
gunzip ${DISTRO_SKELETON_IMAGE}
SKELETON_NAME="${DISTRO_SKELETON_IMAGE%.img}"
if [ "${DISTRO_NAME_SHORT,,}" != "easy" ];then
 oldSKEL="$SKELETON_NAME"
 SKELETON_NAME="$(echo -n "$oldSKEL" | sed -e "s%^easy%${DISTRO_NAME_SHORT,,}%")"
 mv -f ${oldSKEL}.img ${SKELETON_NAME}.img
fi

#20220511 detect sizes of partitions in img...  20220622 20230305
PARTINFO="$(fdisk -l ${SKELETON_NAME}.img | grep "^${DISTRO_NAME_SHORT,,}-skeleton" | grep -o ' [0-9].*')" #ex: 1572864 1581055    8192    4M 83 Linux
P1M="$(echo "$PARTINFO" | grep -o '[0-9]*M' | head -n 1)"
P1M="${P1M/M/}" #ex: 7
P2M="$(echo "$PARTINFO" | grep -o '[0-9]*M' | tail -n 1)"
P2M="${P2M/M/}" #ex: 816

#190226 change UUID of the filesystems...
echo
echo "Assigning random UUIDs to ${SKELETON_NAME}.img"
LOOP1="$(losetup -f)" #free loop device, ex: /dev/loop2
OFF1='1048576' #1M
OFF2="$((${P1M}*1048576))"
OFF2=$((${OFF2}+${OFF1}))
losetup -o ${OFF1} ${LOOP1} ${SKELETON_NAME}.img
LOOP2="$(losetup -f)"
losetup -o ${OFF2} ${LOOP2} ${SKELETON_NAME}.img
BOOT_FS="$(blkid ${LOOP1} | tr ' ' '\n' | grep '^TYPE=' | cut -f 2 -d '"')" #20221209
WKG_FS="$(blkid ${LOOP2} | tr ' ' '\n' | grep '^TYPE=' | cut -f 2 -d '"')" #20221209
mlabel -n -i ${LOOP1} :: 2>/dev/null #assign new random serial number (uuid).
UUID1="$(blkid ${LOOP1} | tr ' ' '\n' | grep '^UUID=' | cut -f 2 -d '"')" #20221209

#20220622 tune2fs wants f.s. check first...
fsck.ext4 -f -p ${LOOP2}
tune2fs -U time ${LOOP2} #new random uuid.
#tune2fs -O has_journal,^uninit_bg ${LOOP2} #200302 enable journal. 200728 disable lazy inode init.
tune2fs -O ^uninit_bg ${LOOP2} #200728 disable lazy inode init.
fsck.ext4 -f -p ${LOOP2}
UUID2="$(blkid ${LOOP2} | tr ' ' '\n' | grep '^UUID=' | cut -f 2 -d '"')"
#20220622 tune2fs creates folder lost+found, remove further down.
sync
losetup -d ${LOOP2}
losetup -d ${LOOP1}
echo "  first (vfat) partition, UUID='${UUID1}'"
echo "  second (ext4) partition, UUID='${UUID2}'"

echo
echo "Mounting ${SKELETON_NAME}.img"
mkdir -p img_mntpt
busybox mount -t vfat -o offset=1048576,loop ${SKELETON_NAME}.img img_mntpt
if [ $? -ne 0 ];then #171011 precaution
 echo "FAILED: mount -t vfat -o offset=1048576,loop ${SKELETON_NAME}.img img_mntpt"
 exit 1
fi

BOOTDIR=''

#20230218  20230304
BRANDINGFIELD="${DISTRO_NAME_NORMAL} Limine Boot Manager"
COMMENTFIELD="${DISTRO_NAME_NORMAL} ${DISTRO_COMPAT_VERSION^} bootup" #ex: Kirkstone
OPTIONSFIELD="Options..."
FBVFIELD="Fix broken video"
FBVCOMMENTFIELD="Run Xorg Video Wizard to fix broken video"

echo "VERBOSE=no
TIMEOUT=10
DEFAULT_ENTRY=1
INTERFACE_BRANDING=${BRANDINGFIELD}
INTERFACE_RESOLUTION=800x600

:${DISTRO_NAME_NORMAL} ${DISTRO_COMPAT_VERSION^}
    COMMENT=${COMMENTFIELD}
    RESOLUTION=800x600
    PROTOCOL=linux
    KERNEL_PATH=boot://2/easyos/vmlinuz
    MODULE_PATH=boot://2/easyos/initrd
    KERNEL_CMDLINE=rw wkg_uuid=${UUID2} wkg_dir=easyos/

:  ${OPTIONSFIELD}
::${FBVFIELD}
    COMMENT=${FBVCOMMENTFIELD}
    RESOLUTION=800x600
    PROTOCOL=linux
    KERNEL_PATH=boot://2/easyos/vmlinuz
    MODULE_PATH=boot://2/easyos/initrd
    KERNEL_CMDLINE=rw qfix=vid nomodeset wkg_uuid=${UUID2} wkg_dir=easyos/
" > img_mntpt/limine.cfg

mkdir -p img_mntpt/EFI/BOOT
cp -a -f ../rootfs-complete/usr/share/limine/BOOTX64.EFI img_mntpt/EFI/BOOT/
cp -a -f ../rootfs-complete/usr/share/limine/BOOTIA32.EFI img_mntpt/EFI/BOOT/
cp -a -f ../rootfs-complete/usr/share/limine/limine.sys img_mntpt/
sync
busybox umount img_mntpt

#working-partition...
mkdir -p img_mntpt2
busybox mount -t ext4 -o offset=${OFF2},loop ${SKELETON_NAME}.img img_mntpt2
mkdir -p img_mntpt2/easyos
rmdir img_mntpt2/lost+found #tune2fs created this.

echo "copying vmlinuz into img file..."
cp -f ./vmlinuz img_mntpt2/easyos/
sync
echo "copying initrd into img file..."
cp -f ./initrd img_mntpt2/easyos/
sync

echo 'Copying easy.sfs into img file...'
cp -a ${DISTRO_NAME_SHORT,,}_${DISTRO_VERSION}_${DISTRO_TARGETARCH}.sfs img_mntpt2/easyos/${DISTRO_NAME_SHORT,,}.sfs
sync
busybox umount img_mntpt2

echo
echo "Changing the disk identifier in ${SKELETON_NAME}.img ..."
echo -e "x\ni\n0x${RANDHEX8}\nr\nw" | fdisk ${SKELETON_NAME}.img
sync

#update legacy-BIOS booting...
LOOP3="$(losetup -f)"
losetup ${LOOP3} ${SKELETON_NAME}.img
sleep 0.5
echo "EXECUTING: rootfs-complete/usr/bin/limine-deploy ${LOOP3} --force-mbr"
rootfs-complete/usr/bin/limine-deploy ${LOOP3} --force-mbr
sleep 0.1
sync
losetup -d ${LOOP3}

[ -f ${DISTRO_NAME_SHORT,,}-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img ] && rm -f ${DISTRO_NAME_SHORT,,}-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img

mv -f ${SKELETON_NAME}.img ${DISTRO_NAME_SHORT,,}-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img
md5sum ${DISTRO_NAME_SHORT,,}-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img > md5sum.txt
sync
echo "${DISTRO_NAME_SHORT,,}-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img has been created..."
###end###
