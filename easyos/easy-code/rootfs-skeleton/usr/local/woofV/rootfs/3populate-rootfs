#!/bin/bash

#read DISTRO_PKGS_SPECS, if generic name no match in pkg-fix/packages-templates,
#then install directly.
#if match, call pkg-fix/pkg-fix.sh

. /etc/rc.d/PUPSTATE
. /usr/local/woofV/configure/DISTRO_SPECS
. /usr/local/woofV/configure/DISTRO_PKGS_SPECS #has PKGS_SPECS_TABLE
. /usr/local/woofV/configure/DISTRO_COMPAT_REPOS
. /usr/local/woofV/configure/DISTRO_PET_REPOS

case "$DISTRO_TARGETARCH" in
 amd64) xARCH='x86_64' ;;
 *)     xARCH="$DISTRO_TARGETARCH" ;;
esac
export XBPS_ARCH="$xARCH"

E1='/mnt/wkg/data/woofV'
L1='/usr/local/woofV'
mkdir -p ${E1}/dl-pets
mkdir -p ${E1}/dl-xbps
mkdir -p ${E1}/dl-txz
mkdir -p ${E1}/rootfs/repo

usrmerge_fix_func() {
 local F2 F1
 #$1 expanded pet, $2 temp usrmerge-fixed folder.
 #currently in 'sandbox' folder.
 #$F2 will have copy of $F1 except with usr-merge.
 F1="$1"; F2="$2"
 rm -rf ./${F2} 2>/dev/null
 cp -a /usr/local/woofV/pkg-fix/usrmerge-template ${F2}
 while read aF
 do
  if [ -d ${F1}/"$aF" ];then
   mkdir -p ${F2}/"$aF"/
  else
   aD="$(dirname "$aF")"
   mkdir -p ${F2}/"$aD"/
   if [ -h ${F1}/"$aF" ];then
    if [ -e ${F2}/"$aF" ];then
     if [ ! -h ${F2}/"$aF" ];then
      continue
     fi
    fi
   fi
   cp -a --remove-destination ${F1}/"$aF" ${F2}/"$aD"/
  fi
 done <<_END1
$(find ${F1} -mindepth 1 | sed -e "s%${F1}/%%")
_END1
}

fix_symlinks_func() {
 local F2
 #$1 is folder already usrmerge, but symlinks may be broken.
 #simplify the symlinks. also detect circular symlinks.
 #currently in 'sandbox' folder.
 F2="$1"
 while read aL
 do
  [ ! "$aL" ] && continue
  LANG=C busybox realpath ${aL} 2>&1 | grep -q 'Symbolic link loop'
  if [ $? -eq 0 ];then
   rm -f ${F2}/usr/bin/${aL##*/} #delete circular loop.
   continue
  fi
  aT="$(busybox readlink -n $aL)"
  if [ -f ${F2}/usr/bin/${aT##*/} ];then
   if [ ! -h ${F2}/usr/bin/${aT##*/} ];then
    ln -snf ${aT##*/} ${aL} #simplify symlink.
   fi
  fi
 done <<_END2
$(find ${F2}/usr/bin -mindepth 1 -maxdepth 1 -type l)
_END2
 while read aL
 do
  [ ! "$aL" ] && continue
  LANG=C busybox realpath ${aL} 2>&1 | grep -q 'Symbolic link loop'
  if [ $? -eq 0 ];then
   rm -f ${F2}/usr/lib/${aL##*/} #delete circular loop.
   continue
  fi
  aT="$(busybox readlink -n $aL)"
  if [ -f ${F2}/usr/lib/${aT##*/} ];then
   if [ ! -h ${F2}/usr/lib/${aT##*/} ];then
    ln -snf ${aT##*/} ${aL}
   fi
  fi
 done <<_END2
$(find ${F2}/usr/lib -mindepth 1 -maxdepth 1 -type l)
_END2
}

echo "Installing pkgs to ${E1}/rootfs..."

#read each entry in PKGS_SPECS_TABLE...
CNT=0
while read aL
do
 Egeneric="$(cut -f 1 -d '|' <<<${aL})"
 Epkgs="$(cut -f 2 -d '|' <<<${aL})"
 Esplit="$(cut -f 3 -d '|' <<<${aL})"
 Erepo="$(cut -f 4 -d '|' <<<${aL})"
 
 [ -z "$Erepo" ] && continue #insist must exist. ex: compat:current
 CNT=$((${CNT}+1))
 case "$Erepo" in
  pet:*)
   case "$Erepo" in
    pet:noarch)
     DBFILE="Packages-pet-noarch-official"
     URL="https://distro.ibiblio.org/easyos/noarch/packages/pet/pet_packages-noarch"
    ;;
    *) #pet:void
     DBFILE="Packages-pet-void-official"
     URL="https://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/packages/pet/pet_packages-void"
    ;;
   esac
   #is it already downloaded?...
   P1="$(grep "|${Egeneric}|" ${L1}/configure/${DBFILE})"
   NAME="$(cut -f 2 -d '|' <<<${P1})"
   VER="$(cut -f 3 -d '|' <<<${P1})_1"
   #test if already converted to .xbps...
   ls ${E1}/dl-pets/${NAME}-${VER}*.xbps >/dev/null 2>&1
   if [ $? -ne 0 ];then
    PETname="$(cut -f 8 -d '|' <<<${P1})"
    if [ ! -f ${E1}/dl-pets/${PETname} ];then
     cd ${E1}/dl-pets
     download_file ${URL}/${PETname}
     if [ $? -ne 0 ];then
      echo "ERROR: failed to download ${PETname} from"
      echo "${URL}"
      rm -f ./${PETname} 2>/dev/null
      exit 5
     fi
    fi
    #convert it to an .xbps pkg...
    cp -a -f ${E1}/dl-pets/${PETname} ${E1}/sandbox/ #pet has to be in same folder as o/p.
    cd ${E1}/sandbox
    pet2dir ${PETname}
    rm -f ${PETname}
    F1="${PETname/.pet/}"
    DIR=${E1}/sandbox/${F1}
    if [ -f ${DIR}/pinstall.sh ];then
     cat >> ${DIR}/INSTALL <<'_EOF'
#!/bin/sh
export PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
ACTION="$1"
case "${ACTION}" in
pre)
	;;
post)
_EOF
     cat ${DIR}/pinstall.sh >> ${DIR}/INSTALL
     echo '	;;
esac
exit 0' >> ${DIR}/INSTALL
     chmod 755 ${DIR}/INSTALL
     rm -f ${DIR}/pinstall.sh
    fi
    if [ -f ${DIR}/pet.specs ];then
     rm -f ${DIR}/pet.specs
    fi
    if [ -f ${DIR}/puninstall.sh ];then
     rm -f ${DIR}/puninstall.sh
    fi
    DEPS="$(cut -f 9 -d '|' <<<${P1} | tr -d '+' | tr ',' ' ')"
    DESC="$(cut -f 10 -d '|' <<<${P1})"
    if [ "$DEPS" ]; then
     for i in $DEPS; do
      DEP=$(echo "$i>=0.0_0 $DEP")
     done
    fi
    #***note*** for pet pkgs, ignore deps...
    DEP=""
    #may have to fix for usr-merge...
    #currently in 'sandbox', expanded pet is ${F1}
    #process, install to a temp dir sandbox/temp1
    usrmerge_fix_func ${F1} temp1
    #rearranging folders to usrmerge may have broken symlinks...
    fix_symlinks_func temp1
    DIR2=${E1}/sandbox/temp1
    cd ${E1}/dl-pets
    xbps-create -n "$NAME-$VER" -s "$DESC" -A $xARCH -D "$DEP" "$DIR2"
    if [ $? -ne 0 ];then
     echo "ERROR: NAME='${NAME}' VER='${VER}'"
     echo "ERROR failed: xbps-create -n \"$NAME-$VER\" -s \"$DESC\" -A $xARCH -D \"$DEP\" \"$DIR2\""
     exit 6
    fi
   fi
   Pxbps="$(ls ${E1}/dl-pets/${NAME}-${VER}*.xbps)"
   if [ -z "$Pxbps" ];then #paranoid
    echo "ERROR: NOT FND: ls ${E1}/dl-pets/${NAME}-${VER}*.xbps"
    exit 3
   fi
   WC=$(echo -n "$Pxbps" | wc -l)
   if [ $WC -gt 0 ];then #paranoid
    echo "ERROR: found more than one:"
    echo "$Pxbps"
    exit 4
   fi
   #check if already installed...
   INST="$(chroot ${E1}/rootfs /usr/bin/xbps-query --show ${NAME}-${VER} --property state)"
   if [ "$INST" != "installed" ];then
    #register pkg in local repo inside rootfs...
    cp -a -f ${E1}/dl-pets/${Pxbps##*/} ${E1}/rootfs/repo/
    chroot ${E1}/rootfs /usr/bin/xbps-rindex --add /repo/${Pxbps##*/}
    #install...
    echo -n "${Pxbps##*/} "
    chroot ${E1}/rootfs /usr/bin/xbps-install --yes --ignore-file-conflicts --ignore-conf-repos --repository=/repo ${NAME}-${VER}
    sync
    rm -rf ${E1}/rootfs/repo/* #stop from growing.
   fi
  ;;
 esac
  
 continue #TEST
  
  case "$Erepo" in
   compat:current)
    #compat line may have one or more pkgs...
    for aP in `echo -n "${Epkgs}" | tr ',' ' '`
    do
     #is it already downloaded?...
     P1="$(grep "|${Egeneric}|" ${L1}/configure/Packages-void-current)"
     Pfullname="$(cut -f 8 -d '|' <<<${P1})"
     if [ ! -f ${E1}/dl-xbps/${Pfullname} ];then
      cd ${E1}/dl-xbps
      download_file https://repo-fastly.voidlinux.org/current/${Pfullname}
     fi
     #register pkg in local repo inside rootfs...
     cp -a -f ${Pfullname} ${E1}/rootfs/repo/
     chroot ${E1}/rootfs /usr/bin/xbps-rindex -a /repo/${Pfullname}
     #install xbps pkg...
     ${L1}/pkg-fix/pkg-fix.sh ${E1}/dl-xbps/${Pfullname}
    done
    continue
   ;;
   compat:kirkstone)
   ;;
  
  esac
  
  
done <<_EOF
$(grep '^yes' <<<${PKGS_SPECS_TABLE} | cut -f 2,3,4,5 -d '|')
_EOF
