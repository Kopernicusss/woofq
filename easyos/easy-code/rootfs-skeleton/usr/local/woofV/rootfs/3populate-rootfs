#!/bin/bash
#from a list of packages, in dependency-order, build the rootfs.

export TEXTDOMAIN=woofV
export OUTPUT_CHARSET=UTF-8
LANGorig="$LANG"
export LANG=C

. /etc/rc.d/PUPSTATE
. /usr/local/woofV/configure/DISTRO_SPECS
. /usr/local/woofV/configure/DISTRO_PKGS_SPECS #has PKGS_SPECS_TABLE
. /usr/local/woofV/configure/DISTRO_COMPAT_REPOS
. /usr/local/woofV/configure/DISTRO_PET_REPOS

case "$DISTRO_TARGETARCH" in
 amd64) xARCH='x86_64' ;;
 *)     xARCH="$DISTRO_TARGETARCH" ;;
esac
export XBPS_ARCH="$xARCH"

E1='/mnt/wkg/data/woofV'
L1='/usr/local/woofV'
mkdir -p ${E1}/dl-pets
mkdir -p ${E1}/dl-xbps
mkdir -p ${E1}/dl-txz
mkdir -p ${E1}/rootfs/repo
mkdir -p /tmp/woofV
mkdir -p ${E1}/sandbox
rm -f ${E1}/sandbox/pinstall.sh 2>/dev/null

echo "$(LANG=${LANGorig} gettext 'Installing pkgs to:') ${E1}/rootfs"

#generate woof-installed-packages and devx-only-installed-packages...
${L1}/support/findwoofinstalledpkgs
${L1}/support/sort-dep-order
#...has created ${E1}/woof-installed-packages-dep-order

#non-xbps pkgs get converted to .xbps then installed.
#keep a record of these conversions...
rm -rf ${E1}/converted-pkgs 2>/dev/null
mkdir ${E1}/converted-pkgs

#read each entry in ${E1}/woof-installed-packages-dep-order...
CNT=0
while read aL
do
 cat <<<${aL} > /tmp/woofV/aDBentry
 WIPnameonly="$(cut -f 2 -d '|' <<<${aL})"    #ex: 9menu
 WIPversion="$(cut -f 3 -d '|' <<<${aL})"     #ex: 1.2.3
 WIPrevision="$(cut -f 4 -d '|' <<<${aL})"    #ex: r6
 WIPpkg="$(cut -f 8 -d '|' <<<${aL})"         #ex: 9menu-1.10_1.x86_64.xbps
 WIPcompatname="$(cut -f 11 -d '|' <<<${aL})" #ex: void
 WIPcompatver="$(cut -f 12 -d '|' <<<${aL})"  #ex: current
 [ -z "$WIPcompatver" ] && continue #insist must exist. ex: compat:current
 
 #read generic-name and pkgs-split...
 PST="$(grep "^yes.*[,|]${WIPnameonly}[,|]" <<<${PKG_SPECS_TABLE} | head -n 1)"
 #do it this way, more definite... nah
 #PST="$(grep "|${WIPnameonly}|${WIPversion}|${WIPrevision}" ${E1}/woof-installed-packages-PST | cut -f 13- -d '|')"
 #ex: yes|acl|acl|exe,doc>null|compat:current|
 PSTgeneric="$(cut -f 2 -d '|' <<<${PST})"
 PSTpkgs="$(cut -f 3 -d '|' <<<${PST})"
 PSTsplit="$(cut -f 4 -d '|' <<<${PST})"
 PSTrepo="$(cut -f 5 -d '|' <<<${PST})"
 
 CNT=$((${CNT}+1))
 case "$WIPcompatname" in
  pet)
   case "$WIPcompatver" in
    noarch)
     DBFILE="Packages-pet-noarch-official"
     URL="https://distro.ibiblio.org/easyos/noarch/packages/pet/pet_packages-noarch"
    ;;
    *) #pet:void
     DBFILE="Packages-pet-void-official"
     URL="https://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/packages/pet/pet_packages-void"
    ;;
   esac
   #is it already downloaded?...
   VER="$(cut -f 3 -d '|' <<<${aL})_1"
   #pets may have weird versioning, need to remove any alpha chars...
   xWIPversion="$(echo -n "$WIPversion" | sed -e 's%[^0-9.]%%g')"
   VER="${xWIPversion}_1" #append a revision-number
   #test if already converted to .xbps...
   #ls ${E1}/dl-pets/${WIPnameonly}-${VER}*.xbps >/dev/null 2>&1
   #as pets may have weird naming, it will be converted to ${PSTgeneric}-*.xbps...
   ls ${E1}/dl-pets/${PSTgeneric}-${VER}*.xbps >/dev/null 2>&1
   if [ $? -ne 0 ];then
    PETname="${WIPpkg}" #ex: align-1.7.5.pet
    if [ ! -f ${E1}/dl-pets/${PETname} ];then
     cd ${E1}/dl-pets
     download_file ${URL}/${PETname}
     if [ $? -ne 0 ];then
      echo "ERROR: failed to download ${PETname} from"
      echo "${URL}"
      rm -f ./${PETname} 2>/dev/null
      exit 5
     fi
    fi
    #convert it to an .xbps pkg...
    ${L1}/support/pet2xbps ${E1}/dl-pets/${PETname} /tmp/woofV/aDBentry ${PSTgeneric}
    #....xbps will be in ${E1}/dl-pets/
   fi
   Pxbps="$(ls ${E1}/dl-pets/${PSTgeneric}-${VER}*.xbps)"
   if [ -z "$Pxbps" ];then #paranoid
    echo "ERROR: NOT FND: ls ${E1}/dl-pets/${PSTgeneric}-${VER}*.xbps"
    exit 3
   fi
   WC=$(echo -n "$Pxbps" | wc -l)
   if [ $WC -gt 0 ];then #paranoid
    echo "ERROR: found more than one:"
    echo "$Pxbps"
    exit 4
   fi
   Pxbps="${Pxbps##*/}"
   #check if already installed...
   INST="$(chroot ${E1}/rootfs /usr/bin/xbps-query --show ${PSTgeneric}-${VER} --property state)"
   if [ "$INST" != "installed" ];then
    #register pkg in local repo inside rootfs...
    cp -a -f ${E1}/dl-pets/${Pxbps} ${E1}/rootfs/repo/
    chroot ${E1}/rootfs /usr/bin/xbps-rindex --add /repo/${Pxbps}
    #install...
    echo -n "${Pxbps} "
    chroot ${E1}/rootfs /usr/bin/xbps-install --yes --ignore-file-conflicts --ignore-conf-repos --repository=/repo ${PSTgeneric}-${VER}
    sync
    #in case there is a pkg in void repo with same name, prevent the pet from being replaced...
    chroot ${E1}/rootfs /usr/bin/xbps-pkgdb -m hold ${PSTgeneric}-${VER}
    rm -rf ${E1}/rootfs/repo/* #stop from growing.
    #log pet name vs xbps pkg name...
    echo "CONV_PKG_DB='${aL}'" > ${E1}/converted-pkgs/${PSTgeneric}
    echo "CONV_XBPS_PKG='${Pxbps}'" >> ${E1}/converted-pkgs/${PSTgeneric} #ex: tas-1.15_1.x86_64.xbps
   fi
  ;;
 esac
  
 case "${WIPcompatname}:${WIPcompatver}" in
  compat:current)
   case "$WIPnameonly" in
    *-devel)
     continue #ignore for now ***TO DO***
    ;;
   esac
   #check if already installed...
   INST="$(chroot ${E1}/rootfs /usr/bin/xbps-query --show ${WIPnameonly} --property state)"
   if [ "$INST" != "installed" ];then
    #is it already downloaded?...
    if [ ! -f ${E1}/dl-xbps/${WIPpkg} ];then
      cd ${E1}/dl-xbps
      download_file https://repo-fastly.voidlinux.org/current/${WIPpkg}
    fi
    Pwant="${E1}/dl-xbps/${WIPpkg}"
    #install xbps pkg...
    #problem is, there may be fixes in packages-templates, to be applied
    #before installing. so, open it up, apply fixes, then repackage...
      
    #apply fixes, then put together again...
    GENflg=0
    if [ -d /usr/local/woofV/pkg-fix/packages-templates/${PSTgeneric} ];then
     GENflg=1
     #based on 2createpackages in woofQ, but simplified...
     cd ${E1}/sandbox
     Pdir="${WIPpkg/.xbps/}"  #ex: WIPpkg=libgcc-12.2.0_4.x86_64.xbps
     mkdir $Pdir
     cd $Pdir
     tar --force-local --zstd -xf ${Pwant}
     cd ..
       
     #apply fixes...
     /usr/local/woofV/pkg-fix/template-fix ${PSTgeneric} ${WIPcompatname} ${E1}/sandbox/${Pdir}
     
     #if there is a pinstall.sh, remove it. accumulate to execute later...
     if [ -e ${E1}/sandbox/${Pdir}/pinstall.sh ];then
      cat ${E1}/sandbox/${Pdir}/pinstall.sh >> ${E1}/sandbox/pinstall.sh
      rm -f ${E1}/sandbox/${Pdir}/pinstall.sh
     fi
       
     #repackage as .xbps...
     #***WARNING*** .plist file will be different from online repo!!!
     #don't remove "INSTALL" here, template-fix may remove it...
     for aR in REMOVE files.plist props.plist
     do
      rm -f ${E1}/sandbox/${Pdir}/${aR} 2>/dev/null
     done
     VER="$(cut -f 3 -d '|' <<<${aL})_$(cut -f 4 -d '|' <<<${aL})" #ex: 0.16.4_1
     DESC="$(cut -f 10 -d '|' <<<${aL})"
     #deps is a problem, as the pkgget db does not include versions. so get from xbps db...
     DEPS="$(chroot rootfs xbps-query --show ${WIPnameonly}-${VER} --repository --property run_depends | tr '\n' ' ')"
     yARCH="$(chroot rootfs xbps-query --show ${WIPnameonly}-${VER} --repository --property architecture | tr '\n' ' ')"
     SHLREQ="$(chroot rootfs xbps-query --show ${WIPnameonly}-${VER} --repository --property shlib-requires | tr '\n' ' ')"
     LICENSE="$(chroot rootfs xbps-query --show ${WIPnameonly}-${VER} --repository --property license | tr '\n' ' ')"
     REPLACES="$(chroot rootfs xbps-query --show ${WIPnameonly}-${VER} --repository --property replaces | tr '\n' ' ')"
     PROVIDES="$(chroot rootfs xbps-query --show ${WIPnameonly}-${VER} --repository --property provides | tr '\n' ' ')"
     xbps-create -n "${WIPnameonly}-${VER}" -s "${DESC}" -A ${yARCH} -D "${DEPS}" --shlib-requires "${SHLREQ}" --license "${LICENSE}" --replaces "${REPLACES}" "${E1}/sandbox/${Pdir}"
     Pxbps="$(ls ${WIPnameonly}-${VER}*.xbps)" #ex: acl-2.3.1_1.x86_64.xbps
     Pxbps="${Pxbps##*/}"
     Pwant="${E1}/sandbox/${Pxbps}"
     WIPpkg="${Pxbps}"
     rm -f "$Pdir" #this is the expanded fixed folder.
     mv -f ${Pwant} ${E1}/rootfs/repo/
     #log orig db vs new xbps pkg name... actually, the .xbps pkg name is unchanged
     echo "CONV_PKG_DB='${aL}'" > ${E1}/converted-pkgs/${PSTgeneric}
     echo "CONV_XBPS_PKG='${Pxbps}'" >> ${E1}/converted-pkgs/${PSTgeneric} #ex: acl-2.3.1_1.x86_64.xbps
    else
     cp -a -f ${Pwant} ${E1}/rootfs/repo/
    fi
      
    #register pkg in local repo inside rootfs...
    chroot ${E1}/rootfs /usr/bin/xbps-rindex -a /repo/${WIPpkg}
    #install it...
    chroot ${E1}/rootfs /usr/bin/xbps-install --yes --repository=/repo ${WIPnameonly}-${VER}
    sync
    if [ $GENflg -eq 1 ];then
     #prevent xbps from updating this pkg...
     chroot ${E1}/rootfs /usr/bin/xbps-pkgdb -m hold ${WIPnameonly}-${VER}
    fi
    rm -rf ${E1}/rootfs/repo/* #stop from growing.
   fi
  ;;
  
  compat:kirkstone)
   #check if already installed...
   INST="$(chroot ${E1}/rootfs /usr/bin/xbps-query --show ${WIPnameonly} --property state)"
   if [ "$INST" == "installed" ];then
    #this means xbps has already installed from the void repo. not what we want.
    #need to replace it with this one from kirkstone...
    chroot ${E1}/rootfs /usr/bin/xbps-remove -f -O -y ${WIPnameonly}
    if [ $? -ne 0 ];then
     echo "ERROR: failed trying to remove void pkg ${WIPnameonly}"
     exit 5
    fi
   fi
   
   #is it already downloaded?...
   if [ ! -f ${E1}/dl-txz/${WIPpkg} ];then
     cd ${E1}/dl-txz
     download_file https://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/packages/compat/oe/kirkstone/${WIPpkg}
   fi
   Pwant="${E1}/dl-txz/${WIPpkg}"
   
   #always expand.
   cd ${E1}/sandbox
   Pdir="${WIPpkg/.tar.xz/}"  #ex: WIPpkg=acl-2.3.1-r6-nocona-64.tar.xz
   mkdir $Pdir
   cd $Pdir
   tar --force-local --zstd -xf ${Pwant}
   cd ..
   
   #after expanding, if /usr/sbin exists but not hyperlink, fix it.
   if [ -d ${Pdir}/usr/sbin ];then
    if [ ! -h ${Pdir}/usr/sbin ];then
     cp -a -f --remove-destination ${Pdir}/usr/sbin/* ${Pdir}/usr/bin/
     ${L1}/pkg-fix/symlinks-fix ${E1}/sandbox/${Pdir}
    fi
   fi
   
   #split the pkg into ${Pdir}, ${Pdir}_DEV, ${Pdir}_DOC
   ${L1}/pkg-fix/pkg-split "${PSTsplit}" "${Pdir}"
   if [ ! -d ${Pdir} ];then
    #most likely entire folder got renamed to ${Pdir}_DEV, which we are not yet handling.
    continue
   fi
   
   #if pkg-fix/packages-templates/$PSTgeneric, than call template-fix
   if [ -d /usr/local/woofV/pkg-fix/packages-templates/${PSTgeneric} ];then
    /usr/local/woofV/pkg-fix/template-fix ${PSTgeneric} ${WIPcompatname} ${E1}/sandbox/${Pdir}
     
    #if there is a pinstall.sh, remove it. accumulate to execute later...
    if [ -e ${E1}/sandbox/${Pdir}/pinstall.sh ];then
     cat ${E1}/sandbox/${Pdir}/pinstall.sh >> ${E1}/sandbox/pinstall.sh
     rm -f ${E1}/sandbox/${Pdir}/pinstall.sh
    fi
   fi
   
   #lookup support/name-oe2void find if name change required
   #note, have left out file 'maybe'...
   F1="$(grep -m 1 "^{WIPnameonly}|" ${L1}/support/name-oe2void/exact ${L1}/support/name-oe2void/case ${L1}/support/name-oe2void/hyphen ${L1}/support/name-oe2void/number)"
   if [ ! -z "$F1" ];then
    Newnameonly="${F1/*|/}"
   else
    Newnameonly="${WIPnameonly}"
   fi
   
   #convert pkg-folder to .xbps
   DESC="$(cut -f 10 -d '|' <<<${aL})"
   #deps need to be converted to xbps repo names if possible...
   DEPS="$(cut -f 9 -d '|' <<<${aL} | tr '+' '\n' | tr -d ',' | tr '\n' ' ')"
   DEPS2=''
   for aDEP in ${DEPS}
   do
    F1="$(grep -m 1 "^{aDEP}|" ${L1}/support/name-oe2void/exact ${L1}/support/name-oe2void/case ${L1}/support/name-oe2void/hyphen ${L1}/support/name-oe2void/number)"
    if [ ! -z "$F1" ];then
     DEPS2="${DEPS2}${F1/*|/} "
    else
     DEPS2="${DEPS2}${aDEP} "
    fi
   done
   DEPS2="$(sed -e 's% $%%' <<<${DEPS2})"
   xbps-create -n "${Newnameonly}-${WIPversion}_${WIPrevision/r/}" -s "${DESC}" -A ${xARCH} -D "${DEPS2}" "${E1}/sandbox/${Pdir}"
   Pxbps="$(ls ${Newnameonly}-${WIPversion}_${WIPrevision/r/}*.xbps)" #ex: acl-2.3.1_6-nocona-64.xbps
   Pxbps="${Pxbps##*/}"
   
   #log orig db vs new xbps pkg name...
   echo "CONV_PKG_DB='${aL}'" > ${E1}/converted-pkgs/${PSTgeneric}
   echo "CONV_XBPS_PKG='${Pxbps}'" >> ${E1}/converted-pkgs/${PSTgeneric} #ex: acl-2.3.1_1.x86_64.xbps
   
   #install .xbps
   Pwant="${E1}/sandbox/${Pxbps}"
   WIPpkg="${Pxbps}"
   rm -f "$Pdir" #this is the expanded fixed folder.
   mv -f ${Pwant} ${E1}/rootfs/repo/
   echo "${WIPnameonly}-${WIPversion}-${WIPrevision} ${Newnameonly}-${WIPversion}_${WIPrevision/r/}" >> ${E1}/converted-pkgs/${PSTgeneric}
   #register pkg in local repo inside rootfs...
   chroot ${E1}/rootfs /usr/bin/xbps-rindex -a /repo/${WIPpkg}
   #install it...
   chroot ${E1}/rootfs /usr/bin/xbps-install --yes --repository=/repo ${Newnameonly}-${WIPversion}_${WIPrevision/r/}
   sync
   #the kirkstone pkg is likely to be an older version than in the void repo, so prevent update...
   chroot ${E1}/rootfs /usr/bin/xbps-pkgdb -m hold ${Newnameonly}-${WIPversion}_${WIPrevision/r/}
   rm -rf ${E1}/rootfs/repo/* #stop from growing.
  ;;
 esac
done < ${E1}/woof-installed-packages-dep-order

#do this to entire rootfs...
#      #fix .desktop files to suit EasyOS menu hierarchy...
#      /usr/local/woofV/pkg-fix/dot-desktop-fix ${E1}/sandbox/${Pdir}
# remove many sizes from /usr/share/icons
# fix any cicular symlinks --see code at end of 2create-start-rootfs

