#!/bin/bash
#create a rootfs that has just enough to chroot into, with xbps pkg management.

export LANG=C
E1='/mnt/wkg/data/woofV'
L1='/usr/local/woofV'

if [ ! -d ${E1}/rootfs-skeleton ];then
 echo "ERROR: have to run 0rootfs-skeleton/create-skel first"
 exit 1
fi

. /etc/rc.d/PUPSTATE
. ${L1}/configure/PKGS_MANAGEMENT #has PKG_NAME_IGNORE
. ${L1}/configure/DISTRO_COMPAT_REPOS
. ${L1}/configure/DISTRO_SPECS
case "$DISTRO_TARGETARCH" in
 amd64) xARCH='x86_64' ;;
 *)     xARCH="$DISTRO_TARGETARCH" ;;
esac

install_func() {
 #pass in folder to be installed.
 #currently in 'sandbox' folder.
 #this will follow symlink folders in rootfs,
 #do not follow if target file exists and is a symlink.
 FOLDER="$1"
 while read aF
 do
  if [ -d ${FOLDER}/"$aF" ];then
   mkdir -p ../rootfs/"$aF"/
  else
   aD="$(dirname "$aF")"
   mkdir -p ../rootfs/"$aD"/
   if [ -h ${FOLDER}/"$aF" ];then
    if [ -e ../rootfs/"$aF" ];then
     if [ ! -h ../rootfs/"$aF" ];then
      continue
     fi
    fi
   fi
   cp -a --remove-destination ${FOLDER}/"$aF" ../rootfs/"$aD"/
  fi
 done <<_END1
$(find ${FOLDER} -mindepth 1 | sed -e "s%${FOLDER}/%%")
_END1
}

fix_symlinks_func() {
 #simplify the symlinks. also detect circular symlinks.
 #currently in 'sandbox' folder.
 while read aL
 do
  [ ! "$aL" ] && continue
  LANG=C busybox realpath ${aL} 2>&1 | grep -q 'Symbolic link loop'
  if [ $? -eq 0 ];then
   rm -f ../rootfs/usr/bin/${aL##*/} #delete circular loop.
   continue
  fi
  aT="$(busybox readlink -n $aL)"
  if [ -f ../rootfs/usr/bin/${aT##*/} ];then
   if [ ! -h ../rootfs/usr/bin/${aT##*/} ];then
    ln -snf ${aT##*/} ${aL} #simplify symlink.
   fi
  fi
 done <<_END2
$(find ../rootfs/usr/bin -mindepth 1 -maxdepth 1 -type l)
_END2
 while read aL
 do
  [ ! "$aL" ] && continue
  LANG=C busybox realpath ${aL} 2>&1 | grep -q 'Symbolic link loop'
  if [ $? -eq 0 ];then
   rm -f ../rootfs/usr/lib/${aL##*/} #delete circular loop.
   continue
  fi
  aT="$(busybox readlink -n $aL)"
  if [ -f ../rootfs/usr/lib/${aT##*/} ];then
   if [ ! -h ../rootfs/usr/lib/${aT##*/} ];then
    ln -snf ${aT##*/} ${aL}
   fi
  fi
 done <<_END2
$(find ../rootfs/usr/lib -mindepth 1 -maxdepth 1 -type l)
_END2
}

PWD="`pwd`"
if [ ! -d /mnt/wkg/data/woofV/dl-start ];then
 echo 'have to run 1dl-start-pkgs first'
 exit 1
fi
cd /mnt/wkg/data/woofV

#may be still mounted if 5populate-rootfs aborted...
grep -q 'rootfs/var/cache/xbps' /proc/mounts
if [ $? -eq 0 ];then
 sync
 busybox umount /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/rootfs/var/cache/xbps
 sleep 1
fi
grep -q 'rootfs/proc' /proc/mounts
if [ $? -eq 0 ];then
 sync
 busybox umount /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/rootfs/proc
 sleep 1
fi

rm -rf rootfs 2>/dev/null
rm -rf sandbox 2>/dev/null
sync
mkdir sandbox

#cp -a -f /usr/local/woofV/support/chroot-rootfs ./ 2>/dev/null
#cp -a -f /usr/local/woofV/support/pet2dir ./ 2>/dev/null

if [ -d rootfs ];then
 echo "ERROR something is preventing /mnt/wkg/data/woofV/rootfs folder from being"
 echo "deleted. Manually delete then run this script again."
 exit 1
fi

#pre-populate rootfs...
cp -a ${E1}/rootfs-skeleton ./rootfs
find rootfs -type f -name EMPTYDIRMARKER -delete
sync

mkdir -p ${E1}/dl-xbps
mkdir -p ${E1}/rootfs/proc
mkdir -p ${E1}/rootfs/var/cache/xbps

busybox mount -o bind /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/dl-xbps /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/rootfs/var/cache/xbps
busybox mount -o bind /proc /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/rootfs/proc

#for internet access...
cp -f /etc/resolv.conf rootfs/etc/resolv.conf

mv -f rootfs/pinstall.sh sandbox/

#xbps manager to ignore some pkgs...
mkdir -p rootfs/etc/xbps.d
sed -e 's%^%ignorepkg=%' -e 's% %\nignorepkg=%g' <<<${PKG_NAME_IGNORE} > rootfs/etc/xbps.d/20-ignore.conf

###local non-xbps pkgs###
cd sandbox
BB="$(ls -1 ../dl-start | grep 'busybox')"
${L1}/support/pet2dir ../dl-start/${BB}
install_func ${BB/.pet/}
fix_symlinks_func
rm -f ../rootfs/pet.specs
rm -f ../rootfs/pinstall.sh

###static xbps pkg###
mkdir xbps
tar -x --zstd --directory=xbps/ -f ../dl-start/xbps-static-latest.${xARCH}-musl.tar.xz
install_func xbps

cd ..

###online xbps pkgs###
export XBPS_ARCH="$xARCH"
#register online repo...
#ref: https://docs.voidlinux.org/xbps/repositories/custom.html
#mkdir -p rootfs/etc/xbps.d
#echo -n '' > rootfs/etc/xbps.d/00-repository-main.conf
#echo -n '' > rootfs/etc/xbps.d/00-repository-nonfree.conf
#for aR in $(tr ' ' '\n' <<<${REPOS_DISTRO_COMPAT} | cut -f 2 -d '|')
#do
# echo "repository=${aR}/current" >> rootfs/etc/xbps.d/00-repository-main.conf
# echo "repository=${aR}/current/nonfree" >> rootfs/etc/xbps.d/00-repository-nonfree.conf
#done
#echo 'repository=https://ftp.swin.edu.au/voidlinux/current' >> rootfs/etc/xbps.d/00-repository-main.conf
#echo 'repository=https://ftp.swin.edu.au/voidlinux/current/nonfree' > rootfs/etc/xbps.d/10-repository-nonfree.conf

echo "repository=https://repo-fi.voidlinux.org/current" > rootfs/etc/xbps.d/00-repository-main.conf
echo "repository=https://repo-fi.voidlinux.org/current/nonfree" > rootfs/etc/xbps.d/10-repository-nonfree.conf

###startup rootfs###
#ref: https://man.voidlinux.org/xbps-install.1
#SSL_NO_VERIFY_PEER=1 ./chroot-rootfs rootfs xbps-install -Suy xbps-triggers base-files xbps
#getting some "can't create ... system group (missing groupadd)" try add 'shadow' pkg...
#20240129 'shadow' requires 'pam', which causes trouble... i will later install 'shadow' from kirkstone
#SSL_NO_VERIFY_PEER=1 ./chroot-rootfs rootfs xbps-install -Suy xbps-triggers shadow xbps
SSL_NO_VERIFY_PEER=1 chroot rootfs xbps-install -Suy xbps-triggers xbps
rm -f rootfs/usr/bin/*.static
sync

#installed:
#xbps-triggers glibc pam-base pam-libs pam acl attr shadow libcrypto3 libssl3
#openssl run-parts ca-certificates install bzip2 liblz4 liblzma libzstd zlib
#libarchive libxbps xbps    

#20230222 merge usr/share/locale.in into usr/share/locale
cp -a -f --remove-destination rootfs/usr/share/locale/* rootfs/usr/share/locale.in/
sync
rm -rf rootfs/usr/share/locale
mv -f rootfs/usr/share/locale.in rootfs/usr/share/locale

busybox umount /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/rootfs/var/cache/xbps
busybox umount /mnt/${WKG_DEV}/${WKG_DIR}data/woofV/rootfs/proc
exit
####

