#!/bin/sh
#(c) Copyright Barry Kauler 2023. License GPL v3 (/usr/share/doc/legal)
#creates a 681MiB skeleton image for 3buildeasydistro.
#put resultant image into folder sd-skeleton-images.
#structure: 1M gap, 7M fat12, 672M ext4, 1M nothing.
#20221226

#partition sizes...
P1M='7'
P2M='672'
IMGM0="$((${P1M}+${P2M}))" #679
IMGM="$((${IMGM0}+1))" #680 include the 1M gap before first partition.
IMGM1="$((${IMGM}+1))" #681 make the img 1MB bigger.

. ./DISTRO_SPECS

echo
echo 'Plug in a usb flash stick, 2GB or greater.'
echo -n 'Type drive name of stick (ex: sdc): '
read TARGETDRIVE
echo -n "It is ${TARGETDRIVE}, is that OK? ENTER if OK: "
read isitok

PARTNUM1="1"
PARTNUM2="2"
if [ "${TARGETDRIVE:0:2}" == "mm" -o "${TARGETDRIVE:0:2}" == "nv" ];then
 PARTNUM1="p1"
 PARTNUM2="p2"
fi

#sizes...
FDISKINFO="$(fdisk -l /dev/${TARGETDRIVE} 2>/dev/null)"
SIZEBYTES=`echo "$FDISKINFO" | grep '^Disk /dev' | cut -f 5 -d ' '`
SIZEKB=`expr $SIZEBYTES \/ 1024`
SIZEM=`expr $SIZEKB \/ 1024`
echo "Size of drive: ${SIZEM}MB"

IMGM2="$((${IMGM}+4))" #680+4
echo "Zeroizing first ${IMGM2}MB of drive..."
BLK4M="$((${IMGM2}/4))"
dd if=/dev/zero of=/dev/${TARGETDRIVE} bs=4M count=${BLK4M}
sync

echo
echo 'Creating a new dos partition table, using fdisk...'
busybox echo -e 'o\nw\n' | fdisk /dev/${TARGETDRIVE}
sync
sleep 4
partprobe /dev/${TARGETDRIVE}

echo "Creating ${P1M}MiB esp, ${P2M}M wkg partitions..."
#busybox echo -e "n\np\n1\n2048\n+${P1M}M\nw\n" | fdisk /dev/${TARGETDRIVE}
#busybox echo -e 't\nef\nw' | fdisk /dev/${TARGETDRIVE} #efi
#busybox echo -e 'a\nw' | fdisk /dev/${TARGETDRIVE} #boot flag
#echo -e "n\np\n2\n\n+${P2M}M\nw" | fdisk -u /dev/${TARGETDRIVE} #wkg part.
busybox echo -e "n\np\n1\n2048\n+${P1M}M\nt\nef\na\nn\np\n2\n\n+${P2M}M\nw\n" | fdisk /dev/${TARGETDRIVE}
sync
sleep 4
partprobe /dev/${TARGETDRIVE}

echo "Create fat12 filesystem..."
#too small for fat16
mkdosfs -F 12 -n easy1 -S 512 /dev/${TARGETDRIVE}${PARTNUM1}
sync

echo
echo "Creating ext4 f.s. without journal, encrypt, in /dev/${TARGETDRIVE}${PARTNUM2}"
mke2fs -q -t ext4 -O encrypt,^has_journal,^64bit -L easy2 -m 0 -b 4096 /dev/${TARGETDRIVE}${PARTNUM2}
sync
sleep 1
echo change > /sys/block/${TARGETDRIVE}/uevent

#create wkg_dir
mkdir -p /mnt/${TARGETDRIVE}${PARTNUM2}
busybox mount -t ext4 /dev/${TARGETDRIVE}${PARTNUM2} /mnt/${TARGETDRIVE}${PARTNUM2}
rmdir /mnt/${TARGETDRIVE}${PARTNUM2}/lost+found
mkdir /mnt/${TARGETDRIVE}${PARTNUM2}/easyos
sync
busybox umount /mnt/${TARGETDRIVE}${PARTNUM2}

echo
mkdir -p /mnt/${TARGETDRIVE}${PARTNUM1}
busybox mount -t vfat /dev/${TARGETDRIVE}${PARTNUM1} /mnt/${TARGETDRIVE}${PARTNUM1}
mkdir -p /mnt/${TARGETDRIVE}${PARTNUM1}/EFI/BOOT

sync

busybox umount /mnt/${TARGETDRIVE}${PARTNUM1}
sleep 1

echo
echo "Copying image to file 'easy-skeleton-${P1M}-${P2M}-${IMGM1}mb.img'"
#copy an extra 1M. this will be zeroes, prevents an old ext4 partition being recognised when write it  to a drive.
[ -f easy-skeleton-${P1M}-${P2M}-${IMGM1}mb.img ] && rm -f easy-skeleton-${P1M}-${P2M}-${IMGM1}mb.img
dd if=/dev/${TARGETDRIVE} of=easy-skeleton-${P1M}-${P2M}-${IMGM1}mb.img bs=1M count=${IMGM1}
sync
gzip easy-skeleton-${P1M}-${P2M}-${IMGM1}mb.img
sync
echo
echo "Done. Copy easy-skeleton-${P1M}-${P2M}-${IMGM1}mb.img.gz to folder sd-skeleton-images"

###end###
