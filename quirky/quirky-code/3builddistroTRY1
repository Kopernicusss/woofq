#!/bin/sh
#(c) Copyright Barry Kauler 2009.
#2createpackages has already built the generic packages in packages-$DISTRO_FILE_PREFIX/.
#these packages have generic names as specified in the second field of PKGS_SPECS_TABLE,
#which is a variable in ./DISTRO_PKGS_SPECS. The format of entries in table:
# yes|abiword|abiword,abiword-common|exe,dev,doc,nls
# ...if first field is 'yes' then it will be built into distro.
#100628 my 2.6.34 pet has modules.builtin and modules.order, don't delete.
#100629 if nouveau xorg driver exists, move nv driver to 'drivers-alternate'.
#100801,100806 file inline_get_pet, inline_get_compat have common code.
#100831 hack.
#100903 extract all kernel-specific files to zdrv, to support mix-n-match.
#100911 handle Packages-pet-lucid-official.
#100911 simple filenames vmlinuz, initrd.gz, puppy.sfs, zdrv.sfs, devx.sfs.
#100912 choose between old and new puppy filenames.
#100916 don't bother record devx sfs name. second help screen at bootup.
#101007 the latest busybox depmod generates relative paths in modules.dep, breaks modprobe in initrd.
#101012 have restored 'depmod-FULL' name to 'depmod'.
#101013 read variable PKG_PREFER_OLDER in file PKGS_MANAGEMENT to choose between 2 pkgs.
#101023 small bugfix. 101024 bugfix. 101025 bugfix.
#101026 display "wary <version>" on boot splash screen.
#101027 Iguleder reported DISTRO_SPECS did not have a carriage-return on last line.
#101028 added ko* as have some named .koHIDE.
#101126 Quirky is now built from wary5 pet packages.
#101217 get latest BaCon in devx.
#101222 some big modems named *HIDE, not *.ko.
#110213 fix if /usr/share/X11/locale/locale.alias missing .utf8 entries.
#110215 extra logic for BaCon compiler in devx.
#110329 move some python files to the 'devx'.
#110412 move all .bac, .pot and .pupdev files to 'devx'.
#110413 variable DISTRO_XORG_AUTO in /etc/DISTRO_SPECS, set in Woof '3builddistro'.
#110417 this will make Thunar use ROX-Filer's icons for files
#110421 vercmp utility.
#110422 DISTRO_VERSION variable now has dotted format. note, also now using full dotted version# in puppy filenames.
#110426 help file on CD for Windows users.
#110429 fix ownership of /root/spot just in case.
#110429 may need a fix, think want glibc scsi headers in usr/include/scsi.
#110512 fix for kernel pet name linux_kernel-2.6.32-40-w5.pet
#110516 attempt fix dependcheck() hanging.
#110517 debian squeeze hack, copy pango-querymodules from devx.
#110517 squeeze debian, boot splash message "squeezed <version>".
#110517 turn on kms for intel,radeon,nouveau if recent versions.
#110518 radical culling of modules, add fbcon.ko.
#110523 override files from rootfs-skeleton/root/Choices/MIME-types, if rox pkg has older files.
#110608 copy Packages-pet-common-official, not -woof-.
#110612 copy rpm2ppm and mageia2ppm needed by 0setup in built puppy.
#110620 do same as 110523, for mime icons.
#110621 fix for turning on kms.
#110622 hack for mageia 1 (otherwise can't find pango.modules)...
#110622 mageia1 requires pixbuf cache file to be at /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.
#110701 possible lib clash between e2fsprogs and util-linux (i might use old util-linux pet).
#110702 mageia1 python pkg puts /etc/profile.d/30python.csh in devx.
#110712 modinfo won't work if modules.* files missing.
#110712 reduce hid-* drivers moved to initrd, so when usbhid configured builtin, none be moved to initrd.
#110713 support xz compression for squashfs 4.2 and kernel 2.6.39+.
#110721 Drake Puppy: display "drake <version>" on boot splash screen.
#110726 Drake Puppy: config files put in usr/bin/multiarch-i386-linux, move to usr/bin.
#110727 running drake pup 0.3 with k2.6.39-3 new laptop, mysterious loss of dirs/files. try sync.
#110727 no longer using $PKG_PREFER_OLDER to select kernel-version-sensitive pkg alternatives.
#110803 workaround for 'pngoverlay' needs X runnning, also avoid cpu overhead at first startup.
#110806 if yad installed, no zenity, make sure zenity is symlink to yad.
#110816 add Packages-pet-slacko-official.
#110821 copy support/findpkgs into build.
#110822 removed fossil_fixup_func. improved choice of KMS on/off.
#110822 customizations script provided by 01micko for Slacko.
#110823 move asking for kernel pet from 3builddistro to 1download.
#110823 revert 110821 (also have removed rootfs-skeleton/usr/local/petget/findwoofinstalledpkgs.sh)
#110823 fix creating file woof-installed-packages.
#110824 add common repo default in PPM, set defaults for slacko.
#110826 no longer calling icon_switcher_cli from rc.update, modify 110803.
#110826 get the kernel version out of inside the PET pkg.
#110831 support png background image.
#110901 i have experimented with building a wary "5.2pre" without libxcb.
#110901 temp hack, if only have gtkdialog4 pkg.
#110903 pixbuf loader cache fix.
#110904 revert 110901 libxcb hack.
#110906 fix syntax error.
#110907 rcrsn51: network printing, need pdftops symlink.
#110910 make sure gtkdialog links to latest.
#110911 'drivers-alternate' moved from /usr/lib/xorg/modules/ to /usr/lib/x/.
#110912 modify jwm to use menu icon 'start-button.png' if present.
#110917 support file prefix 'racy'.
#110918 kernel-skeleton now has a pinstall.sh script.
#110918 radeon, default kms off. testers found can't shutdown with it on.
#110923 avoid conflict between busybox applets and full utilities.
#110928 boot splash image for Racy. 111003 racy logo.
#111004 for 110923, need to check in devx also.
#111006 generic logo mechanism for all pups. replaces 091206 100516 111003
#111010 set desktop font.
#111014 support 3.x kernel.
#111026 davids45: /tmp needs 777 permissions. i do have this in rootfs-skeleton, but lost in sandbox3/rootfs-complete
#111027 revert 110907. was symlinking to pdftops from poppler pkg, but must have actual pdftops from cups pkg.
#111114 support older gtk (2.20.1) for pixbuf loaders in new location.
#111121 noryb009: improve arch linux support, patched: 0setup, 1download, 2createpackages, 3builddistro, DISTRO_COMPAT_REPOS-arch, support/arch/runDotInstalls
#111123 support cross-build.
#111127 no need to copy 'printcols', 'vercmp' to target build, now done in 'merge2out' script.
#111203 remove offer to download and compile bacon (no good for cross-builds).
#111204 remove zdump from list.
#120215 language translations for init script.
#120216 set default LANG and KMAP. 120217 recommend UTF-8.
#120217 translate early-boot splash screens... (expect building with langpack)
#120224 move rootfs-complete/usr/share/doc/nls to 'devx'.
#120225 DISTRO_PUPPYDATE -> DISTRO_SPECS. this is read by /usr/share/doc/convert-raw-docs. (note: this script no longer exists)
#120305 copy Packages-pet-noarch-official to build.
#120312 removed Packages-pet-common-official from ppm default selection.
#120315 Ubuntu Precise Pangolin has done a big move of files from /lib to /lib/i386-linux-gnu and /usr/lib to /usr/lib/i386-linuxgnu
#120331 bugfix generating README.HTM on cd.
#120401 improve choosing locale.
#120502 more support for arm build.
#120506 support creation of SD-card image (for arm build).
#120506b check that sd card big enough.
#120510 offer to resize 2nd partition of SD card to fill card.
#120521 for SD-image build, copy-only console fonts and keyboard layouts to initrd, copy-only kernel modules to initrd.
#120522 precise puppy, seamonkey was crashing. needed /usr/share/glib-2.0/schemas/apps.gecko-mediaplayer.preferences, also must be compiled.
#120523 precise puppy, may also need to run gio-querymodules. (refer also installpkg.sh, rc.update)
#120526 try radeon kms default on. 120605 turn off again.
#120605 shinobar: generate gtk.immodules. ref: http://murga-linux.com/puppy/viewtopic.php?t=76961&start=195
#120613 kernel image can have different names. rename to vmlinuz, however change back later if build sd card.
#120616 check dri drivers exist before offer kernel modesetting.
#120618 raspi debian squeeze, links as main browser, helpsurfer html viewer, gtkmoz missing. 120620 modify.
#120628 certain utilities are not appropriate when booting on an arm board.
#120703 sd card: allow 2nd partition to be ext2, ext3 or ext4.
#120704 ask if want to load swap partition/file at bootup.
#120704 sd card image, ext2 f.s., offer to bump to ext4 (without journal).
#120705 refine upgrade ext2 to ext4. 120706 disktype misreports ext4 without journal as ext2.
#120707 change relatime to noatime. see also rc.sysinit.
#120708 added BOOT_QUICKSETUP='quickarm'. quickarm is symlink to /usr/sbin/quicksetup. leave out X config frame for arm boards.
#120709 fix for pci.ids and usb.ids in "wrong" place. new BOOT_UDEVDCHILDREN.
#120714 revert 120708. instead, BOOT_BOARD (= raspi, mele, odroidx, etc.) read by quicksetup.
#120720 raspbian wheezy has files in /lib/arm-linux-gnueabihf and /usr/lib/arm-linux-gnueabihf
#120721 support ubuntu and debian arm multiarch.
#120723 BOOT_DISABLEXORGWIZARD variable.
#120724 'alsaconf' does not work on arm boards, BOOT_DISABLEALSACONF variable. refer /usr/sbin/alsawizard.
#120830 my hunspell-en-us pet has pinstall.sh that creates symlinks of en_US.aff and en_US.dic from seamonkey and firefox. however, need to do this thoroughly.
#120831 simplify repo-list radiobuttons for ppm.
#120903 default radeon kms on again.
#120909 multiarch support for /usr/bin. (see also 2createpackages).
#120922 was getting "nv" listing twice (precise puppy) for xorg drivers-alternate.
#120925 ignore debian/ubuntu multiarch circular symlink (these are create by 2createpackages), when creating builtin_files lists.
#121010 fix for 120925.
#121022 fix for python not in devx, in main f.s.
#121028 copy devx-only-installed-packages to build. (refer findwoofinstalledpkgs)
#121102 file DISTRO_SPECS has new variable DISTRO_DB_SUBNAME. ex: for 14.0-based slacko, DISTRO_DB_SUBNAME=slacko14
#121105 fix enabled-repo list for ppm.
#121111 debdb2pupdb, new fast deb to pup db converter, called by 0setup.
#121123 changed default locale from en_US to en_US.UTF-8.
#121123 some chroot operations may leave something inside sandbox3/rootfs-complete/tmp, delete.
#121123 new variable DISTRO_ARCHDIR in /etc/DISTRO_SPECS
#121203 /usr/sbin/welcome1stboot needs this lib: /usr/lib/libgtk-x11-2.0.so (symlink was only in devx).
#121210 fix, ARCHDIR was not getting set.
#121212 puninstall.sh was not getting removed from root of sandbox3/rootfs-complete.
#121227 initrd: if kernel has f.s. drivers as modules (quirky6), added ext2.ko ext3.ko ext4.ko fat.ko msdos.ko vfat.ko ntfs.ko reiserfs.ko udf.ko, and deps: jbd.ko mbcache.ko jbd2.ko
#130111 proper handling of multiarch for mageia (refer 2createpackages).
#130112 multiarch symlinks now optional.
#130114 revert 130112.
#130129 offer to change X dpi from 78 to 96.
#130129 busybox: deb 'bsdmainutils' has broken 'cal' and 'hd' symlinks. 130130 tweak.
#130203 fix /tmp permissions.
#130204 01micko: fix for spaces in names.
#130226 hack for missing /usr/bin/X.
#130306 fix arch linux build. 130307 fix arch post-install script execution.
#130314 want to run arch post-install script from ppm also.
#130316 disable execution of arch install scripts.
#130316 now have rootfs-complete/usr/local/petget/invaliddepslist.
#130320 util-linux libblkid and libuuid have preference over e2fsprogs.
#130321 fix call to slacko customisation script.
#130326 X dpi now 96. 130327 offer choice of next-larger.
#130329 append extra line, needed for Qt4 theme matching. (see also /etc/profile.d/pup_gtk and /root/.config/Trolltech.conf).
#130330 Xorg: move modesetting_drv.so to drivers-alternate directory.
#130330 want 'universe' radiobutton before 'main'.
#130401 01micko: support gtk3 themes (see also 130329).
#130404 01micko: link to actual gtk3 theme.
#130418 support kmod. but, still use old depmod from module-init-tools in initrd (as unable to compile kmod statically).
#130430 coreutils 8.20 cp outputs different error message.
#130430 fix depmod symlink.
#130430 gpu/drm/sis.ko needs video/sis/sisfb.ko, must keep. WARNING: sisfb is blacklisted -- as mucks up my pc that has sis video and only vesa works.
#130510 support multiarch for debian wheezy.
#130512 scsijon: dpi size setting not working.
#130515 ask disable 'pupdesk.flg' mechanism, see also init script in initrd.
#130530 write puppy files to SD image file, not to card.
#130601 new script support/setup-spot, optional run internet apps as user 'spot'.
#130604 tweak 130601.
#130612 support devtmpfs. see also 'init' script in initrd.
#130613 kmod depmod wants modules.builtin, modules.order.
#130618 modify 130612.
#130618 restore the "layer:" lines in /etc/xdg/templates/_root_.jwmrc.
#130710 01micko: DEVTMPFSFLG bug fix.
#130720 add QtWeb option to run as spot. 130721 fixes.
#130723 add opera option to run as spot.
#130725 if alternate-browser, set defaulthtmlviewer to it. 130726 fix.
#130821 add firefox option to run as spot.
#131207 quirky6 only has modesetting and vesa drivers. 131208
#131209 Packages-puppy- files renamed to Packages-pet-
#131211 reduced pkg db selection for package manager.
#131214 Quirky 6.0: using "quirky60" icon,wallpaper,jwm,gtk themes. also modify rox here.
#131214 fix db files in quirky6 build. 131215.
#131217 librsvg compiled in T2 does not have file 'gdk-pixbuf.loaders', need to insert.
#131217 gtk-update-icon-cache previous executed in rc.update at 1st boot, now here.
#131229 fix for 131217 svg fix.
#131229 quirky, devx now a pet, remove some stuff.
#140102 improve devx/etc/profile.d/pkgconfig
#140116 bring back multiarch dirs (optional). see also 2createpackages, /usr/local/petget/installpkg.sh.
#140117 imported quirky6 post-woof changes, some files postfixed with *QSTATIC or *QNEW need to override.
#140118 gtk/gdk multiarch dirs.
#140119 removed DISTRO_IDSTRING, _PUPPYSFS, _ZDRVSFS, _DEVXSFS. no more zdrv.
#140119 remove initrd stuff totally. no live-cd .iso anymore, create a f.s. image file. 140120
#140120 create devx .pet, not .sfs.
#140122 /usr/lib/i386-linux-gnu/*/include -- seamonkey unable to find these. attempt fix find /usr/include/$ARCHDIR
#140125 DISTRO_ARCHDIR and DISTRO_ARCHDIR_SYMLINKS are in DISTRO_SPECS, created in 2createpackages.
#140125 export NO_AT_BRIDGE=1 for gtk3 apps. refer: http://forums.gentoo.org/viewtopic-t-947210-start-0.html
#140127 if missing drivers24.png, folders24.png, create them (see also /usr/sbin/icon_switcher)...
#140127 glib-compile-schemas and gio-querymodules were lost.
#140128 export DISTRO_FILE_PREFIX, refer rootfs-skeleton/pinstall.sh
#140201 devx: deleting .a, leaves some broken links behind. ex in quirky tahr /lib/i386-linux-gnu/libcurses.a -> libncurses.a
#140201 devx: quirky tahr, devx has /usr/bin/man, but main f.s. has man as a symlink to script pman.
#140202 set default dirs into /file. ###work in progress###
#140202 simplify code copy Packages-*.  append multiarch lib paths on end of LD_LIBRARY_PATH.
#140204 improve finding ldconfig
#140206 no longer setting LD_LIBRARY_PATH in /etc/profile
#140209 remove 130513, the pupdesk.flg mechanism. not needed in full installation. see also quicksetup, xorgwizard-cli, /root/.profile
#140215 chromium needs some libs that are in seamonkey, make sure all symlinks exist.
#140215 create rootfs-complete/etc/lsb-release
#140215 add chromium option run as spot. see also loginmanager, support/setup-spot.
#140218 improved devx completed install msg.
#141017 quirky unicorn, compile seamonkey needs /usr/sbin/i686-linux-gnu-gcc, but only have ...-gcc-4.6 symlink.
#141019 quirky unicorn has lots of /usr/share/doc/*-dev folders.
#141023 option for rox desktop text white without shadow.
#141023 Packages-pet-tahr-official was missing from build.
#141107 installing some slacko64 pets into quirky unicorn64, have /lib64, /usr/lib64.
#141107 log missing pkgs.
#141110 64-bit libary path mismatch of fatdog64/slacko64 and qu64 causes chroot test to fail from those host distros.
#141112 remove dependcheck() code not working.
#141113 now using folder /etc/ld.so.conf.d/
#141118 buildroot fixes.
#141123 buildroot build has busybox inside 0buildroot. refer FIXUPHACK in 0buildroot template.
#141204 now have file 'default-theme', see support/choose_themes
#141205 currently only have rootfs-skeleton/usr/bin/seamonkeyQNEW. removed busyboxQSTATIC ...no, leave.
#141206 added DEFAULT_THEME_XORG_TEXT_DPI to default-theme.
#141206 eudev may actually be named udev, and has 1.x version.
#141206 woof-distro/*/*/*/build-choices can have some variables to preset build choices...
#141207 make gtkdialog links more logical. 
#141207 mksquashfs: fix for alternate path.
#141207 'planner' pet installs /var/scrollkeeper, but 'scrollkeeper' pkg has same stuff in /var/lib
#141213 fixed 141207 gtkdialog.
#141230 add sandbox3/devx/lib to search for 'pkgconfig' folders.
#141231 simplify mksquashfs symlink.
#150102 handle ARCHDIR=lib64 for T2 amd64 build.
#150103 moved fixmenus down, below setup of library paths.
#150115 missing libs test moved down, below setup of library paths.
#150122 add BUILD_CHOICE_TRUE_SCSI_KERNEL_DRIVERS, BUILD_CHOICE_FB_KERNEL_DRIVERS, BUILD_CHOICE_EXOTIC_KERNEL_DRIVERS, BUILD_CHOICE_RADICAL_KERNEL_DRIVERS in file build-choices.
#150205 zdrv no longer a sfs, now a pet.
#150209 add devx and zdrv pets to pet-db in build.
#150210 run depmod when install zdrv pet.
#150224 moved up, creating of symlink to release notes.
#150308 there are other .pot files scattered around, copy to devx.
#150308 keep all .pot in main f.s., as momanager is supposed to work without devx loaded.
#150419 added devuan support. refer: dimkr: https://github.com/puppylinux-woof-CE/woof-CE/pull/528/files
#150704 support 4.x kernels.
#150714 support/build-order, called from support/findpkgs, creates list of generic-names in dependency-order.
#150724 app-inventor pkg has .git folder, 381MB, offer to remove from devx.
#150725 variable BUILD_CHOICE_MERGE_DEVX in file build-choices. 150726 fixes.
#150726 variable BUILD_CHOICE_README_DEV_DESK_ICON in file build-choices.
#150726 variable BUILD_CHOICE_LANG in file build-choices.
#150727 repacking .jar files with zero compression will allow them to be xz'ed smaller.
#150727 squashfs 4.2, use xz compression, don't ask.
#150728 2createpackages leaves DEBIAN folder, may have preinst and postinst scripts. 150801
#150730 more pkgs in minimal chrootable f.s.
#150731 moved creation minimal-chrootable f.s. up, as some pkgs were overwriting skeleton scripts.
#150814 fix moving .a to devx.
#150925 april, this 'fonts' folder is a symlink, but devx has it as a folder. hack fix.
#150925 want to leave these .a's alone (from glibc).
#150928 /usr/X11R7 now a symlink to current directory (/usr).
#150928 find path, may not be rootfs-complete/usr/lib/xorg/modules/drivers
#150929 weird, tr creating multiple ' chars, have to run tr -s "'"
#150929 devx: usr/X11R7 now a symlink, need fix for copy.
#151108 fix for boot logo.
#151113 some files in /usr/include in main f.s., move to devx.
#151123 export xARCHDIR, used by template xine-ui pinstall.sh.
#151206 hack to fix creation of logo.16 boot splash.
#160321 pango-querymodules may not exist anymore.
#160323 drivers/video.fbdev/core has fb_sys_ops.ko (needed by i915.ko) and fb_ddc.ko -- must keep.
#160824 update arm build.
#160902 use overlay fs instead of aufs, if exists.
#160914 instead of generating locales and w.m. menus via rc.country at 1st bootup, do it here.
#160921 want busybox 'strings' applet when devx not installed.
#160923 cross-build fix for debdb2pupdb and find_cat.
#160927 always create symlinks to 'glib-compile-schemas' etc.
#160928 board select for pkgs sub-selection. now have kernel pet for xu4 board. 160929 fix.
#161002 no 'lib64' symlink for 32-bit target.
#161003 file 'build-choices' now has BUILD_CHOICE_BOARD.
#161005 remove rootfs-complete/DEBIAN* folders.
#161012 raspberry pi has /opt/vc/lib, add to /etc/ld.so.conf, also remove duplicate entries.
#161020 Pi2, /opt/vc/lib is in sd-skeleton image, need to run ldconfig later.
#161022 export BOOT_BOARD for pinstall.sh. improve finding release notes.
#161026 file DISTRO_SPECS now has variable DISTRO_SKELETON_IMAGE.
#161103 BOOT_BOARD=pc when a PC. 161114 fix.
#161114 kernel 4.8.7 x86_64 now have overlay builtin.
#161123 sd-card build, create .usfs.xz, so can create service-packs.
#161130 hack, set max usb current to 1.2A in Pi2 and Pi3.
#161210 now have boot/easyinit
#161230 offer to dump llvm_DEV. fix gtk/gdk symlinks. 161231 fix lib64 paths.
#170103 '-processors 1' for all mksquashfs operations.
#170105 set colors of xload in jwm tray
#170222 recent change prevented /usr/lib64 from being converted into a symlink to /usr/lib if a symlink in pet, but
# this upsets some pets from april64. affected pets: libdvdcss xfdiff-cut file hardinfo planner libgtkhtml xfdiff-cut_DEV xarchive metamail gnome-menus netpbm
# ...for ubuntu/debian builds, restore /usr/lib64 as a symlink.
#170224 for security reasons, do not turn on some daemons by default.
#170325 /usr/local/petget/0setup wants build-choices.
#170418 installing some april pkgs into yocto morty, there are two levels of symlinks, /usr/X11R7/lib64
#170429 yocto pyro, gtk-update-icon-cache did not exist.
#170511 fix 'ca-certificates' package.
#170515 oe, usr/lib/gconv/gconv-modules.cache is missing.
#170517 python-tiny stays in main f.s. fix some indenting.
#170526 keep the .a static libs!
#170527 DISTRO_SPECS may have #EASY or #QUIRKY. 170528
#170604 raspi, delete /boot/*
#170624 oe pyro, no kernel pet, using kernel built in oe, depmod missing.
#170625 set KERNELVER
#170703 error "overlapping loop device exists" when try mount both partitions in .img file.
#170704 new variable BUILD_CHOICE_RASPI_CONFIG_TXT for editing 'config.txt'.
#170704 hack for pi, has opt/vc/lib/*.a libs in skeleton, move to devx.
#170704 armv7: pet-common etc pkgs may be incompatible.
#170704 take out '--strip-unneeded' when strip.
#170705 boot/easyinit must be kept.
#170709 a symlink in /etc/ld.so.conf.d was getting broken.
#170716 BUILD_CHOICE_FRUGAL_SAVE_ASK is set in file 'build-choices'.
#170731 recent kernel 4.11.12 configured without aufs layer reval. export WOOF_TARGETARCH
#170801 /lib64 and /usr/lib64 may have to be symlinks.
#170801 fixed devx copy, following symlinks.

export LANG=C #faster.

#w482 use xorriso if it is installed (see also functions4puppy)...
CDRECORD='cdrecord'
MKISOFS='mkisofs'
if [ "`which xorriso`" != "" ];then
 CDRECORD='xorrecord'
 MKISOFS='xorrisofs' #growisofs reads this variable.
fi
export CDRECORD MKISOFS

. ./DISTRO_SPECS      #this has DISTRO_VERSION.
if [ ! "$DISTRO_DB_SUBNAME" ];then #121102
 DISTRO_DB_SUBNAME="$DISTRO_COMPAT_VERSION" #fallback if DISTRO_DB_SUBNAME not defined in file DISTRO_SPECS.
 echo '#subname for online PETs dir. Ex: "slacko14", dir "pet_packages-slacko14", db file "Packages-pet-slacko14-official":
#note: prior to existence of this variable, online subname was set to $DISTRO_COMPAT_VERSION or via some hack code.
' >> ./DISTRO_SPECS
 echo "DISTRO_DB_SUBNAME='${DISTRO_DB_SUBNAME}'" >> ./DISTRO_SPECS
fi
if [ -f ./DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then
. ./DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
else
. ./DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT} #130306
fi
if [ -f ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then #w478
. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} #has FALLBACKS_COMPAT_VERSIONS
 DPSFILE="DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}" #161003
else
. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT} #has FALLBACKS_COMPAT_VERSIONS
 DPSFILE="DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}" #161003
fi

. ./PKGS_MANAGEMENT #101013 want variable PKG_PREFER_OLDER.
. ./DISTRO_PET_REPOS #120506 want variable PACKAGELISTS_PET_ORDER

if [ -f WOOFMERGEVARS ];then #111123
. ./WOOFMERGEVARS #has variables WOOF_HOSTARCH, WOOF_TARGETARCH, WOOF_COMPATDISTRO, WOOF_COMPATVERSION
else
 echo 'File WOOFMERGEVARS does not exist. This is created by script
merge2out. Your setup is wrong, quiting.'
 exit
fi
export WOOF_TARGETARCH #170731 want this in rootfs-skeleton/pinstall.sh

#141206
BUILD_CHOICE_XORG_DRIVERS_ALTERNATE='' #values: 'none', 
BUILD_CHOICE_TRUE_SCSI_KERNEL_DRIVERS='' #150122 values: 'keep', 'delete'
BUILD_CHOICE_FB_KERNEL_DRIVERS='' #150122 values: 'keep', 'delete'
BUILD_CHOICE_EXOTIC_KERNEL_DRIVERS='' #150122 values: 'keep', 'delete'
BUILD_CHOICE_RADICAL_KERNEL_DRIVERS='' #150122 values: 'keep', 'delete'
BUILD_CHOICE_MERGE_DEVX='' #150725 values: 'yes' or anything else for no.
BUILD_CHOICE_README_DEV_DESK_ICON='' #150726 ditto.
BUILD_CHOICE_LANG='' #150726 default LANG, or empty to ask.
BUILD_CHOICE_BOARD='' #161003 values: raspi, odroidx, anything else for pc.
if [ -f build-choices ];then
. ./build-choices
fi

#120506. 160928. 161003.
case "$BUILD_CHOICE_BOARD" in #in file build-choices.
 raspi) SDFLAG='s'; BOOT_BOARD='raspi' ;;
 odroidx) SDFLAG='s'; BOOT_BOARD='odroidx' ;;
 *) SDFLAG=''; BOOT_BOARD='pc' ;; #building for a pc.
esac
export BOOT_BOARD #161022 want this in pinstall.sh

echo "WARNING: building for board: ${BOOT_BOARD}"
#160928 filter pkg selection based on board type...
xBOOT_BOARD="#$(echo -n "$BOOT_BOARD" | tr '[a-z]' '[A-Z]')" #ex: #ODROIDX
xBOARDS='#RASPI #ODROIDX #MELE #PC'
cp -f ${DPSFILE} /tmp/DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}COPY
#also filter DISTRO_SPECS...
cp -f DISTRO_SPECS /tmp/DISTRO_SPECSCOPY
for eachBOARD in $xBOARDS
do
 [ "$eachBOARD" == "$xBOOT_BOARD" ] && continue
 sed -i "/${eachBOARD}/d" /tmp/DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}COPY
 sed -i "/${eachBOARD}/d" /tmp/DISTRO_SPECSCOPY
done
echo "PKGS_SPECS_TABLE has been filtered for board '${xBOOT_BOARD}'"
. /tmp/DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}COPY
echo "File DISTRO_SPECS has been filtered for board '${xBOOT_BOARD}'"

#170527 DISTRO_SPECS may have #EASY or #QUIRKY
#3builddistro is only for the latter...
echo "File DISTRO_SPECS has been filtered for distro #QUIRKY"
sed -i '/#EASY/d' /tmp/DISTRO_SPECSCOPY

. /tmp/DISTRO_SPECSCOPY

#140125 DISTRO_ARCHDIR and DISTRO_ARCHDIR_SYMLINKS are in DISTRO_SPECS, created in 2createpackages.
ARCHDIR="$DISTRO_ARCHDIR"
xARCHDIR=""
if [ "$DISTRO_ARCHDIR_SYMLINKS" = "no" ];then
 if [ "$ARCHDIR" == "lib64" ];then #150102
  xARCHDIR="64"
 else
  xARCHDIR="/${ARCHDIR}"
 fi
fi
export xARCHDIR #151123

#the files that have compatible-distro pkg docs (these were downloaded by 0setup)...
PKGLISTS_COMPAT="`echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | cut -f 3 -d '|' | tr '\n' ' ' | sed -e 's% $%%'`" #see file DISTRO_PKGS_SPECS-ubuntu
#...format ex: 'Packages-ubuntu-intrepid-main Packages-ubuntu-intrepid-universe'

WKGDIR="`pwd`"

LAYERFS='aufs'
if modinfo -n overlay > /dev/null 2>&1 ;then #160902
 LAYERFS='overlay'
fi
#161114 kernel 4.8.7 x86_64 now have overlay builtin...
KERNVER="$(uname -r)"
[ "$(grep 'overlay\.ko' /lib/modules/${KERNVER}/modules.builtin)" != "" ] && LAYERFS='overlay'

#120506 params passed from woof_gui_tabs. moved up...
#KERNELPKG=""
#[ $1 ] && KERNELPKG="$1"
CHOICE_BIGMODEM=""
[ $3 ] && CHOICE_BIGMODEM="$3" #Erase_big_modems Keep_big_modems Zdrv_big_modems
#CHK_FB_STATE=""
#[ $4 ] && CHK_FB_STATE="$4"
#CHK_EXOTIC_STATE=""
#[ $5 ] && CHK_EXOTIC_STATE="$5"
#CHK_RADICAL_STATE=""
#[ $6 ] && CHK_RADICAL_STATE="$6"

if [ "$SDFLAG" != "" ];then
 #override module choices, as kernel is built customized to particular hardware...
 CHOICE_BIGMODEM="Keep_big_modems"
 #CHOICE_SCSI="Keep_SCSI"
 #CHK_FB_STATE="false"
 #CHK_EXOTIC_STATE="false"
 #CHK_RADICAL_STATE="false"
 #CHK_YES_ZDRV="false"
fi

#w003 remove comments from PKGS_SPECS_TABLE
zPKGS_SPECS_TABLE="`echo "$PKGS_SPECS_TABLE" | grep -v '^#'`"
PKGS_SPECS_TABLE="$zPKGS_SPECS_TABLE"

mkdir -p sandbox3

#cp -a -f install-quirky-to-drive.sh sandbox3/ #140119  140120 no.

export DISTRO_FILE_PREFIX #140128
export DISTRO_NAME
export DISTRO_VERSION
if [ "`echo -n "$DISTRO_VERSION" | grep '\.'`" = "" ];then #110422
 DIGIT1="`echo "$DISTRO_VERSION" | cut -b 1`"
 DIGIT2="`echo "$DISTRO_VERSION" | cut -b 2`"
 DIGIT3="`echo "$DISTRO_VERSION" | cut -b 3`"
 RIGHTVER="${DIGIT1}.${DIGIT2}.${DIGIT3}"
 [ "$DIGIT3" = "0" ] && RIGHTVER="${DIGIT1}.${DIGIT2}"
else
 RIGHTVER="$DISTRO_VERSION"
fi

#the kernel is supposed to be a .pet package, already downloaded into packages-pet...
KERNELPKG="$DISTRO_KERNEL_PET"
if [ "$DISTRO_KERNEL_PET" == "" ];then #160824
 KERNELVER=''
 MKSQUASHFS='mksquashfs4.2'
else
 echo "The kernel pkg that you are using is: $KERNELPKG"
 echo "This is specified in variable DISTRO_KERNEL_PET in file DISTRO_SPECS."
 echo "Note, the linux_kernel PET needs to be in directory packages-pet."
 #110826
 KERNELVER="`tar --list -z -f packages-pet/${KERNELPKG} 2>/dev/null | grep -o '/lib/modules/[234]\..*' | head -n 1 | cut -f 4 -d '/'`" #120502 hide error msg. 150704 4.x kernel.
 dotnum="`echo -n "$KERNELVER" | sed -e 's%[^\.]%%g' | wc -c`"
 if [ "$dotnum" = "2" ];then
  #SUB_SUB_KERNELVER=`echo -n "$KERNELPKG" | cut -f 3 -d '-'`
  SUB_SUB_KERNELVER=0 #cos we don't really know what it is.
 else
  SUB_SUB_KERNELVER=`echo -n "$KERNELVER" | cut -f 1 -d '-' | cut -f 4 -d '.'`
 fi
 SUB_KERNELVER=`echo -n "$KERNELVER" | cut -f 1 -d '-' | cut -f 3 -d '.'`
 MAJ_KERNELVER=`echo -n "$KERNELVER" | cut -f 1 -d '-' | cut -f 1 -d '.'` #111014 2 or 3. 150704 or 4.
 echo
 echo "You have chosen $KERNELPKG, which is version $KERNELVER."
 #if >= 2.6.29 kernel, use mksquashfs v4.0...
 if [ "$MAJ_KERNELVER" = "2" ];then
  MKSQUASHFS='mksquashfs3.3'
  [ $SUB_KERNELVER -ge 29 ] && MKSQUASHFS='mksquashfs4.0'
  [ $SUB_KERNELVER -ge 39 ] && MKSQUASHFS='mksquashfs4.2' #110713
  [ $SUB_KERNELVER -eq 18 ] && MKSQUASHFS='mksquashfs3.3' #w479 2.6.18.8 kernel
  [ $SUB_KERNELVER -eq 18 ] && [ $SUB_SUB_KERNELVER -eq 1 ] && MKSQUASHFS='mksquashfs3.2' #w479
  [ $SUB_KERNELVER -eq 27 ] && [ $SUB_SUB_KERNELVER -gt 46 ] && MKSQUASHFS='mksquashfs4.0' #100607
 else #111014
  MKSQUASHFS='mksquashfs4.2'
 fi
fi #160824

SQUASHFSMAJOR="`echo -n "$MKSQUASHFS" | cut -f 1 -d '.' | rev | cut -c 1`" #3 or 4.

#150727 don't ask...
COMPCHOICE=''
if [ "$MKSQUASHFS" = "mksquashfs4.2" ];then #110713
# echo
# echo ".sfs files are normally compressed with gzip."
# echo "However, this kernel supports xz, which is higher compression."
# echo -n "Press ENTER only for gzip, any other char for xz: "
# read XZCHOICE
# if [ "$XZCHOICE" ];then
#  echo "...xz chosen"
  COMPCHOICE='-comp xz'
# else
#  echo "...gzip chosen"
#  COMPCHOICE=''
# fi
fi

#110823
echo
./findwoofinstalledpkgs #creates woof-installed-packages, which later gets copied into sandbox3/rootfs-complete/root/.packages/
#121028 ...now also creates devx-only-installed-packages.

#140119 traditional names only...
PREFIX1CHAR="`echo -n "$DISTRO_FILE_PREFIX" | cut -c 1`"
#160824 KERNEL3CHARS="`echo -n "$KERNELVER" | tr -d '.' | tr -d '\-' | tr -d '[a-z]' | rev | cut -c 1,2,3 | rev`"
PUPPYSFS="puppy_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
ZDRVPET="linux_modules_extra-${DISTRO_VERSION}-${DISTRO_FILE_PREFIX}.pet"
CHK_SIMPLE_FILENAMES='false'

#now build rootfs-complete, the main filesystem...
echo
echo "Now building sandbox3/rootfs-complete, with the complete filesystem..."
echo '#!/bin/sh' > sandbox3/pinstall.sh
rm -rf sandbox3/rootfs-complete
sync
mkdir sandbox3/rootfs-complete

#150731 moved this up, as some pkgs were overwriting skeleton scripts...
if [ -f status/findpkgs_GENERIC_NAMES-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then #150714
 #150728 want to create a minimal chroot-able rootfs-complete, so can run pre- and post-install deb scripts...
 echo "Creating minimal chroot-able f.s. in sandbox3/rootfs-complete..."
 #150730 'awk' may not be in busybox... ubuntu 'coreutils' has no deps, but needs libacl.so.1 and libattr.so.1 ... 'awk' needs mpfr...
 #150730 perl is installing too late so put here... 'glib' also...
 for AMINPKG in busybox glibc pcre libselinux bash ncurses dpkg readline libffi gawk acl attr mpfr4 perl glib
 do
  [ -d packages-${DISTRO_FILE_PREFIX}/${AMINPKG} ] && cp -a -f --remove-destination packages-${DISTRO_FILE_PREFIX}/${AMINPKG}/* sandbox3/rootfs-complete/
 done
 [ -e sandbox3/rootfs-complete/pet.specs ] && rm -f sandbox3/rootfs-complete/pet.specs
 [ -e sandbox3/rootfs-complete/pinstall.sh ] && rm -f sandbox3/rootfs-complete/pinstall.sh
 rm -rf sandbox3/rootfs-complete/DEBIAN* 2> /dev/null
fi

mkdir -p sandbox3/rootfs-complete/etc
#cp DISTRO_SPECS sandbox3/rootfs-complete/etc/
cp -f /tmp/DISTRO_SPECSCOPY sandbox3/rootfs-complete/etc/DISTRO_SPECS #170528

#copy the skeleton...
cp -a -f --remove-destination rootfs-skeleton/* sandbox3/rootfs-complete/ #150731
cat sandbox3/rootfs-complete/pinstall.sh >> sandbox3/pinstall.sh
rm -f sandbox3/rootfs-complete/pinstall.sh

rm -f /tmp/3builddistro_removed_alt 2>/dev/null #101013

#170801 /lib64 and /usr/lib64 may have to be symlinks...
echo "/lib" > sandbox3/rootfs-complete/etc/ld.so.conf
echo "/usr/lib" >> sandbox3/rootfs-complete/etc/ld.so.conf
case $WOOF_TARGETARCH in #161002
 x86|armv7) #32-bit
  true
 ;;
 *) #64-bit ex: amd64
  if [ "$ARCHDIR" ];then #ex1: i386-linux-gnu  ex2: x86_64-linux-gnu
   if [ "$ARCHDIR" != "lib64" ];then #150102
    if [ "$DISTRO_ARCHDIR_SYMLINKS" = "no" ];then
     mkdir -p sandbox3/rootfs-complete/lib/${ARCHDIR}
     mkdir -p sandbox3/rootfs-complete/usr/lib/${ARCHDIR}
     ln -snf lib/${ARCHDIR} sandbox3/rootfs-complete/lib64
     ln -snf lib/${ARCHDIR} sandbox3/rootfs-complete/usr/lib64
     echo "/lib/${ARCHDIR}" >> sandbox3/rootfs-complete/etc/ld.so.conf
     echo "/usr/lib/${ARCHDIR}" >> sandbox3/rootfs-complete/etc/ld.so.conf
    else
     ln -snf ./ sandbox3/rootfs-complete/lib64
     ln -snf ./ sandbox3/rootfs-complete/usr/lib64
    fi
   else
    if [ "$DISTRO_ARCHDIR_SYMLINKS" = "no" ];then
     mkdir -p sandbox3/rootfs-complete/lib64
     mkdir -p sandbox3/rootfs-complete/usr/lib64
     echo "/lib64" >> sandbox3/rootfs-complete/etc/ld.so.conf
     echo "/usr/lib64" >> sandbox3/rootfs-complete/etc/ld.so.conf
    else
     ln -snf ./ sandbox3/rootfs-complete/lib64
     ln -snf ./ sandbox3/rootfs-complete/usr/lib64
    fi
   fi
  fi
 ;;
esac
#140123 note, ld.so.conf appended-to further down.

echo "3builddistro found these pkgs missing in packages-${DISTRO_FILE_PREFIX}:" > zmissing-pkgs-3builddistro #141107
if [ -f status/findpkgs_GENERIC_NAMES-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then #150714 150731
 #these names are listed in dependency-order, not alphabetical.
 PKGLIST="$(cat status/findpkgs_GENERIC_NAMES-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} | tr '\n' ' ')" #names in dependency-order.
else
 PKGLIST="`echo "$PKGS_SPECS_TABLE" | grep '^yes' | cut -f 2 -d '|' | tr '\n' ' '`"
fi

if [ "$BUILD_CHOICE_MERGE_DEVX" == "yes" ];then #150725
 #manipulate the pkg-list to remove "dev" target...
 xPKGS_SPECS_TABLE="$(echo "$PKGS_SPECS_TABLE" | sed -e 's%dev>exe%YYYYYY%' -e 's%dev>null%ZZZZZZ%' -e 's%exe>dev%exe%' -e 's%nls>dev%nls>exe%' -e 's%doc>dev%doc>exe%' -e 's%,dev%%' | sed -e 's%>dev%%' -e 's%dev,%%' -e 's%ZZZZZZ%dev>null%' -e 's%YYYYYY%dev>exe%' -e 's%,|%|%')"
 PKGS_SPECS_TABLE="$xPKGS_SPECS_TABLE"
fi

echo "Populating sandbox3/rootfs-complete from packages-${DISTRO_FILE_PREFIX}..."
rm -f deb-postinst-log 2>/dev/null
for ONEPKG in $PKGLIST
do
 if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG} ];then
  if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG}_DEV ];then #pkg may go entirely into devx.
   if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG}_DOC ];then #pkg may go entirely into docs.
    echo "WARNING, PKG DOES NOT EXIST: packages-${DISTRO_FILE_PREFIX}/${ONEPKG}"
    echo "${ONEPKG}" >> zmissing-pkgs-3builddistro #141107
    continue
   fi
  fi
 fi
 echo -n '.'

 #110923 avoid conflict between busybox applets and full utilities...
 [ "$ONEPKG" == "busybox" ] && continue #see below.
 
 #cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}/* sandbox3/rootfs-complete/ 2> /dev/null
 #w003 problem. pet pkg seamonkey_addon_adblock has files in /usr/lib/seamonkey but in rootfs-complete
 #usr/lib/seamonkey is a symlink to seamonkey-1.1.14 and copy fails. this will follow path with a
 #symlink (hopefully doesn't break something else)...
 #looks okay. the --remove-destination ensures that if target file already exists as a symlink
 #it will be deleted first and won't be followed. shit no, it changed /usr/lib/seamonkey into a dir...
 #cp -r --preserve=mode,ownership,timestamps,links --dereference --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}/* sandbox3/rootfs-complete/ 2> /dev/null
 #/usr/sbin/petget solves this a different way, let's try that...
 
 #130430 new problem with coreutils 8.20... ex building raring pup...
 #ex: cp -a --remove-destination packages-raring/synclient/* sandbox3/rootfs-complete/
 #coreutils 5.2.1 stderr: cannot overwrite non-directory `sandbox3/rootfs-complete/usr/X11' with directory `packages-raring/synclient/usr/X11'
 #coreutils 8.20 (in Raring) stderr: cp: cannot overwrite non-directory ‘sandbox3/rootfs-complete/usr/X11’ with directory ‘packages-raring/synclient/usr/X11’
 #...!!!! ok, attempt to fix...
 
 cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}/* sandbox3/rootfs-complete/ 2> /tmp/3builddistro-cp-errlog
 sync #110727 running drake pup 0.3 with k2.6.39-3 new laptop, mysterious loss of dirs/files. try sync.
 if [ -s /tmp/3builddistro-cp-errlog ];then #130430 next line fixes those quote chars... 150929 weird, tr creating multiple ' chars...
  #cat /tmp/3builddistro-cp-errlog | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | tr -s "'" | cut -f 2 -d "'" |
  while read ONEDIRSYMLINK
  do
   xONEDIRSYMLINK="`echo -n "$ONEDIRSYMLINK" | sed -e 's%sandbox3/rootfs-complete%%'`"
   #adding that extra trailing / does the trick...
   cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}${xONEDIRSYMLINK}/* sandbox3/rootfs-complete${xONEDIRSYMLINK}/ 2> /tmp/3builddistro-cp-errlog2
   #170418 installing some april pkgs into yocto morty, there are two levels of symlinks, /usr/X11R7/lib64...
   if [ -s /tmp/3builddistro-cp-errlog2 ];then
    cat /tmp/3builddistro-cp-errlog2 | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | tr -s "'" | cut -f 2 -d "'" |
    while read ONEDIRSYMLINK2
    do
     xONEDIRSYMLINK2="`echo -n "$ONEDIRSYMLINK2" | sed -e 's%sandbox3/rootfs-complete%%'`"
     #adding that extra trailing / does the trick...
     cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}${xONEDIRSYMLINK2}/* sandbox3/rootfs-complete${xONEDIRSYMLINK2}/
    done
    sync
   fi
  done<<_END1
$(cat /tmp/3builddistro-cp-errlog | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | tr -s "'" | cut -f 2 -d "'")
_END1
 fi
 #...now seems ok. note, there are two places in woof v003 where this problem occurs: /usr/lib/seamonkey
 # and /usr/share/cups/model.
 
 if [ -f sandbox3/rootfs-complete/pinstall.sh ];then
  #note, do not filter #! /bin/sh (with a space)...
  grep  -E -v '^\#\!\/bin\/sh' sandbox3/rootfs-complete/pinstall.sh >> sandbox3/pinstall.sh
  rm -f sandbox3/rootfs-complete/pinstall.sh
 fi
 #get rid of a .specs file...
 rm -f sandbox3/rootfs-complete/*.specs
 #window and menu icons can also be in the top-level directory of the package...
 mv sandbox3/rootfs-complete/*24.xpm sandbox3/rootfs-complete/usr/local/lib/X11/pixmaps/ 2>/dev/null
 mv sandbox3/rootfs-complete/*32.xpm sandbox3/rootfs-complete/usr/local/lib/X11/pixmaps/ 2>/dev/null
 mv sandbox3/rootfs-complete/*32.png sandbox3/rootfs-complete/usr/local/lib/X11/pixmaps/ 2>/dev/null
 mv sandbox3/rootfs-complete/*48.xpm sandbox3/rootfs-complete/usr/local/lib/X11/pixmaps/ 2>/dev/null
 mv sandbox3/rootfs-complete/*48.png sandbox3/rootfs-complete/usr/local/lib/X11/pixmaps/ 2>/dev/null
 mv sandbox3/rootfs-complete/*.xpm sandbox3/rootfs-complete/usr/local/lib/X11/mini-icons/ 2>/dev/null
 mv sandbox3/rootfs-complete/*.png sandbox3/rootfs-complete/usr/local/lib/X11/mini-icons/ 2>/dev/null

 #150728 .deb may have preinst and postinst scripts...
 if [ "$WOOF_HOSTARCH" == "$WOOF_TARGETARCH" ];then
  #only execute them if pkglist sorted into dependency-order, ie this file exists...
  if [ -f status/findpkgs_GENERIC_NAMES-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then #150714
   FNDDEBIAN="$(find sandbox3/rootfs-complete -maxdepth 1 -type d -name 'DEBIAN*' | tr '\n' ' ')"
   for ADEBIAN in $FNDDEBIAN
   do
    echo -n 'p'
    baseDEBIAN="$(basename $ADEBIAN)"
    if [ -x sandbox3/rootfs-complete/${baseDEBIAN}/postinst ];then
     echo >> deb-postinst-log
     REALPKGNAME="$(echo -n "$baseDEBIAN" | sed -e 's%^DEBIAN%%')"
     echo "${ONEPKG} ${REALPKGNAME}" >> deb-postinst-log
     chroot sandbox3/rootfs-complete /${baseDEBIAN}/postinst configure >> deb-postinst-log 2>&1
    fi
    rm -rf sandbox3/rootfs-complete/${baseDEBIAN}
   done
  fi
 #else
 # rm -rf sandbox3/rootfs-complete/DEBIAN* 2> /dev/null
 fi
 rm -rf sandbox3/rootfs-complete/DEBIAN* 2> /dev/null #161005

done
echo
[ -s deb-postinst-log ] && echo "...'deb-postinst-log' has log of executing postinst scripts"
echo

#110923 fix busybox applets...
if [ -d packages-${DISTRO_FILE_PREFIX}/busybox ];then #141123 buildroot build has busybox inside 0buildroot. refer FIXUPHACK in 0buildroot template.
 #160921 took 'strings' out of this list, as want the busybox strings...
 DEVXUTILS=' config ar ar86 as as86 audiofile-config autoconf autoheader autom4te automake autopoint autoreconf autoscan autoupdate bacon bacongui bcc bison c2ph catchsegv cc ccmake chem cmake combinediff config_data corelist cpack cpan cpan2dist cpanp cpanp-run-perl cpp ctest cups-config curl-config cvs cvsbug db_archive db_checkpoint db_deadlock db_dump db_hotbackup db_load db_printlog db_recover db_stat db_upgrade db_verify dehtmldiff diet dnsd dprofpp dvdnav-config dvdread-config editdiff elftrunc enc2xs envsubst eqn eqn2graph espdiff filterdiff find2perl fixcvsdiff flex flipdiff freetype-config gccbug gcov gdb gdbserver gdbtui gdiffmk gencat getconf getent gettext gettext.sh gettextize gfortran git git-cvsserver git-receive-pack git-shell git-upload-archive git-upload-pack gitk glade-3 gmake gnome-menu-spec-test gperf gphoto2-config gphoto2-port-config gprof grap2graph grepdiff grn grodvi groff groffer grog grolbp grolj4 grops grotty h2ph h2xs hpftodit iconv idle ifnames indxbib info infokey install-info instmodsh interdiff intltool-extract intltool-merge intltool-prepare intltool-update intltoolize ld ld86 ldd lddlibc4 lex lib-i386 libart2-config libnetcfg libpng-config libpng12-config libtool libtoolize libusb-config lkbib locale localedef lookbib lsdiff m4 make makeinfo man man1 man2dvi man2html mmroff msgattrib msgcat msgcmp msgcomm msgconv msgen msgexec msgfilter msgfmt msggrep msginit msgmerge msgunfmt msguniq mtrace nasm ndisasm neon-config neqn netpbm-config ngettext nm nm86 nroff objcopy objdump objdump86 onsgmls osgmlnorm ospam ospcat ospent osx patch pcap-config pcprofiledump pcre-config pdfroff pdftexi2dvi perl perlbug perldoc perlivp perlthanks pfbtops pic pic2graph piconv pkg-config pl2pm pod2html pod2latex pod2man pod2text pod2usage podchecker podselect post-grohtml pre-grohtml preconv prove psed pstruct ptar ptardiff pydoc ranlib rcs2log readelf recode-sr-latin recountdiff rediff refer rman roff2dvi roff2html roff2pdf roff2ps roff2text roff2x rpcgen s2p sane-config scrollkeeper-config scrollkeeper-extract scrollkeeper-gen-seriesid scrollkeeper-get-cl scrollkeeper-get-content-list scrollkeeper-get-extended-content-list scrollkeeper-get-index-from-docpath scrollkeeper-get-toc-from-docpath scrollkeeper-get-toc-from-id scrollkeeper-install scrollkeeper-preinstall scrollkeeper-rebuilddb scrollkeeper-uninstall scrollkeeper-update shasum size size86 soelim splain splitdiff sprof strace strace-graph strip svn svnadmin svndumpfilter svnlook svnserve svnsync svnversion sysprof sysprof-cli tbl texi2dvi texi2pdf texindex tfmtodit troff tzselect unwrapdiff update-mime-database vsyasm whatis xgettext xml2-config xslt-config xsubpp xtrace yacc yasm ytasm zsoelim iconvconfig makewhatis nscd rpcinfo visudo zic ' #11104 111204 remove zdump.
 cp -a -f packages-${DISTRO_FILE_PREFIX}/busybox/bin/busybox ./sandbox3/rootfs-complete/bin/
 osPTN="s%packages-${DISTRO_FILE_PREFIX}/busybox%%"
 for ONEAPPLET in `find packages-${DISTRO_FILE_PREFIX}/busybox -type l | tr '\n' ' '`
 do
  ONESPEC="`echo -n "$ONEAPPLET" | sed -e "$osPTN"`"
  ONEPATH="`dirname $ONESPEC`"
  ONENAME="`basename $ONESPEC`"
  FNDFULL="`find ./sandbox3/rootfs-complete/bin ./sandbox3/rootfs-complete/sbin ./sandbox3/rootfs-complete/usr/bin ./sandbox3/rootfs-complete/usr/sbin -name ${ONENAME}`"
  #130129 deb 'bsdmainutils' has broken 'cal' and 'hd' symlinks... 130204 01micko: fix for spaces in names...
  if [ "$FNDFULL" ];then
   if [ -h "$FNDFULL" ];then
    FULLPATH="$(dirname "$FNDFULL")"
    FULLLINK="$(readlink "$FNDFULL")"
    xFULLLINK="${FULLPATH}/${FULLLINK}"
    [ "`echo -n "$FULLLINK" | cut -c 1`" = "/" ] && xFULLLINK="sandbox3/rootfs-complete${FULLLINK}"
    if [ ! -e "${xFULLLINK}" ];then
     rm -f "$FNDFULL" #130130
     FNDFULL=""
    fi
   fi
  fi
  #111004 need to check in devx also...
  if [ ! "$FNDFULL" ];then
   if [ "$ONENAME" != "[" ];then
    if [ "$ONENAME" != "[[" ];then
     oaPTN=" ${ONENAME} "
     FNDFULL="`echo -n "$DEVXUTILS" | grep "$oaPTN"`"
    fi
   fi
  fi
  if [ "$FNDFULL" ];then
   cp -a -f $ONEAPPLET ./sandbox3/rootfs-complete${ONEPATH}/${ONENAME}-BB-NOTUSED
  else
   cp -a -f $ONEAPPLET ./sandbox3/rootfs-complete${ONEPATH}/
  fi
 done
 [ -f packages-${DISTRO_FILE_PREFIX}/busybox/pinstall.sh ] && cat packages-${DISTRO_FILE_PREFIX}/busybox/pinstall.sh >> sandbox3/pinstall.sh
fi

echo 'echo "END OF pinstall.sh SCRIPT."' >> sandbox3/pinstall.sh
chmod 755 sandbox3/pinstall.sh

#run post-install script...
echo
echo "Executing sandbox3/pinstall.sh post-install script..."
cd $WKGDIR/sandbox3/rootfs-complete
SAVEWKGDIR="$WKGDIR"
$WKGDIR/sandbox3/pinstall.sh
echo "If you did not get 'End of pinstall.sh' message above, then"
echo -n "it aborted before completion. Press ENTER or CTRL-C: "
read isitbad
WKGDIR="$SAVEWKGDIR"
cd $WKGDIR

#100316 script to handle improper shutdown, full hd install...
if [ -f sandbox3/rootfs-complete/sbin/initNEW ];then
 rm -f sandbox3/rootfs-complete/sbin/init #a busybox link.
 mv -f sandbox3/rootfs-complete/sbin/initNEW sandbox3/rootfs-complete/sbin/init
fi

if [ "$DISTRO_KERNEL_PET" == "" ];then #160824
 cd sandbox3 #160824
else
 #now do the kernel...
 echo
 echo "Now installing the kernel into build/ and modules into rootfs-complete/..."
 rm -f sandbox3/$KERNELPKG
 KERNPKGNAMEONLY="`basename $KERNELPKG .pet`"
 rm -rf sandbox3/$KERNPKGNAMEONLY
 cp packages-pet/${KERNELPKG} sandbox3/
 cd sandbox3
 pet2tgz $KERNELPKG
 tar -zxf $KERNPKGNAMEONLY.tar.gz
 cp -a --remove-destination $KERNPKGNAMEONLY/* rootfs-complete/
 #100603 i'm now putting common kernel files in here...
 cp -a -f ../kernel-skeleton/* rootfs-complete/
 #110918 kernel-skeleton now has a pinstall.sh script...
 cd rootfs-complete
 ./pinstall.sh
 sync
 rm -f ./pinstall.sh
 cd ..
 mv -f rootfs-complete/etc/modules/firmware.dep rootfs-complete/etc/modules/firmware.dep.${KERNELVER}
fi #160824

sync
rm -rf build
mkdir build
#120613 kernel image can have different names. rename to vmlinuz, however change back later if build sd card...
REALKERNAME='vmlinuz'
[ -f rootfs-complete/boot/vmlinuz ] && cp rootfs-complete/boot/vmlinuz build/
if [ -f rootfs-complete/boot/uImage ];then #mele a1000
 cp rootfs-complete/boot/uImage build/vmlinuz #120506 arm builds, using different name for kernel.
 REALKERNAME='uImage'
fi
if [ -f rootfs-complete/boot/kernel.img ];then #raspberry pi
 cp rootfs-complete/boot/kernel.img build/vmlinuz
 REALKERNAME='kernel.img'
fi
[ -f rootfs-complete/boot/System.map ] && cp rootfs-complete/boot/System.map ./
sync

if [ ! -f rootfs-complete/boot/zImage ];then  #160929 now need keep this in /boot for sd image builds.
 rm -rf rootfs-complete/boot
fi

if [ "$DISTRO_KERNEL_PET" != "" ];then #160824 ###########
 #110722 need this, to put into woof-installed-packages...
 KERNEL_DB_ENTRY="`cat rootfs-complete/pet.specs`"
fi #160824 #############
rm -f rootfs-complete/pet.specs

#arch .INSTALL files
#130316 NOTE: maybe could do this without chroot, as for slackware in 2createpackages (see 2createpackages-hack-install.sh).
# ok, I have looked through all pkgs used in build, most .INSTALL are trivial. these are slight exceptions: 
#  cmake glibc_dev_DEV libglade2 libwmf man_DEV openldap perl_DEV subversion_DEV
# but, don't really need to execute those either. besides, the code below is only operating upon rootfs-complete, it would be better
# to aufs mount the devx, as is done in sandbox2b in 2createpackages. comment out all of below...
if [ "${DISTRO_BINARY_COMPAT}" = "arch" ]; then
 rm -f rootfs-complete/.INSTALL*
# numberOfDotInstall=1
# for FOLDER in `ls -1 ${WKGDIR}/packages-${DISTRO_FILE_PREFIX} | tr '\n' ' '` #130307
# do
#  [ ! -f ${WKGDIR}/packages-${DISTRO_FILE_PREFIX}/${FOLDER}/.INSTALL ] && continue
#  PKGVER="`grep -e '^pkgver' "${WKGDIR}/packages-${DISTRO_FILE_PREFIX}/${FOLDER}/.PKGINFO" | sed 's/^pkgver\ =\ //' | sed 's/-[^-]//'`"
#  cp ${WKGDIR}/packages-${DISTRO_FILE_PREFIX}/${FOLDER}/.INSTALL "rootfs-complete/.INSTALL${numberOfDotInstall}-${PKGVER}"
#  let numberOfDotInstall++
# done
# if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #130316
#  cp ${WKGDIR}/support/arch/runDotInstalls rootfs-complete/
#  chroot "${PWD}/rootfs-complete" "/runDotInstalls" &> /dev/null
#  rm -f rootfs-complete/runDotInstalls
# else
#  echo "Unfortunately, cannot execute Arch install scripts, as this is a cross-build."
# fi
# rm -f rootfs-complete/.INSTALL*
fi
#130314 want to run arch post-install script from ppm also...
mkdir -p rootfs-complete/usr/local/petget
cp ${WKGDIR}/support/arch/runDotInstalls rootfs-complete/usr/local/petget/ArchRunDotInstalls
chmod 755 rootfs-complete/usr/local/petget/ArchRunDotInstalls

if [ "$BUILD_CHOICE_TRUE_SCSI_KERNEL_DRIVERS" = "" ];then #150122
 #w462 true-scsi drives
 echo
 echo "Would you like the distro to be able to recognise and even boot from"
 echo "old true-SCSI hard drives and CD drives?"
 echo "Most likely you would just press the ENTER key only to decline, as the"
 echo "vast majority of PCs do not have true-SCSI hardware. However, 10-20 years"
 echo "ago it was popular in network server computers."
 echo "Note, really old pre-PCI computers will not be supported at all."
 echo -n "Enter only to decline, any other key to keep SCSI drivers: "
 read wantscsi
 BUILD_CHOICE_TRUE_SCSI_KERNEL_DRIVERS="delete"
 [ "$wantscsi" != "" ] && BUILD_CHOICE_TRUE_SCSI_KERNEL_DRIVERS="keep" 
fi

if [ "$DISTRO_KERNEL_PET" != "" ];then #160824 #############
 #130613 kmod depmod wants these two... they are moved in later, but do it here also...
 mkdir -p rootfs-complete/lib/modules/$KERNELVER
 [ -f rootfs-complete/etc/modules/modules.builtin ] && cp -a -f rootfs-complete/etc/modules/modules.builtin rootfs-complete/lib/modules/$KERNELVER/
 [ -f rootfs-complete/etc/modules/modules.order ] && cp -a -f rootfs-complete/etc/modules/modules.order rootfs-complete/lib/modules/$KERNELVER/
 
 #110712 modinfo won't work if modules.* files missing...
 #130418 if kmod, do not use busybox depmod...
 USINGKMOD='no'
 [ "`grep '^kmod' ../woof-installed-packages`" != "" ] && USINGKMOD='yes'
 [ "$DISTRO_BINARY_COMPAT" == "buildroot" ] && USINGKMOD='yes' #141118
 if [ "$USINGKMOD" = "no" ];then
  cp -f ../boot/depmod ./
  if [ ! -f rootfs-complete/lib/modules/$KERNELVER/modules.dep ];then
   busybox depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  fi
 else
  cp -f ../boot/kmod ./
  ln -snf kmod depmod
  if [ ! -f rootfs-complete/lib/modules/$KERNELVER/modules.dep ];then
   ./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  fi
 fi
 
 if [ "$CHOICE_BIGMODEM" != "Erase_big_modems" ];then #v431
 # INTELMODEMMOD="`find rootfs-complete/lib/modules/${KERNELVER} -type f -iname intel5*ko*`"
  INTELMODEMMOD="`find rootfs-complete/lib/modules/${KERNELVER} -type f -iname 'intel5*ko' -o -iname 'intel5*HIDE'`" #101222
  if [ "$INTELMODEMMOD" != "" ];then
   echo
   if [ "$CHOICE_BIGMODEM" ];then
    echo "You already selected what to do with the \"big modems\", however, this"
    echo "question is specifically about the Intel 536 and 537 analog modems, that"
    echo "are enormous and you might want to delete them, independently of the"
    echo "choice already made for the big modems."
   else
    echo "The next question will ask what to do with the \"big modems\", however, this"
    echo "question is specifically about the Intel 536 and 537 analog modems, that"
    echo "are enormous and you might want to delete them, independently of the"
    echo "choise that will be made next for the big modems."
   fi
   echo
   echo "Would you like to remove the Intel 536 and 537 analog modem modules?"
   echo "These are an enormous waste of space (1MB - 18MB uncompressed) if you"
   echo "don't have one of those particular old modem dialup cards."
   echo -n "Press ENTER only to delete them: "
   read DELINTEL
   if [ "$DELINTEL" = "" ];then
    for ONEMODEM in $INTELMODEMMOD
    do
     echo "Removing $ONEMODEM"
     rm -f $ONEMODEM
    done
   fi
  fi
 fi
 
 #140119 erase-big-modems code removed.
 
 if [ "$BUILD_CHOICE_FB_KERNEL_DRIVERS" = "" ];then
  #w481 remove framebuffer modules...
  echo
  echo "The kernel is configured with the vesafb driver builtin, which is usually enough"
  echo "if it is ever required to boot in framebuffer video mode. The other framebuffer"
  echo "modules take up about 1.4MB uncompressed and are not normally required."
  echo -n "Press ENTER only to delete the other framebuffer modules: "
  read DELFBM
  BUILD_CHOICE_FB_KERNEL_DRIVERS="keep"
  [ "$DELFBM" = "" ] && BUILD_CHOICE_FB_KERNEL_DRIVERS="delete"
 fi
 
 if [ "$BUILD_CHOICE_FB_KERNEL_DRIVERS" == "delete" ];then
  #130430 gpu/drm/sis.ko needs sisfb.ko, must keep...
  echo
  echo "Deleting framebuffer modules..."
  find rootfs-complete/lib/modules/$KERNELVER/kernel/drivers/video -type f -name '*fb.ko' -o -name '*fb_*.ko' |
  while read ONEMODULE
  do
   ONEBASE="`basename $ONEMODULE`"
   [ "$ONEBASE" = "sisfb.ko" ] && continue #130430
   #160323 drivers/video.fbdev/core has fb_sys_ops.ko (needed by i915.ko) and fb_ddc.ko -- must keep...
   [ "${ONEBASE:0:2}" == "fb" ] && continue #160323
   echo -n "$ONEBASE "
   rm -f $ONEMODULE
  done
  echo
 fi
 
 if [ "$BUILD_CHOICE_EXOTIC_KERNEL_DRIVERS" = "" ];then
  echo
  echo "A bit later in the script you will be asked if you would like to cut the modules"
  echo "right down to a fairly basic selection. However, for now you can choose a minor"
  echo "cutdown of some 'exotic' modules that are unlikely to be needed."
  echo "Press any printable character to to remove 'exotic' modules, or"
  echo -n "press ENTER only to keep them: "
  read keepexotic
  BUILD_CHOICE_EXOTIC_KERNEL_DRIVERS="delete"
  [ "$keepexotic" = "" ] && BUILD_CHOICE_EXOTIC_KERNEL_DRIVERS="keep"
 fi
 
 if [ "$BUILD_CHOICE_EXOTIC_KERNEL_DRIVERS" == "delete" ];then
  echo
  echo "Deleting exotic modules..."
  #v423 nfs.ko needs sunrpc.ko and lockd.ko... nfsd.ko needs exportfs.ko...
  #v423 someone is working on autofs, so bring that back too...
  #EXOTICFS=' fs/autofs fs/autofs4 fs/befs fs/bfs fs/coda fs/cramfs fs/exportfs fs/freevxfs fs/jffs2 fs/jfs fs/lockd fs/ncpfs fs/romfs fs/sysv '
  #EXOTICNET=' net/appletalk net/ipv6 net/ipx net/llc net/sunrpc net/wanrouter '
  EXOTICFS=' fs/befs fs/bfs fs/coda fs/cramfs fs/freevxfs fs/jffs2 fs/jfs fs/ncpfs fs/romfs fs/sysv '
  EXOTICNET=' net/appletalk net/ipv6 net/ipx net/llc net/wanrouter '
  EXOTICDRIVERS=' drivers/block/paride drivers/block/aoe drivers/mtd drivers/telephony '
  for ONEDIR in $EXOTICFS $EXOTICNET $EXOTICDRIVERS
  do
   if [ -d rootfs-complete/lib/modules/$KERNELVER/kernel/$ONEDIR ];then
    echo -n "$ONEDIR "
    rm -rf rootfs-complete/lib/modules/$KERNELVER/kernel/$ONEDIR
   fi
  done
  sync
  echo
 fi
 
 if [ "$BUILD_CHOICE_TRUE_SCSI_KERNEL_DRIVERS" == "delete" ];then #150122
  #get rid of scsi modules except some essentials...
  rm -rf /tmp/scsi-keep
  mkdir /tmp/scsi-keep
  for ONEKEEP in imm.ko ppa.ko raid_class.ko sg.ko scsi_wait_scan.ko
  do
   ONEFND="`find rootfs-complete/lib/modules/$KERNELVER/kernel/drivers/scsi -type f -name $ONEKEEP`"
   [ "$ONEFND" ] && cp -a $ONEFND /tmp/scsi-keep/
  done
  rm -rf rootfs-complete/lib/modules/$KERNELVER/kernel/drivers/scsi
  cp -a /tmp/scsi-keep rootfs-complete/lib/modules/$KERNELVER/kernel/drivers/scsi
 fi
 
 #w091029 use busybox depmod, creates smaller modules* files...
 if [ "$USINGKMOD" = "no" ];then #130418
  cp -f ../boot/depmod ./
  #./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  busybox depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
 else
  cp -f ../boot/depmod ./depmod.veryold
  cp -f ../boot/kmod ./kmod
  ln -snf kmod depmod
  ./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
 fi
 sync
fi #160824 ##########

#170625 set KERNELVER
if [ "$KERNELVER" == "" ];then
 KERNELVER="$(find rootfs-complete/lib/modules -mindepth 1 -maxdepth 1 -type d | head -n 1 | rev | cut -f 1 -d '/' | rev)"
fi
#170624 oe pyro, no kernel pet, using kernel built in oe...
if [ ! -e depmod ];then
 cp -f ../boot/kmod ./
 ln -snf kmod depmod
 if [ "$KERNELVER" ];then #170625
  if [ ! -f rootfs-complete/lib/modules/$KERNELVER/modules.dep ];then
   ./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  fi
 fi
fi

#101027 Iguleder reported DISTRO_SPECS did not have a carriage-return on last line...
xDISTROSPECS="`cat rootfs-complete/etc/DISTRO_SPECS`"
echo "$xDISTROSPECS" > rootfs-complete/etc/DISTRO_SPECS


#120225 this is read by /usr/share/doc/convert-raw-docs...
DISTRO_PUPPYDATE="`date | tr -s " " | cut -f 2,6 -d " "`"
echo "DISTRO_PUPPYDATE='${DISTRO_PUPPYDATE}'" >> rootfs-complete/etc/DISTRO_SPECS

#120216 set default LANG and KMAP... 120401 improve...
echo
if [ "$BUILD_CHOICE_LANG" != "" ];then #150726
 DEFAULTLANG="$BUILD_CHOICE_LANG"
else
 echo
 echo "Puppy is built with a default locale LANG=en_US and keyboard layout KMAP=us,
which may be changed after bootup.
However, if you are building a language-specific Puppy, you may change the
defaults now. But, please do make sure that your Puppy has a 'langpack' PET
for your language installed -- if one does not exist, then you will have to
create one -- see MoManager in the Utility menu, also read the Menu -> Help
-> HOWTO Internationalization."
 echo
 echo "These are the available LANG values (in /usr/share/i18n/locales):
aa_DJ aa_ER aa_ER@saaho aa_ET af_ZA am_ET an_ES ar_AE ar_BH ar_DZ ar_EG ar_IN ar_IQ ar_JO ar_KW ar_LB ar_LY ar_MA ar_OM ar_QA ar_SA ar_SD ar_SY ar_TN ar_YE as_IN ast_ES az_AZ be_BY be_BY@latin ber_DZ ber_MA bg_BG bn_BD bn_IN br_FR br_FR@euro bs_BA byn_ER ca_AD ca_ES ca_ES@euro ca_FR ca_IT crh_UA csb_PL cs_CZ cy_GB da_DK de_AT de_AT@euro de_BE de_BE@euro de_CH de_DE de_DE@euro de_LU de_LU@euro dz_BT el_CY el_GR el_GR@euro en_AU en_BW en_CA en_DK en_GB en_HK en_IE en_IE@euro en_IN en_NG en_NZ en_PH en_SG en_US en_ZA en_ZW es_AR es_BO es_CL es_CO es_CR es_DO es_EC es_ES es_ES@euro es_GT es_HN es_MX es_NI es_PA es_PE es_PR es_PY es_SV es_US es_UY es_VE et_EE eu_ES eu_ES@euro fa_IR fi_FI fi_FI@euro fil_PH fo_FO fr_BE fr_BE@euro fr_CA fr_CH fr_FR fr_FR@euro fr_LU fr_LU@euro fur_IT fy_DE fy_NL ga_IE ga_IE@euro gd_GB gez_ER gez_ER@abegede gez_ET gez_ET@abegede gl_ES gl_ES@euro gu_IN gv_GB ha_NG he_IL hi_IN hr_HR hsb_DE hu_HU hy_AM id_ID ig_NG ik_CA is_IS it_CH it_IT it_IT@euro iu_CA iw_IL ja_JP ka_GE kk_KZ kl_GL km_KH kn_IN ko_KR ks_IN ku_TR kw_GB ky_KG lg_UG li_BE li_NL lo_LA lt_LT lv_LV mai_IN mg_MG mi_NZ mk_MK ml_IN mn_MN mr_IN ms_MY mt_MT nb_NO nds_DE nds_NL ne_NP nl_BE nl_BE@euro nl_NL nl_NL@euro nn_NO nr_ZA nso_ZA oc_FR om_ET om_KE or_IN pa_IN pap_AN pa_PK pl_PL pt_BR pt_PT pt_PT@euro ro_RO ru_RU ru_UA rw_RW sa_IN sc_IT se_NO shs_CA sid_ET si_LK sk_SK sl_SI so_DJ so_ET so_KE so_SO sq_AL sr_ME sr_RS sr_RS@latin ss_ZA st_ZA sv_FI sv_FI@euro sv_SE ta_IN te_IN tg_TJ th_TH ti_ER ti_ET tig_ER tk_TM tl_PH tn_ZA tr_CY tr_TR ts_ZA tt_RU tt_RU@iqtelif ug_CN uk_UA ur_PK uz_UZ uz_UZ@cyrillic ve_ZA vi_VN wa_BE wa_BE@euro wal_ET wo_SN xh_ZA yi_US yo_NG zh_CN zh_HK zh_SG zh_TW zu_ZA"
 echo "ENTER only for default, else type one of the above. Usually, you would want UTF-8 enabled, so append that. ex: de_DE.UTF-8."
 echo "(the default is en_US.UTF-8)"
 echo -n "ENTER only for default, or type it now: "
 read DEFAULTLANG
fi
if [ "$DEFAULTLANG" ];then
 echo "...ok, set to ${DEFAULTLANG}"
 DEFAULTLANG1="${DEFAULTLANG%_*}"
 if [ "$DEFAULTLANG1" != "en" ];then
  echo
  echo "These are the available keyboard layout values (in /lib/keymaps):
azerty be-latin1 br-abnt2 br-abnt br-latin1-abnt2 br-latin1-us by cf croat cz de de-latin1 dk dvorak dvorak-l dvorak-r es et fi fr gr hu101 hu il it jp106 lt mk nl no pl pt-latin1 ro ru se sg sk-qwerty sk-qwertz slovene sv-latin1 uk us wangbe"
  echo "You don't have to choose a default, as Puppy will try and guess at bootup. Whatever, after bootup the user will have the opportunity to change it, in the QuickSetup window."
  echo -n "Enter only for 'us', else type one of the above: "
  read DEFAULTKMAP
  [ "$DEFAULTKMAP" = "" ] && DEFAULTKMAP="us"
  echo "...ok, set to ${DEFAULTKMAP}"
 fi
else
 DEFAULTLANG="en_US.UTF-8" #121123
 echo "...ok, set to ${DEFAULTLANG}"
fi
#i think also, set LANG in /etc/profile...
sed -i -e "s%^LANG=.*%LANG=${DEFAULTLANG}%" rootfs-complete/etc/profile
echo

DEVTMPFSFLG=0
if [ "$DISTRO_KERNEL_PET" != "" ];then #160824 #############
 #130618 check udev version... 130710 01micko: fix...
 #130612 if kernel has CONFIG_DEVTMPFS=y (and CONFIG_DEVTMPFS_MOUNT=y) then empty /dev...
 if [ "`grep 'CONFIG_DEVTMPFS.*=y' rootfs-complete/etc/modules/DOTconfig*`" != "" ];then
  UDEV3=`grep -E '^[e]*udev[_-][0-9]' ../woof-installed-packages | cut -f 3 -d '|' | cut -c 1-3 | head -n 1` #141206
  [ ! $UDEV3 ] && UDEV3=200 #eudev
  [ "$(echo -n "$UDEV3"| grep -F '.')" != "" ] && UDEV3=200 #141206 eudev may actually be named udev, and has 1.x version.
  if [ $UDEV3 -ge 176 ];then #175 is last version that creates device nodes.
   DEVTMPFSFLG=2 #see further down.
  fi
 fi
fi #160824 ###############
sync

if [ "$DISTRO_KERNEL_PET" != "" ];then #160824 #############
 #offer to cutdown the modules, to build a smaller live-cd...
 rm -rf zdrv 2>/dev/null #note, current dir is in sandbox3.
 rm -f ${ZDRVPET} #100911 zdrv.sfs
 
 if [ "$BUILD_CHOICE_RADICAL_KERNEL_DRIVERS" = "" ];then
  echo
  echo -n "Press any char for radical cutdown of modules, or ENTER only to retain all: "
  read cutthemdown
  BUILD_CHOICE_RADICAL_KERNEL_DRIVERS="delete"
  [ "$cutthemdown" = "" ] && BUILD_CHOICE_RADICAL_KERNEL_DRIVERS="keep"
 fi
 
 if [ "$BUILD_CHOICE_RADICAL_KERNEL_DRIVERS" == "delete" ];then
  if [ "$USINGKMOD" = "no" ];then #130418
   busybox depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  else
   ./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  fi
  cd rootfs-complete/lib/modules/$KERNELVER #makes it easier to handle find results.
  #create a list of essential modules...
  echo "Creating must-have lists..."
  SOUNDMODS="`find ./kernel/sound/ -type f | sed -e 's/^\.\///g'`" #want all the alsa sound mods.
  IPV4MODS="`find ./kernel/net/ipv4 -type f | sed -e 's/^\.\///g'`" #want all the firewall mods.
  NETFILTERMODS="`find ./kernel/net/netfilter -type f | sed -e 's/^\.\///g'`"
  #IEEE80211MODS="`find ./kernel/net/ieee80211 -type f | sed -e 's/^\.\///g'`" #want all the ieee80211 mods.
  IEEE80211MODS="`find ./kernel/net/wireless -type f | sed -e 's/^\.\///g'`" #want all the wireless 80211 mods.
  RFKILLMODS="`find ./kernel/net/rfkill -type f | sed -e 's/^\.\///g'`"
  MAC80211MODS="`find ./kernel/net/mac80211 -type f | sed -e 's/^\.\///g'`"
  WIMAXMODS="`find ./kernel/net/wimax -type f | sed -e 's/^\.\///g'`"
  NETWORKMODS="`find ./kernel/drivers/net -type f | grep -vE '/wan/|/appletalk/' | sed -e 's/^\.\///g'`" #want all the network interface drivers.
  UBUNTUMODS=""
  [ -d ./kernel/ubuntu ] && UBUNTUMODS="`find ./kernel/ubuntu -type f | grep -vE '/compcache/|/gnbd/|/heci/|/lirc/' | sed -e 's/^\.\///g'`"
  MMCMODS="`find ./kernel/drivers/mmc -type f | sed -e 's/^\.\///g'`" #include mmc/sd host drivers.
  MEMSTICKMODS="`find ./kernel/drivers/memstick -type f | sed -e 's/^\.\///g'`"
  MISCMODS="`find ./kernel/drivers/misc -type f | sed -e 's/^\.\///g'`"
  USBMODS="`find ./kernel/drivers/usb -type f | sed -e 's/^\.\///g'`"
  ACPIMODS="`find ./kernel/drivers/acpi -type f | sed -e 's/^\.\///g'`"
  AGPMODS="`find ./kernel/drivers/char/agp -type f | sed -e 's/^\.\///g'`"
  I2CMODS="`find ./kernel/drivers/i2c -type f | sed -e 's/^\.\///g'`"
  PLATFORMMODS="`find ./kernel/drivers/platform -type f | sed -e 's/^\.\///g'`"
  BLUETOOTHMODS="`find ./kernel/drivers/bluetooth -type f | sed -e 's/^\.\///g'`"
  #w475 k2.6.29.3 has these usb webcam drivers...
  GSPCAMODS=""
  [ -d ./kernel/drivers/media/video/gspca ] && GSPCAMODS="`find ./kernel/drivers/media/video/gspca -type f | sed -e 's/^\.\///g'`"
  #k2.6.25.16: kernel/drivers/char/drm, k2.6.27.4: kernel/drivers/gpu/drm...
  DRMMODS="`find ./kernel/drivers -type f | grep '/drm/' | sed -e 's/^\.\///g'`"
  USBMODEMLIST="cdc-acm.ko pl2303.ko nozomi.ko hso.ko option.ko sierra.ko"
  ANALOGMODEMLIST="mwave.ko martian_dev.ko pctel.ko ltserial.ko slamr.ko slusb.ko esscom.ko"
  CPUSCALING2MODS="`find ./kernel/drivers/cpufreq -type f | sed -e 's/^\.\///g'`" #100127
  CPUSCALINGMODS="`find ./kernel/arch/x86/kernel/cpu/cpufreq -type f | sed -e 's/^\.\///g'`" #v431
  CRYPTOMODS="`find ./kernel/crypto -type f | sed -e 's/^\.\///g'`" #100126
  FBCONMODS="`find ./kernel/drivers/video/console -type f | sed -e 's/^\.\///g'`" #110518
  #create a list of extra modules... w476 added nls_cp850.ko nls_cp852.ko...
  EXTRALIST="blkcipher.ko cbc.ko apm.ko cdrom.ko mwave.ko synclink_cs.ko serial_cs.ko lp.ko n_hdlc.ko nvram.ko sonypi.ko generic_serial.ko agpgart.ko ali-agp.ko amd-k7-agp.ko amd64-agp.ko ati-agp.ko intel-agp.ko nvidia-agp.ko sis-agp.ko sworks-agp.ko via-agp.ko blowfish.ko aes.ko arc4.ko crc32c.ko deflate.ko des.ko md5.ko sha1.ko cramfs.ko ext3.ko fat.ko fuse.ko isofs.ko jbd.ko lockd.ko minix.ko msdos.ko nfs.ko nls_cp437.ko nls_cp850.ko nls_cp852.ko nls_iso8859-1.ko nls_iso8859-13.ko nls_iso8859-14.ko nls_iso8859-15.ko nls_iso8859-2.ko nls_iso8859-3.ko nls_iso8859-4.ko nls_iso8859-5.ko nls_iso8859-6.ko nls_iso8859-7.ko nls_iso8859-8.ko nls_iso8859-9.ko nls_utf8.ko ntfs.ko reiserfs.ko smbfs.ko squashfs.ko udf.ko unionfs.ko vfat.ko i2c-core.ko i2c-algo-bit.ko ide-cs.ko ide-tape.ko ide-cd.ko ide-floppy.ko gameport.ko analog.ko pcigame.ko pcspkr.ko psmouse.ko sermouse.ko serport.ko serio.ko evdev.ko joydev.ko input.ko keybdev.ko mousedev.ko crc32.ko crc-ccitt.ko libcrc32c.ko zlib_deflate.ko firmware_class.ko parport_pc.ko parport_serial.ko parport.ko parport_cs.ko i82365.ko pd6729.ko tcic.ko yenta_socket.ko i82092.ko rsrc_nonstatic.ko pcmcia_core.ko ds.ko imm.ko scsi_mod.ko scsi_transport_spi.ko sd_mod.ko sg.ko sr_mod.ko ide-scsi.ko scsi_debug.ko scsi_transport_fc.ko cdc-acm.ko usb-midi.ko usblp.ko audio.ko bluetty.ko usbcore.ko sl811-hcd.ko uhci-hcd.ko ehci-hcd.ko ohci-hcd.ko uhci.ko usb-ohci.ko usb-uhci.ko usbkbd.ko usbhid.ko hid.ko usbmouse.ko usbnet.ko ir-usb.ko usbserial.ko usb-storage.ko scanner.ko printer.ko fan.ko ibm_acpi.ko ac.ko battery.ko processor.ko thermal.ko paride.ko cryptoloop.ko pktcdvd.ko floppy.ko loop.ko 8250_pnp.ko serial_core.ko 8250.ko 8250_pci.ko ndiswrapper.ko ungrab-winmodem.ko cifs.ko ssb.ko pl2303.ko aufs.ko serio_raw.ko ecb.ko output.ko"
  #FBMODS="intelfb.ko rivafb.ko sisfb.ko fbcon-vga-planes.ko fbcon-mfb.ko fbgen.ko mdacon.ko neofb.ko tridentfb.ko vgastate.ko vga16fb.ko "
  EXTRAMODS=""
  for ONEMOD in $EXTRALIST $USBMODEMLIST #$ANALOGMODEMLIST
  do
   ONEFND="`find ./ -type f -name $ONEMOD | sed -e 's/^\.\///g'`"
   if [ "$ONEFND" != "" ];then
    EXTRAMODS="$EXTRAMODS
$ONEFND"
   fi
  done
  cd ../../../../ #back into sandbox3.
  CHOSENMODS="$SOUNDMODS
 $IPV4MODS
 $NETFILTERMODS
 $IEEE80211MODS
 $RFKILLMODS
 $MAC80211MODS
 $WIMAXMODS
 $NETWORKMODS
 $UBUNTUMODS
 $MMCMODS
 $MEMSTICKMODS
 $MISCMODS
 $USBMODS
 $ACPIMODS
 $AGPMODS
 $I2CMODS
 $PLATFORMMODS
 $GSPCAMODS
 $BLUETOOTHMODS
 $DRMMODS
 $CPUSCALING2MODS
 $CPUSCALINGMODS
 $CRYPTOMODS
 $FBCONMODS
 $EXTRAMODS"
  echo "$CHOSENMODS"| tr -s '\n'  > /tmp/chosenmods.txt
  echo "Finding all dependent modules..."
  echo -n "" > /tmp/alldeps.txt
  echo "$CHOSENMODS" |
  while read ONEMOD
  do
   [ "$ONEMOD" = "" ] && continue #precaution
   ONEBASE="`basename $ONEMOD`"
   DPATTERN="/${ONEBASE}:"
   PPATTERN="s/^\/lib\/modules\/${KERNELVER}\///g"
   ONEDEPS="`cat rootfs-complete/lib/modules/$KERNELVER/modules.dep | grep "$DPATTERN" | cut -f 2 -d ':' | tr ' ' '\n' | sed -e "$PPATTERN"`"
   [ "$ONEDEPS" != "" ] && echo "$ONEDEPS" >> /tmp/alldeps.txt
  done
  sync
  sort -u /tmp/alldeps.txt > /tmp/alldepssorted.txt #remove duplicate lines.
  cat /tmp/alldepssorted.txt >> /tmp/chosenmods.txt
  sort -u /tmp/chosenmods.txt > /tmp/allmodssorted.txt
  sync
  #now delete all mods not in the list...
  echo "Moving unwanted modules to a separate pet file..." #"Deleting unwanted modules..." 150210
  find rootfs-complete/lib/modules/$KERNELVER/ -type f -name '*.ko' -o -name '*.HIDE' |
  while read ONEMODSPEC
  do
   ONEMODNAME="`basename $ONEMODSPEC`"
   mPATTERN='/'"$ONEMODNAME"
   if [ "`grep "$mPATTERN" /tmp/allmodssorted.txt`" = "" ];then
    ONEMODPATH="`dirname $ONEMODSPEC`"
    xONEMODPATH="`echo -n "$ONEMODPATH" | sed -e 's%^rootfs\-complete/%%'`"
    mkdir -p zdrv/${xONEMODPATH}
    cp -a $ONEMODSPEC zdrv/${xONEMODPATH}/
    rm -f $ONEMODSPEC
    #091203 remove firmware tarball...
    ONEMODBASE="`basename $ONEMODSPEC`"
    ombPATTERN='[:,]'"$ONEMODBASE"
    FWFND="`grep "$ombPATTERN" rootfs-complete/etc/modules/firmware.dep.${KERNELVER} | cut -f 1 -d ':'`"
    if [ "$FWFND" ];then
     if [ -f rootfs-complete/lib/modules/all-firmware/${FWFND}.tar.gz ];then
      mkdir -p zdrv/lib/modules/all-firmware
      mv -f rootfs-complete/lib/modules/all-firmware/${FWFND}.tar.gz zdrv/lib/modules/all-firmware/
     fi
    fi
   fi
  done
  
  #special case:
  mv -f rootfs-complete/lib/modules/all-firmware/intel537ep.tar.gz zdrv/lib/modules/all-firmware/
  cp -a -f --remove-destination rootfs-complete/lib/modules/${KERNELVER}/intelmodem zdrv/lib/modules/${KERNELVER}/
  rm -rf rootfs-complete/lib/modules/${KERNELVER}/intelmodem
 
  #echo "Creating ${ZDRVPET} 'zdrv' file..." #100911
  sync
  #w091029 use busybox depmod, creates smaller modules* files...
  #./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  if [ "$USINGKMOD" = "no" ];then #130418
   busybox depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  else
   ./depmod -b $WKGDIR/sandbox3/rootfs-complete -F $WKGDIR/sandbox3/System.map $KERNELVER
  fi
  sync
  MAKEZDRV="unwanted-modules" #w481 delay. 100903
 fi
fi #160824 ##############

#100622 slackware 13.1: just in case any got through, remove c-shell scripts...
rm -f rootfs-complete/etc/profile.d/*.csh* 2>/dev/null

#sanity check...
echo
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 chroot rootfs-complete echo 'testing chroot'
 if [ $? -ne 0 ];then
  echo "ERROR: could not 'chroot' into sandbox3/rootfs-complete"
  echo "This means that something is incomplete, perhaps a library"
  echo "needed by bash. Check it out. Have to exit script now."
  exit
 fi
else
 echo "Normally, the script now does a sanity-test by chrooting into"
 echo "sandbox3/rootfs-complete, however as you are doing a cross-build, this"
 echo "cannot be done."
fi

#before building puppy.sfs from rootfs-complete, check for any invalid symlinks
#and move them to the devx...
echo
echo "Finding invalid symlinks..."
rm -rf devx
mkdir devx
#v431 aaargh, latest pburn (3.1.1) has a symlink with spaces in name...
#for ONESYMLINK in `find rootfs-complete/ -type l`
find rootfs-complete/ -type l |
while read ONESYMLINK
do
 [ "`echo -n "$ONESYMLINK" | grep '/dev/'`" != "" ] && continue
 [ "`echo -n "$ONESYMLINK" | grep '/proc/'`" != "" ] && continue
 xONESYMLINK="`echo -n "$ONESYMLINK" | sed -e 's/^rootfs\-complete//'`"
 #w018 some symlinks become valid after puppy 1st boot...
 
 if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
  LINKTO="`chroot rootfs-complete readlink "$xONESYMLINK"`"
  [ "`echo -n "$LINKTO" | grep 'lib/X11/pixmaps'`" != "" ] && continue #these images created 1st boot.
  if [ "`chroot rootfs-complete readlink -e "$xONESYMLINK"`" = "" ];then
   UPONE="`dirname "$xONESYMLINK"`"
   mkdir -p devx${UPONE}
   cp -a -f "$ONESYMLINK" devx${UPONE}/
   rm -f "$ONESYMLINK"
  fi
 else
  #do it without chroot...
  LINKTO="`readlink rootfs-complete"${xONESYMLINK}"`" #120502 fix for spaces in path.
  [ -e rootfs-complete${LINKTO} ] && continue #absolute path
  UPONE="`dirname "$xONESYMLINK"`"
  [ -e rootfs-complete${UPONE}/${LINKTO} ] && continue #relative path
  mkdir -p devx${UPONE}
  cp -a -f "$ONESYMLINK" devx${UPONE}/
  rm -f "$ONESYMLINK"
 fi
 
done
#for ONESYMLINK in `find rootfs-complete/ -type l`
#do
# [ "`echo -n "$ONESYMLINK" | grep '/dev/'`" != "" ] && continue
# [ "`echo -n "$ONESYMLINK" | grep '/proc/'`" != "" ] && continue
# xONESYMLINK="`echo -n "$ONESYMLINK" | sed -e 's/^rootfs\-complete//'`"
# #w018 some symlinks become valid after puppy 1st boot...
# LINKTO="`chroot rootfs-complete readlink $xONESYMLINK`"
# [ "`echo -n "$LINKTO" | grep 'lib/X11/pixmaps'`" != "" ] && continue #these images created 1st boot.
# if [ "`chroot rootfs-complete readlink -e $xONESYMLINK`" = "" ];then
#  UPONE="`dirname $xONESYMLINK`"
#  mkdir -p devx${UPONE}
#  cp -a -f $ONESYMLINK devx${UPONE}/
#  rm -f $ONESYMLINK
# fi
#done

sync

#if [ "$DISTRO_COMPAT_VERSION" = "quirky6" ];then
# #131211 hack for quirky6, only want these...
# cp -a -f ../Packages-pet-common-official rootfs-complete/root/.packages/
# cp -a -f ../Packages-pet-noarch-official rootfs-complete/root/.packages/
# cp -a -f ../Packages-pet-quirky6-official rootfs-complete/root/.packages/
# cp -a -f ../Packages-t2-quirky6-official rootfs-complete/root/.packages/ #131214
#else
# #get info about the ubuntu pkgs...
# echo "Updating pkg data in rootfs-complete/root/.packages ..."
# #copy them into the live-cd also...
# #in case of Ppup4, PKGLISTS_COMPAT='Packages-pet-4xx-official'
# for ONELIST in $PKGLISTS_COMPAT
# do
#  cp -f ../$ONELIST ./
#  cp -f ../$ONELIST rootfs-complete/root/.packages/
# done
# for ONELIST in $PACKAGELISTS_PET_ORDER #120506
# do
#  cp -f ../$ONELIST ./
#  cp -f ../$ONELIST rootfs-complete/root/.packages/
# done
# #note, Ppup4, findwoofinstalledpkgs.sh (below) needs above file, then deletes it.
# #also copy the pet package databases...
# cp -f ../Packages-pet-[0-9]-official rootfs-complete/root/.packages/ 2>/dev/null
# cp -f ../Packages-pet-common-official rootfs-complete/root/.packages/ 2>/dev/null #110608
# #cp -f ../Packages-pet-wary5-official rootfs-complete/root/.packages/
# cp -f ../Packages-pet-noarch-official rootfs-complete/root/.packages/ #120305
# #121102
# if [ -f ../Packages-pet-${DISTRO_DB_SUBNAME}-official ];then #110723 ex: Packages-pet-drake-official
#  cp -f ../Packages-pet-${DISTRO_DB_SUBNAME}-official rootfs-complete/root/.packages/
#  cp -f ../Packages-pet-${DISTRO_DB_SUBNAME}-official ./
#  #120506...
#  ../support/rationalize_categories Packages-pet-${DISTRO_DB_SUBNAME}-official
#  cp -f /tmp/rationalized_categories rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
# fi
# #101014 rationalise categories... 110726 must *always* copy Packages-pet-wary5-official (it is going to be the fallback)...
# #if [ "$DISTRO_COMPAT_VERSION" = "wary5" ];then #101025
# if [ -f Packages-pet-wary5-official ];then
#  ../support/rationalize_categories Packages-pet-wary5-official
#  cp -f /tmp/rationalized_categories rootfs-complete/root/.packages/Packages-pet-wary5-official
# fi
#fi

#140202 simplify...
case $DISTRO_DB_SUBNAME in
 quirky6) SUBS="common noarch wary5 quirky6" ;;
 tahr) SUBS="common noarch wary5 quirky6 precise tahr" ;;
 unicorn) SUBS="common noarch wary5 quirky6 precise tahr unicorn" ;; #141023
 april) SUBS="common noarch wary april" ;; #150209
 *) SUBS="common noarch ${DISTRO_DB_SUBNAME}" ;; #150209
esac
for APSUB in $SUBS
do
 [ -f rootfs-complete/root/.packages/Packages-pet-${APSUB}-official ] && continue
 [ ! -f ../Packages-pet-${APSUB}-official ] && continue
 ../support/rationalize_categories ../Packages-pet-${APSUB}-official
 cp -f /tmp/rationalized_categories rootfs-complete/root/.packages/Packages-pet-${APSUB}-official
done
for APDB in `find ../ -maxdepth 1 -type f  -name "Packages-${DISTRO_BINARY_COMPAT}-*" | tr '\n' ' '`
do
 #../support/rationalize_categories $APDB
 #APBASE="`basename $APDB`"
 #cp -f /tmp/rationalized_categories rootfs-complete/root/.packages/${APBASE}
 cp -f $APDB rootfs-complete/root/.packages/
done
echo

#also copy this...
cp -f ../PKGS_MANAGEMENT rootfs-complete/root/.packages/

#477 a puppy-puppy build will not have any compat-distro databases...
petcntlimit=3
COMPATDISTRO_DB_FILES="`ls -1 rootfs-complete/root/.packages/Packages-[^p]* 2>/dev/null`"
[ "$COMPATDISTRO_DB_FILES" = "" ] && petcntlimit=5

#w476 swap to make sure 3 pet repos get chosen...
enabledrepos=" "

#100207 now using the quirky pet repo for all puppy builds... 131214 remove...
#[ -f ../Packages-pet-quirky-official ] && cp -f ../Packages-pet-quirky-official rootfs-complete/root/.packages/

#100730 DISTRO_COMPAT_VERSION for puppy builds no longer limited to a number 1-5 (ex: wary5)
fNUM1=`echo -n "$DISTRO_COMPAT_VERSION" | wc -c`

#100116 quirky, want the quirky db first in list... 101126 no, now building quirky from wary5 pkgs...
#if [ "`echo "$DISTRO_NAME" | grep -i 'quirky'`" != "" ];then
# enabledrepos="Packages-pet-quirky-official Packages-pet-4-official Packages-pet-3-official "
# #cp -f ../Packages-pet-quirky-official rootfs-complete/root/.packages/
#else
 repocnt=1
 case $DISTRO_FILE_PREFIX in  #110906 fix. $DISTRO_COMPAT_VERSION in #100911
  lucid|lupu|luci) #110906 fix. 120305 120312
   enabledrepos="Packages-pet-lucid-official Packages-pet-noarch-official "
  ;;
  wary|racy) #110906 110917 120305 120312 121105
   enabledrepos="Packages-pet-${DISTRO_DB_SUBNAME}-official Packages-pet-quirky-official Packages-pet-noarch-official Packages-pet-4-official " #110824 added -common-
  ;;
  slacko) #110824 120305 120312 121105
   enabledrepos="Packages-pet-${DISTRO_DB_SUBNAME}-official Packages-pet-noarch-official "
  ;;
  dpup|sqzd) #110824 110906 120305 120312
   enabledrepos="Packages-pet-dpup-official Packages-pet-noarch-official "
  ;;
  *)
   #add the puppy repos... (i want 5, 4, 3)... 131215 fix...
   for ONEREPO in `ls -1 rootfs-complete/root/.packages/Packages-pet* | sort -r`
   do
    [ $repocnt -gt $petcntlimit ] && break #limit of 3 puppy repos.
    BASEREPO="`basename $ONEREPO`"
    [ "$BASEREPO" = "Packages-pet-wary5-official" ] && continue #100911 handled above.
    [ "$BASEREPO" = "Packages-pet-lucid-official" ] && continue #100911 handled above.
    [ "$BASEREPO" = "Packages-pet-slacko-official" ] && continue #110824 handled above.
    #w478 a problem if building an old puppy-puppy, don't want more recent db's... 100730...
    if [ "$DISTRO_BINARY_COMPAT" = "puppy" ];then
     ONEREPNUM=`echo -n "$BASEREPO" | cut -f 3 -d '-'`
     fNUM2=`echo -n "$ONEREPNUM" | wc -c`
     #[ "`echo -n "$ONEREPNUM" | grep '[a-z]'`" != "" ] && continue
     [ $fNUM1 -eq 1 ] && [ $fNUM2 -eq 1 ] && [ $ONEREPNUM -gt $DISTRO_COMPAT_VERSION 2>/dev/null ] && continue
    fi
   # #w019 have decided don't want this showing up in PPM...
   # [ "$BASEREPO" = "Packages-pet-woof-official" ] && continue
    enabledrepos="${enabledrepos}${BASEREPO} "
    repocnt=`expr $repocnt + 1`
   done
  ;;
 esac
 #add compat-distro repos...
 if [ "$COMPATDISTRO_DB_FILES" != "" ];then
  for ONEREPO in `ls -1 rootfs-complete/root/.packages/Packages-[^p]*`
  do
   [ $repocnt -gt 5 ] && break #only allow 5 active repos in PPM.
   BASEREPO="`basename $ONEREPO`"
   enabledrepos="${enabledrepos}${BASEREPO} "
   repocnt=`expr $repocnt + 1`
  done
 fi
#fi

#120831 above code ok, but really just want these...
case $DISTRO_BINARY_COMPAT in
 ubuntu)
  xPUPPYREPOS="Packages-pet-${DISTRO_DB_SUBNAME}-official Packages-pet-noarch-official" #Packages-pet-common-official 
  xCOMPATREPOS="$(ls -1 rootfs-complete/root/.packages/Packages-[^p]* | grep -E '\-main$|\-universe$|\-multiverse$' | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  #130330 would like universe first...
  xCOMPATREPOS1="$(ls -1 rootfs-complete/root/.packages/Packages-[^p]* | grep -E '\-universe$' | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  xCOMPATREPOS2="$(ls -1 rootfs-complete/root/.packages/Packages-[^p]* | grep -E '\-main$|\-multiverse$' | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  enabledrepos=" ${xCOMPATREPOS1} ${xCOMPATREPOS2} ${xPUPPYREPOS} "
 ;;
esac

#131211 only want these pet repos...
if [ "$DISTRO_BINARY_COMPAT" = "t2" ];then
 if [ "$DISTRO_COMPAT_VERSION" = "quirky6" ];then
  enabledrepos='Packages-pet-quirky6-official Packages-pet-noarch-official Packages-pet-common-official '
 fi
fi

#170704 pet-common etc may be incompatible...
if [ "$DISTRO_TARGETARCH" == "armv7" ];then #DISTRO_TARGETARCH is in file DISTRO_SPECS
 #ex: DISTRO_BINARY_COMPAT=oe DISTRO_DB_SUBNAME=pyro
 enabledrepos="Packages-${DISTRO_BINARY_COMPAT}-${DISTRO_DB_SUBNAME}-official Packages-pet-${DISTRO_DB_SUBNAME}-official Packages-pet-noarch-official"
fi

echo "PKG_REPOS_ENABLED='${enabledrepos}'" >> rootfs-complete/root/.packages/PKGS_MANAGEMENT

if [ -f ../DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then #w478
 cp -f ../DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} rootfs-complete/root/.packages/DISTRO_PKGS_SPECS
else
 cp -f ../DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT} rootfs-complete/root/.packages/DISTRO_PKGS_SPECS
fi
#101013 remove wrong alternate choice (old/new kernel optional pkgs)...
if [ -f /tmp/3builddistro_removed_alt ];then
 for ONEREMOVE in `cat /tmp/3builddistro_removed_alt | tr '\n' ' '`
 do
  orPATTERN='yes|'"$ONEREMOVE"'|'
  grep -v "$orPATTERN" rootfs-complete/root/.packages/DISTRO_PKGS_SPECS > /tmp/DISTRO_PKGS_SPECS-tempor
  cp -f /tmp/DISTRO_PKGS_SPECS-tempor rootfs-complete/root/.packages/DISTRO_PKGS_SPECS
 done
fi

if [ -f ../DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then
 cp -f ../DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} rootfs-complete/root/.packages/DISTRO_COMPAT_REPOS
else #130306
 cp -f ../DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT} rootfs-complete/root/.packages/DISTRO_COMPAT_REPOS
fi
#this needed to update pkg db's in a running puppy...
cp -f ../0setup rootfs-complete/usr/local/petget/
#160923 no, host and target archs may differ. already have it in dest (pup-tools pet)...
##w015 0setup calls this for faster operation...
#cp -f ../support/find_cat rootfs-complete/usr/local/petget/
#w091017 0setup also needs these, fast conversion created by Wosh...
[ -f ../support/ppkg ] && cp -f ../support/ppkg rootfs-complete/usr/local/petget/
[ -f ../support/ppkg.ctg ] && cp -f ../support/ppkg.ctg rootfs-complete/usr/local/petget/
#110612 0setup needs these...
[ -f ../support/rpm2ppm ] && cp -f ../support/rpm2ppm rootfs-complete/usr/local/petget/
[ -f ../support/mageia2ppm ] && cp -f ../support/mageia2ppm rootfs-complete/usr/local/petget/
#160923 no, host and target archs may differ. already have it in dest (pup-tools pet)...
##121111 new fast deb to pup db converter, called by 0setup...
#[ -f ../support/debdb2pupdb ] && cp -f ../support/debdb2pupdb rootfs-complete/usr/local/petget/
#urls etc on the pet db's...
cp -f ../DISTRO_PET_REPOS rootfs-complete/root/.packages/
#w018 homepages of heaps of pkgs (see 0pre script)...
cp -f ../PKGS_HOMEPAGES rootfs-complete/root/.packages/
#cp -f ../support/inline_get_pet rootfs-complete/root/.packages/ #100801
#cp -f ../support/inline_get_compat rootfs-complete/root/.packages/ #100806
#cp -f ../support/findpkgs rootfs-complete/root/.packages/ #110821 110823 revert.

#130316 see 0setup and debdb2pupdb...
case ${DISTRO_BINARY_COMPAT} in
 debian|ubuntu|raspbian|devuan) #150419
  if [ ! -f ../invaliddepslist ];then
   echo "WARNING WARNING"
   echo "File 'invaliddepslist' does not exist.
This is created by script '0setup'. You must go back and rerun all of the
scripts from 0setup, 1download, 2createpackages.
Recommend abort this script now (ctrl-c).
Or, if you press ENTER to continue, an empty 'invaliddepslist' file will
be created."
   echo -n "Press ENTER to continue: "
   read justgoon
   touch ../invaliddepslist
  fi
 ;;
esac
[ -f ../invaliddepslist ] && cp -f ../invaliddepslist rootfs-complete/usr/local/petget/

#build a db of builtin packages, woof-installed-packages ... 110823 no need to chroot...
#chroot rootfs-complete /usr/local/petget/findwoofinstalledpkgs.sh
cp ../woof-installed-packages rootfs-complete/root/.packages/ #110823 already created earlier this script.
touch ../devx-only-installed-packages #121028
cp ../devx-only-installed-packages rootfs-complete/root/.packages/ #121028

#110722 add kernel db line... 160824
if [ "$KERNEL_DB_ENTRY" ];then
 echo "$KERNEL_DB_ENTRY" >> rootfs-complete/root/.packages/woof-installed-packages
else
 echo "linux_kernel-4.x|linux_kernel|4.x||BuildingBlock|103380K||linux_kernel-4.x-i-do-not-exist.pet||Linux kernel 4.x built into sd skeleton image|${DISTRO_BINARY_COMPAT}|${DISTRO_COMPAT_VERSION}||" >> rootfs-complete/root/.packages/woof-installed-packages
fi
#sort alphabetically...
sort --key=1 --field-separator="|" rootfs-complete/root/.packages/woof-installed-packages > /tmp/petget_woof-installed-packages
mv -f /tmp/petget_woof-installed-packages rootfs-complete/root/.packages/woof-installed-packages

#currently not using these...
rm -f rootfs-complete/etc/rc.d/rc.sysinit-UNIPUP
rm -f rootfs-complete/etc/rc.d/rc.shutdown-UNIPUP

#120628 certain utilities are not appropriate when booting on an arm board...
if [ "$SDFLAG" != "" ];then
 rm -f rootfs-complete/usr/sbin/grubconfig
 rm -f rootfs-complete/usr/sbin/remasterpup2
 rm -f rootfs-complete/usr/sbin/resizepfile.sh
 rm -f rootfs-complete/usr/sbin/wakepup2
 rm -f rootfs-complete/usr/share/applications/Grub-bootloader-config.desktop
 rm -f rootfs-complete/usr/share/applications/BootFlash-usb-installer.desktop
 rm -f rootfs-complete/usr/share/applications/Puppy-universal-installer.desktop
 rm -f rootfs-complete/usr/share/applications/Remaster-Puppy-live-CD.desktop
 rm -f rootfs-complete/usr/share/applications/Resize-personal-storage-file.desktop
 rm -f rootfs-complete/usr/share/applications/WakePup2.desktop
fi

#130326 script to adjust fonts to suit 96 dpi (puppy used to have 78 dpi)...
rootfs-complete/usr/sbin/hackfontsize

#130618 restore the "layer:" lines in /etc/xdg/templates/_root_.jwmrc...
#note, this file is now in Woof, I took it out of the JWM pet.
JWMFLG=0
JWM3=`grep -E '^jwm[_-][0-9]' rootfs-complete/root/.packages/woof-installed-packages | cut -f 3 -d '|' | cut -c 1-3 | head -n 1`
[ ! $JWM3 ] && JWMFLG=1 #assume too old. note, there is a jwm2 pet, which is older version.
if vercmp $JWM3 ge 2.2; then JWMFLG=2; fi
if vercmp $JWM3 ge 790; then JWMFLG=2; fi
case $JWMFLG in
 2)
  sed -i -e 's%.*LAYER_MINIXCAL.*%\t\t<Option>layer:above</Option>%' rootfs-complete/etc/xdg/templates/_root_.jwmrc
  sed -i -e 's%.*LAYER_GTKDIALOGSPLASH.*%\t\t<Option>layer:above</Option>%' rootfs-complete/etc/xdg/templates/_root_.jwmrc
  sed -i -e 's%.*LAYER_SPLASHWINDOW.*%\t\t<Option>layer:above</Option>%' rootfs-complete/etc/xdg/templates/_root_.jwmrc
 ;;
esac


#shared library loading...
#140123 ld.so.conf started further up, now append more...
[ -d rootfs-complete/usr/local/lib ] && echo "/usr/local/lib" >> rootfs-complete/etc/ld.so.conf
#[ -d rootfs-complete/usr/X11R7/lib ] && echo "/usr/X11R7/lib" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/gnome2/lib ] && echo "/opt/gnome2/lib" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/qt4/lib ] && echo "/opt/qt4/lib" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/mozilla.org/lib ] && echo "/opt/mozilla.org/lib" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/samba/lib ] && echo "/opt/samba/lib" >> rootfs-complete/etc/ld.so.conf
[ "$BUILD_CHOICE_BOARD" == "raspi" ] && echo "/opt/vc/lib" >> rootfs-complete/etc/ld.so.conf #161012 raspberry pi.
[ -d rootfs-complete/root/my-applications/lib ] && echo "/root/my-applications/lib" >> rootfs-complete/etc/ld.so.conf #140204 test

#141110 NO, lib64 are now symlinks into lib/x86_64-linux-gnu, so delete this...
##141107 installing some slacko64 pets into quirky unicorn64...
#[ -d rootfs-complete/lib64 ] && echo "/lib64" >> rootfs-complete/etc/ld.so.conf
#[ -d rootfs-complete/usr/lib64 ] && echo "/usr/lib64" >> rootfs-complete/etc/ld.so.conf

#170709 ubuntu 16.04 /etc/alternatives/x86_64-linux-gnu_egl-conf is symlink to /usr/lib/x86_64-linux-gnu/mesa-egl/ld.so.conf,
# however this code block is deleting target. also have /etc/ld.so.conf.d/x86_64-linux-gnu_EGL.conf symlink to /etc/alt.../x86...
# do not break that chain of symlinks!
#141113 ubuntu 14.10 glibc deb /etc/ld.so.conf has just this in it:
# include /etc/ld.so.conf.d/*.conf
#so, will gradually move to this format. for now, find all ld.so.conf files in various pkgs (ex: xorg_base, mesa)...
mkdir -p rootfs-complete/etc/ld.so.conf.d
echo 'include /etc/ld.so.conf.d/*.conf' >> rootfs-complete/etc/ld.so.conf
LDSOCONF="$(find rootfs-complete/usr -type f -name ld.so.conf | tr '\n' ' ')"
for ALDSOCONF in $LDSOCONF
do
 CONFPATH="$(dirname $ALDSOCONF)" #ex: rootfs-complete/mesa/usr/lib/x86_64-linux-gnu/mesa-egl
 CONFFOLDER="$(basename $CONFPATH)"
 CONFCONTENT="$(cat $ALDSOCONF)"
 if [ "$(grep -x "$CONFCONTENT" rootfs-complete/etc/ld.so.conf)" == "" ];then
  [ ! -f rootfs-complete/etc/ld.so.conf.d/${CONFFOLDER}.conf ] && cp -a -f $ALDSOCONF rootfs-complete/etc/ld.so.conf.d/${CONFFOLDER}.conf #170709 change mv to cp
 fi
 #rm -f ${CONFPATH}/ld.so.conf 2>/dev/null #170709 comment out.
done

#161012 have ended up with some duplication...
for ONELD in `cat rootfs-complete/etc/ld.so.conf.d/*.conf | grep '^/' | tr '\n' ' '`
do
 dPTN="^${ONELD}$"
 grep -v "$dPTN" rootfs-complete/etc/ld.so.conf > /tmp/etc_ld.so.conf_temp
 mv -f /tmp/etc_ld.so.conf_temp rootfs-complete/etc/ld.so.conf
done

#170731 doing this earlier...
#170222 recent change to installation, before if pet has /usr/lib64 a symlink, it changed the target to symlink.
#in case of ubuntu/debian builds, make it into a symlink again, as some pets need it...
#if [ "$ARCHDIR" != "lib64" ];then
# if [ -e rootfs-complete/usr/lib64 ];then
#  if [ ! -h rootfs-complete/usr/lib64 ];then
#   cp -a -f --remove-destination rootfs-complete/usr/lib64/* rootfs-complete/usr/lib${xARCHDIR}/
#   rm -rf rootfs-complete/usr/lib64
#   ln -s lib${xARCHDIR} rootfs-complete/usr/lib64
#  fi
# fi
#fi

#generate /etc/ld.so.cache shared lib loading cache file... 140204 fix...
xLDCONFIG="$(find rootfs-complete/sbin rootfs-complete/usr/sbin -maxdepth 2 -type f -name ldconfig | head -n 1 | sed -e 's%rootfs-complete%%')" #140204
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123  140204 set -maxdepth 4
 echo "Running ldconfig..."
 if [ "$xLDCONFIG" ];then #140204
  chroot rootfs-complete ${xLDCONFIG}
 else
  LDCONFIG="`find ../packages-${DISTRO_FILE_PREFIX}/ -maxdepth 4 -type f -name ldconfig | grep '/sbin/' | head -n 1`"
  cp -a $LDCONFIG rootfs-complete/
  chroot rootfs-complete ./ldconfig
  rm -f rootfs-complete/ldconfig
 fi
 sync
else
 #***NOTICE*** have to run ldconfig at first boot.
 if [ ! "$xLDCONFIG" ];then #140204
  LDCONFIG="`find ../packages-${DISTRO_FILE_PREFIX}/ -maxdepth 4 -type f -name ldconfig | grep '/sbin/' | head -n 1`"
  cp -a -f $LDCONFIG rootfs-complete/sbin/
 fi
fi

#150115 missing libs test moved down, below setup of library paths:
#now do dependency check...
dependcheck() {
 echo -n "" > /tmp/missinglibs.txt
 echo -n "" > /tmp/notmissinglibs0.txt
 echo -n "" > /tmp/notusedlibs.txt
 #FNDFILES="`find $WKGDIR/sandbox3/rootfs-complete -type f | tr "\n" " "`"
 #for ONEFILE in $FNDFILES
 find $WKGDIR/sandbox3/rootfs-complete -type f | #110516
 while read ONEFILE #110516
 do
  echo -n '.'
  ISANEXEC="`file --brief $ONEFILE | grep -E "LSB executable|shared object"`"
  if [ ! "$ISANEXEC" = "" ];then
   #need to chroot into rootfs-complete...
    NUMBYTESALL="`echo -n "$ONEFILE" | wc -c | tr -s " " | cut -f 2 -d " "`"
    NUMBYTESHD=`echo -n "$WKGDIR/sandbox3/rootfs-complete" | wc -c | tr -s " " | cut -f 2 -d " "`
    NUMBYTESHD="`expr $NUMBYTESHD + 1`"
    NEWROOTFILE="`echo -n "$ONEFILE" | cut -b $NUMBYTESHD-$NUMBYTESALL`"
   LDDRESULT="`chroot ${WKGDIR}/sandbox3/rootfs-complete ldd ${NEWROOTFILE}`"

   MISSINGLIBS="`echo "$LDDRESULT" | grep "not found" | cut -f 2 | cut -f 1 -d " " | tr "\n" " "`"
   if [ ! "$MISSINGLIBS" = "" ];then
    echo "File $ONEFILE has these missing library files:" >> /tmp/missinglibs.txt
    echo " $MISSINGLIBS" >> /tmp/missinglibs.txt
    #141112 not working...
    #echo "The missing libs are in these packages:" >> /tmp/missinglibs.txt
    #for ONEMISSING in $MISSINGLIBS
    #do
    # find ${WKGDIR}/packages-${DISTRO_FILE_PREFIX} -name $ONEMISSING >> /tmp/missinglibs.txt
    #done
    echo "" >> /tmp/missinglibs.txt
   fi
   #find all libs not missing...
   NOTMISSING="`file --brief $ONEFILE | grep -v "not found" | grep "shared object"`"
   if [ "$NOTMISSING" != "" ];then
    basename "$ONEFILE" >> /tmp/notmissinglibs0.txt
   fi
  fi
 done
 sync
 sort -u /tmp/notmissinglibs0.txt > /tmp/notmissinglibs.txt
 #now go thru rootfs-complete and see if any unused libs...
 #FNDFILES="`find $WKGDIR/sandbox3/rootfs-complete -type f | tr "\n" " "`"
 #for ONEFILE in $FNDFILES
 find $WKGDIR/sandbox3/rootfs-complete -type f | #110516
 while read ONEFILE #110516
 do
  ISANLIB="`file --brief $ONEFILE | grep "shared object"`"
  if [ ! "$ISANLIB" = "" ];then
   FILEBASE='/'"`basename $ONEFILE`"'$'
   FNDMATCH="`cat /tmp/notmissinglibs.txt | grep "$FILEBASE"`"
   if [ "$FNDMATCH" = "" ];then
    echo "File $ONEFILE is in Puppy but is not used." >> /tmp/notusedlibs.txt
   fi
  fi
 done
}

echo
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 echo "This script can now optionally do a thorough dependency check. "
 echo "Note, this may take a long time."
 echo -e "Press \"c\" key then ENTER to do thorough check,"
 echo -n "else just press ENTER key to bypass check: "
 read mmnn
else
 echo "Normally, the script now offers to perform a thorough dependency check."
 echo "However, as the host and target architectures are different, this cannot"
 echo "be done (host=${WOOF_HOSTARCH}, target=${WOOF_TARGETARCH})."
 echo "If you want to do this check, do a build with host and target the same,"
 echo "with same package selection."
 echo -n "Press ENTER key to continue: "
 read mmnn
 mmnn=""
fi

echo
if [ "$mmnn" = "c" ];then
 echo "Wait awhile..."
 dependcheck
 if [ -s /tmp/missinglibs.txt ];then #true if file not zero size.
  echo
  echo "UNFORTUNATELY, these libs are missing:"
  cat /tmp/missinglibs.txt
  echo
  echo -e "Press \"c\" key then  ENTER key to exit,"
  echo -n "or if you really want to ignore problem, just press ENTER: "
  read goto1
 fi
 [ "$goto1" = "c" ] && exit
 if [ -s /tmp/notusedlibs.txt ];then
  echo
  echo "INTERESTING, the following libs are in Puppy but apparently not used:"
  cat /tmp/notusedlibs.txt
  echo
  echo -e "Press \"c\" key then  ENTER key to exit,"
  echo -n "or if you really want to ignore problem, just press ENTER: "
  read goto1
 fi
 [ "$goto1" = "c" ] && exit
fi
echo "...done."

#150103 moved down, below setup of library paths.
#fix the menus...
#111123 ***NOTICE*** cross-build, will have to run fixmenus and indexgen.sh at first bootup.
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 echo
 echo "Constructing configuration files for JWM, Fvwm95, IceWM, openbox..."
 chroot rootfs-complete /usr/sbin/fixmenus
 #generate help index...
 chroot rootfs-complete /usr/sbin/indexgen.sh
 #...note, rootfs-skeleton/pinstall.sh pre-processes the help files.
fi

#i don't know what 'lintian' is for...
rm -rf rootfs-complete/usr/share/lintian 2>/dev/null
#maybe stray /install dir from slackware pkgs...
rm -rf rootfs-complete/install 2>/dev/null
#slackware pkg may create this...
rm -rf rootfs-complete/etc/cron.daily 2>/dev/null

#w460 theme selection...
echo
echo "Continuing to setup `pwd`/rootfs-complete..."
echo
#141204 optional file...
DEFAULT_THEME_GTK2=''
DEFAULT_THEME_JWM=''
DEFAULT_THEME_OPENBOX=''
DEFAULT_THEME_WALLPAPER=''
DEFAULT_THEME_DESK_ICONS=''
DEFAULT_THEME_ROX_TEXT_FOREGROUND='black'
DEFAULT_THEME_ROX_TEXT_SHADOW='thin' #none, thin, or thick
DEFAULT_THEME_ROX_TEXT_FONT='DejaVu Sans 10'
DEFAULT_THEME_XORG_TEXT_DPI=  #141206
if [ -f ../default-theme ];then #141206
. ../default-theme
fi
export DEFAULT_THEME_GTK2 DEFAULT_THEME_JWM DEFAULT_THEME_OPENBOX DEFAULT_THEME_WALLPAPER DEFAULT_THEME_DESK_ICONS #141206
#w478 now have a gui for theme selection...
eval "`../support/choose_themes`"
#...returns BACKGROUNDIMAGE, DESKICONS, GTKTHEME, JWMTHEME.

if [ "$EXIT" = "OK" ];then
#BACKGROUNDIMAGE="zzzzzzzz"
#echo "Here are the available background images (ref: usr/share/backgrounds):"
#ls -1 rootfs-complete/usr/share/backgrounds
#echo
#while [ ! -f rootfs-complete/usr/share/backgrounds/$BACKGROUNDIMAGE ];do
# echo "Type the full filename of the one you want as default"
# echo -n "(ENTER only will select the first): "
# read BACKGROUNDIMAGE
# [ "$BACKGROUNDIMAGE" = "" ] && BACKGROUNDIMAGE="`ls -1 rootfs-complete/usr/share/backgrounds | head -n 1`"
#done
 case $BACKGROUNDIMAGE in #110831
  *.png|*.PNG)
   mv -f rootfs-complete/usr/share/backgrounds/$BACKGROUNDIMAGE rootfs-complete/usr/share/backgrounds/default.png
   sed -i -e 's%default\.jpg%default.png%' rootfs-complete/root/Choices/ROX-Filer/PuppyPin
   #i don't know what uses this, but change it anyway...
   sed -i -e 's%default\.jpg%default.png%' rootfs-complete/etc/Puppybackgroundpicture
  ;;
  *)
   mv -f rootfs-complete/usr/share/backgrounds/$BACKGROUNDIMAGE rootfs-complete/usr/share/backgrounds/default.jpg
  ;;
 esac



##w477 choose gtk theme...
#echo
#echo "Here are the available GTK themes (ref: usr/share/themes):"
#ls -1 rootfs-complete/usr/share/themes/*/gtk-2.0 | grep '^rootfs-complete/usr/share/themes' | cut -f 5 -d '/'
#echo
#GTKTHEME="zzzzzzzzzz"
#while [ ! -d "rootfs-complete/usr/share/themes/$GTKTHEME" ];do
# echo "Type the full filename of the one you want as default"
# echo -n "(ENTER only will select the first): "
# read GTKTHEME
# [ "$GTKTHEME" = "" ] && GTKTHEME="`ls -1 rootfs-complete/usr/share/themes/*/gtk-2.0 | grep '^rootfs-complete/usr/share/themes' | cut -f 5 -d '/' | head -n 1`"
#done
#130329 append extra line, needed for Qt4 theme matching. (see also /etc/profile.d/pup_gtk and /root/.config/Trolltech.conf)...
echo "# -- THEME AUTO-WRITTEN DO NOT EDIT
include \"/usr/share/themes/${GTKTHEME}/gtk-2.0/gtkrc\"

include \"/root/.gtkrc.mine\"

# -- THEME AUTO-WRITTEN DO NOT EDIT
gtk-theme-name=\"${GTKTHEME}\"" > rootfs-complete/root/.gtkrc-2.0

#130401 01micko...
# gtk3 theme support thunor http://murga-linux.com/puppy/viewtopic.php?p=695722#695722
#[ -d rootfs-complete/root/.config/gtk-3.0 ] || mkdir -p rootfs-complete/root/.config/gtk-3.0
pathGTK3THEME="`find rootfs-complete/usr/share/themes/${GTKTHEME} -type d -name gtk-3.0`"
if [ "$pathGTK3THEME" ];then #XDG_CONFIG_HOME=/root/.config
# [ -f ${pathGTK3THEME}/settings.ini ] && cp -af ${pathGTK3THEME}/settings.ini rootfs-complete/root/.config/gtk-3.0/ || echo -e "[Settings] \ngtk-theme-name = \"${GTKTHEME}\" \ngtk-fallback-icon-theme = \"gnome\"" > rootfs-complete/root/.config/gtk-3.0/settings.ini
# #[ -f ${pathGTK3THEME}/gtk.css ] && cp -af ${pathGTK3THEME}/gtk.css rootfs-complete$XDG_CONFIG_HOME/gtk-3.0/ ||\# doesn't work
# echo "" > rootfs-complete/root/.config/gtk-3.0/gtk.css
  #130404 link to actual theme...
  ln -snf "$pathGTK3THEME" rootfs-complete/root/.config/gtk-3.0
fi

#echo
#DESKICONS="zzzzzzzzz"
#echo "Here are the available desktop icon themes (ref: usr/local/lib/X11/themes):"
#find rootfs-complete/usr/local/lib/X11/themes -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev
#while [ ! -d "rootfs-complete/usr/local/lib/X11/themes/$DESKICONS" ];do
# echo "Type the full filename of the one you want as default"
# echo -n "(ENTER only will select the first): "
# read DESKICONS
# [ "$DESKICONS" = "" ] && DESKICONS="`find rootfs-complete/usr/local/lib/X11/themes -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | head -n 1`"
#done
echo -n "$DESKICONS" > rootfs-complete/etc/desktop_icon_theme

 if [ -d rootfs-complete/root/.jwm/themes ];then
  cp -f rootfs-complete/root/.jwm/themes/${JWMTHEME}-jwmrc rootfs-complete/root/.jwm/jwmrc-theme
  cp -f rootfs-complete/root/.jwm/themes/${JWMTHEME}-colors rootfs-complete/root/.jwm/jwm_colors 2>/dev/null
 fi

 if [ -f rootfs-complete/root/.config/openbox/rc.xml ];then #20100406
  obPATTERN="s%Natura%${OBTHEME}%"
  sed -i -e "$obPATTERN" rootfs-complete/root/.config/openbox/rc.xml
 fi
 sync
fi #end theme chooser ok.

#110807 don't ask...
##110803 workaround for 'pngoverlay' needs X runnning, also avoid cpu overhead at first startup...
##/usr/sbin/icon_switcher_cli is called from /etc/rc.d/rc.update.
#echo
#echo "There are currently issues with building the default desktop icons in"
#echo "usr/local/lib/X11/pixmaps at first bootup of Puppy (PUPMODE=5)."
#echo "Recommend do it now, which will also save cpu time at first bootup."
#echo "Press any printable character then ENTER to defer building desktop icons."
#echo -n "Recommend press ENTER key only: "
#read DOITNOW
#if [ "$DOITNOW" = "" ];then

#110826 no longer calling icon_switcher_cli from rc.update, don't need this...
# #modify start of rootfs-complete/usr/sbin/icon_switcher_cli...
# sed -i -e 's%^#DONEINWOOF .*%[ "$PUPMODE" = "5" ] \&\& exit%' rootfs-complete/usr/sbin/icon_switcher_cli

 #have copied code from icon_switcher_cli to here, modified...
 NEWTHEME="$DESKICONS" #see above
 for ONESVG in `find rootfs-complete/usr/local/lib/X11/themes/${NEWTHEME}/ -maxdepth 1 -type f -name \*.svg | tr '\n' ' '`
 do
  ONEBASENAME="`basename $ONESVG .svg`"
  rm -f rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}48.png
  rsvg-convert -w 48 -h 48 -o rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}48.png $ONESVG
  rm -f rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}24.png
  #rsvg-convert -w 24 -h 24 -o /tmp/${ONEBASENAME}24.png $ONESVG
  ##if svg has transparency, JWM does not render properly in x16 bit color, screen out...
  #pngtopnm -mix /tmp/${ONEBASENAME}24.png | pnmtopng > /usr/local/lib/X11/pixmaps/${ONEBASENAME}24.png
  rsvg-convert -w 24 -h 24 -o rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}24.png $ONESVG
 done
 for ONEPNG in `find rootfs-complete/usr/local/lib/X11/themes/${NEWTHEME}/ -maxdepth 1 -type f -name \*.png | tr '\n' ' '`
 do
  ONEBASENAME="`basename $ONEPNG .png`"
  cp -f $ONEPNG rootfs-complete/usr/local/lib/X11/pixmaps/
  touch -m rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}.png #v3.98
  xONEBASENAME="`basename $ONEBASENAME 48`"
  if [ "$xONEBASENAME" != "$ONEBASENAME" ];then #scale to 24 pixels...
   pngtopnm -alpha $ONEPNG > /tmp/temp.pbm #separate transparency channel.
   pnmscale -reduce 2 /tmp/temp.pbm > /tmp/temp2.pbm 2> /dev/null
   pngtopnm $ONEPNG | pnmscale -reduce 2 2>/dev/null | pnmtopng -alpha=/tmp/temp2.pbm > rootfs-complete/usr/local/lib/X11/pixmaps/${xONEBASENAME}24.png
   touch -m rootfs-complete/usr/local/lib/X11/pixmaps/${xONEBASENAME}24.png #v3.98
  fi
 done

 #140127 if these not in the theme, create them (see also /usr/sbin/icon_switcher)... 141022 bug fix...
 [ ! -f rootfs-complete/usr/local/lib/X11/pixmaps/drives48.png ] && cp -f rootfs-complete/usr/local/lib/X11/pixmaps/drive48.png rootfs-complete/usr/local/lib/X11/pixmaps/drives48.png 2>/dev/null
 [ ! -f rootfs-complete/usr/local/lib/X11/pixmaps/folders48.png ] && cp -f rootfs-complete/usr/local/lib/X11/pixmaps/folder48.png rootfs-complete/usr/local/lib/X11/pixmaps/folders48.png 2>/dev/null
 [ ! -f rootfs-complete/usr/local/lib/X11/pixmaps/drives24.png ] && cp -f rootfs-complete/usr/local/lib/X11/pixmaps/drive24.png rootfs-complete/usr/local/lib/X11/pixmaps/drives24.png 2>/dev/null
 [ ! -f rootfs-complete/usr/local/lib/X11/pixmaps/folders24.png ] && cp -f rootfs-complete/usr/local/lib/X11/pixmaps/folder24.png rootfs-complete/usr/local/lib/X11/pixmaps/folders24.png 2>/dev/null
 
 if [ "$DISPLAY" ];then #110726 pngoverlay does not work when X not running. --quick fix, perform this operation in woof in 3builddistro.
  #110721 new standardised icons to show when mounted...
  if [ -e rootfs-complete/usr/sbin/pngoverlay -a -e rootfs-complete/usr/local/lib/X11/pixmaps/closebox_outline48.png ];then #overlay app created by vovchik (see source /usr/sbin/pngoverlay.bac)
   rm -f rootfs-complete/usr/local/lib/X11/pixmaps/*_mntd*.png
   #cp -f rootfs-complete/usr/sbin/pngoverlay rootfs-complete/usr/local/lib/X11/pixmaps/ #dumb, but needs to be in same folder.
   #111123 get pngoverlay from host, in case of cross-build...
   cp -f /usr/sbin/pngoverlay rootfs-complete/usr/local/lib/X11/pixmaps/ #dumb, but needs to be in same folder.
   cd rootfs-complete/usr/local/lib/X11/pixmaps
   for ONEDRV in card drive floppy optical usbdrv
   do
    ./pngoverlay ${ONEDRV}48.png closebox_outline48.png ${ONEDRV}_mntd48.png #background foreground output.
    ./pngoverlay ${ONEDRV}48.png locked_outline48.png ${ONEDRV}_mntd_boot48.png
   done
   rm -f rootfs-complete/usr/local/lib/X11/pixmaps/pngoverlay
   cd ../../../../../../
  fi
 fi
#fi

#110912 modify jwm to use menu icon 'start-button.png' if present...
#note, similar code also in /usr/sbin/icon_switcher (desktop icon switcher script).
if [ -f rootfs-complete/root/.jwmrc-tray ];then
 if [ -f rootfs-complete/usr/local/lib/X11/${NEWTHEME}/start-button.png ];then #default theme has menu icon.
  if [ -f rootfs-complete/usr/local/lib/X11/pixmaps/start-button.png ];then #precaution.
   if [ "`grep 'start-button\.png' rootfs-complete/root/.jwmrc-tray`" = "" ];then
    #the default is to use 'mini-dog.xpm' with text "Menu"...
    echo "rootfs-complete/root/.jwmrc-tray modified to use start-button.png menu icon"
    echo "(which is in rootfs-complete/usr/local/lib/X11/pixmaps/)"
    PTN1='s%label="Menu" icon="mini-dog\.xpm"%icon="start-button.png"%'
    sed -i -e "$PTN1" rootfs-complete/root/.jwmrc-tray
   fi
  fi
 fi
fi

#170105 set colors of xload in jwm tray. ref file 'default-theme'
if [ "$DEFAULT_COLOR_JWM_XLOAD" ];then #ex: -bg "#ff9d63" -fg red -hl white
 if [ -f rootfs-complete/root/.jwmrc-tray ];then
  sed -i -e "s%xload -nolabel .*%xload -nolabel ${DEFAULT_COLOR_JWM_XLOAD}%" rootfs-complete/root/.jwmrc-tray
 fi
fi

#v423 moved down. remove 'default' image from cull list...
#w482 cutdown the background images, to 8 images, remove largest...
BIGBACKIMAGES="`ls -S -1 rootfs-complete/usr/share/backgrounds | head -n -8 | grep -v 'default' | tr '\n' ' '`"
for ONEBIGIMAGE in $BIGBACKIMAGES
do
 rm -f rootfs-complete/usr/share/backgrounds/$ONEBIGIMAGE
done

#141204 refer file 'default-theme' ...
if [ "$DEFAULT_THEME_ROX_TEXT_FOREGROUND" ];then # black=#000000000000 white=#ffffffffffff
 grep -v 'pinboard_fg_colour' rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options > /tmp/3builddistro_rox_options1
 grep -v '^</Options>' /tmp/3builddistro_rox_options1 > rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
 echo "  <Option name=\"pinboard_fg_colour\">${DEFAULT_THEME_ROX_TEXT_FOREGROUND}</Option>" >> rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
 echo '</Options>' >> rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
else
 echo 'ROX: Using black text, as no DEFAULT_THEME_ROX_TEXT_FOREGROUND in default-theme'
fi
if [ "$DEFAULT_THEME_ROX_TEXT_SHADOW" ];then # none=0 thin=  thick=
 grep -v 'pinboard_shadow_labels' rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options > /tmp/3builddistro_rox_options1
 grep -v '^</Options>' /tmp/3builddistro_rox_options1 > rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
 echo "  <Option name=\"pinboard_shadow_labels\">${DEFAULT_THEME_ROX_TEXT_SHADOW}</Option>" >> rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
 echo '</Options>' >> rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
else
 echo 'ROX: Using thin-shadow, as no DEFAULT_THEME_ROX_TEXT_SHADOW in default-theme'
fi
if [ "$DEFAULT_THEME_ROX_TEXT_FONT" ];then
 grep -v 'label_font' rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options > /tmp/3builddistro_rox_options1
 grep -v '^</Options>' /tmp/3builddistro_rox_options1 > rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
 echo "  <Option name=\"label_font\">${DEFAULT_THEME_ROX_TEXT_FONT}</Option>" >> rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
 echo '</Options>' >> rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
else
 echo 'ROX: Using DejaVu Sans 10, as no DEFAULT_THEME_ROX_TEXT_FONT in default-theme'
fi
rm -f /tmp/3builddistro_rox_options1 2>/dev/null

#w464 maybe get rid of old mksquashfs... v424 fix
#w091019 running puppy with older glibc, mksquashfs may not work, so must chroot...
#141207 fix for alternate path:
#141231 do not chroot, gives "not enough physical memory" error (fixed in very latest mksquashfs). just assume v4.x.
SQPATH='/usr/sbin'
[ -e rootfs-complete/usr/bin/mksquashfs ] && SQPATH='/usr/bin'
if [ -e rootfs-complete${SQPATH}/mksquashfs ];then
 [ ! -e rootfs-complete${SQPATH}/mksquashfs4 ] && ln -s mksquashfs rootfs-complete${SQPATH}/mksquashfs4
fi
#ditto for unsquashfs... v424 fix w091019 chroot fix...
if [ -e rootfs-complete${SQPATH}/unsquashfs ];then
 [ ! -e rootfs-complete${SQPATH}/unsquashfs4 ] && ln -s unsquashfs rootfs-complete${SQPATH}/unsquashfs4
fi

if [ "$DISTRO_KERNEL_PET" != "" ];then #160824 #############
 #140119 delete all modules.* files...
 echo "...deleting modules.* files."
 [ -d rootfs-complete/lib/modules/$KERNELVER ] && rm -f rootfs-complete/lib/modules/$KERNELVER/modules.* 2>/dev/null
 #100628 my 2.6.34 pet has these...
 mkdir -p rootfs-complete/lib/modules/$KERNELVER #101023 not there if separate zdrv built.
 [ -f rootfs-complete/etc/modules/modules.builtin ] && cp -f rootfs-complete/etc/modules/modules.builtin rootfs-complete/lib/modules/$KERNELVER/
 [ -f rootfs-complete/etc/modules/modules.order ] && cp -f rootfs-complete/etc/modules/modules.order rootfs-complete/lib/modules/$KERNELVER/
fi #160824 #############

if [ "$MAKEZDRV" != "" ];then #w481 100903
 #v425 big analog modules may have got moved out to the zdrv...
 if [ -d big-modem-modules ];then
  mkdir -p zdrv
  cp -a -f big-modem-modules/rootfs-complete/* zdrv/
  mkdir -p zdrv/lib/modules/all-firmware
  cp -a -f big-modem-firmware/* zdrv/lib/modules/all-firmware/
  sync
 fi
 if [ "$MAKEZDRV" = "all-modules" ];then #100903
  mkdir -p zdrv/lib
  mkdir -p zdrv/etc
  mv -f rootfs-complete/lib/firmware zdrv/lib/
  mv -f rootfs-complete/etc/modules zdrv/etc/
 fi
 echo
 echo "Creating ${ZDRVPET}..."
 [ -f ${ZDRVPET} ] && rm -f ${ZDRVPET} #100911
 #150205 now creating pet...
 #../support/${MKSQUASHFS} zdrv ${ZDRVPET} ${COMPCHOICE} #100911 110713
 ZDRVNAME="$(basename $ZDRVPET .pet)" #ex: linux_modules_extra-6.97-april64
 [ -d $ZDRVNAME ] && rm -rf ./${ZDRVNAME}
 mv zdrv $ZDRVNAME
 DB_pkgname="$(echo -n $ZDRVNAME | cut -f 1 -d '-')"
 DB_version="$(echo -n $ZDRVNAME | cut -f 2- -d '-')"
 DB_size="$(du -s -k ${ZDRVNAME} | cut -f 1)"
 #db fields: pkgname|nameonly|version|pkgrelease|category|size|path|fullfilename|dependencies|description|compileddistro|compiledrelease|repo|
 PETSPECS="${ZDRVNAME}|${DB_nameonly}|${DB_version}||BuildingBlock|${DB_size}K||${ZDRVPET}|+linux_kernel&eq${KERNELVER}|extra modules for linux version ${KERNELVER}, for ${DISTRO_FILE_PREFIX} version ${DISTRO_VERSION}|${DISTRO_BINARY_COMPAT}|${DISTRO_COMPAT_VERSION}||"
 echo "$PETSPECS" > ${ZDRVNAME}/pet.specs
 #150210 need this:
 echo '#!/bin/sh
[ "`pwd`" == "/" ] && depmod' > ${ZDRVNAME}/pinstall.sh
 chmod 755 ${ZDRVNAME}/pinstall.sh
 echo '#!/bin/sh
depmod' > ${ZDRVNAME}/puninstall.sh
 chmod 755 ${ZDRVNAME}/puninstall.sh
 sync
 dir2tgz ${ZDRVNAME}/
 tgz2pet ${ZDRVNAME}.tar.gz
 sync
 rm -rf ./${ZDRVNAME}
 chmod 644 ${ZDRVPET}
 echo ' ...done'

 #150209 6update-pet-repo script adds pet to pet-repo, but want db-entry in rootfs-complete... 
 echo
 echo "Adding '${ZDRVPET}' db-entry to rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official..."
 sed -i '/^linux_modules_extra/d' rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
 echo "$PETSPECS" >> rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
 sort rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official > /tmp/p-p-o-tmp
 cp -a -f /tmp/p-p-o-tmp rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
 echo ' ...done'
 echo 'Note: script 6update-pet-repo needs to be run to add pet to local repo.'
fi

if [ "$BUILD_CHOICE_MERGE_DEVX" != "yes" ];then #150726
 #150209 devx pet created later, but want db-entry in build...
 echo
 echo 'Creating a devx db-entry in build...'
 SIZEK="400000" #rough value
 sed -i '/^devx/d' rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
 PETSPECS="devx-${DISTRO_VERSION}-${DISTRO_FILE_PREFIX}|devx|${DISTRO_VERSION}-${DISTRO_FILE_PREFIX}||Utility;development|${SIZEK}K||devx-${DISTRO_VERSION}-${DISTRO_FILE_PREFIX}.pet||A complete C/C++/Vala/Genie/BaCon compiling environment for Quirky, with extras such as svn, git, gdb|${DISTRO_BINARY_COMPAT}|${DISTRO_COMPAT_VERSION}||"
 echo "$PETSPECS" >> rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
 sort rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official > /tmp/p-p-o-tmp
 cp -a -f /tmp/p-p-o-tmp rootfs-complete/root/.packages/Packages-pet-${DISTRO_DB_SUBNAME}-official
 echo ' ...done'
 echo 'Note: script 6update-pet-repo needs to be run to add pet to local repo.'
 echo
fi

#w470 create a table for dialog/Xdialog: /usr/share/i18n/dialog_table
#'chooselocale' is called from /etc/rc.d/rc.country at first boot and
#pre-creating this table speeds things up. 111123
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 chroot rootfs-complete /usr/sbin/chooselocale composeonly
 #160914 instead of creating /usr/lib/locale/en_US at first boot, do it now...
 chroot rootfs-complete /usr/bin/localedef  -f ISO-8859-1 -i en_US --no-archive en_US
 #and en_US.utf8 (read from LANG in rootfs-complete/etc/profile)...
 chroot rootfs-complete /usr/sbin/chooselocale cli quiet
 # ...also generates rootfs-complete/root/.jwmrc
fi

[ -f rootfs-complete/pet.specs ] && rm -f rootfs-complete/pet.specs #w478

#w478 save some space if medit and gtksourceview both installed...
if [ -d rootfs-complete/usr/share/gtksourceview-2.0 ];then
 if [ -d rootfs-complete/usr/share/moo/language-specs ];then
  echo
  echo "An optimisation can be done to share some files between medit and"
  echo -n "gtksourceview. Press ENTER only to do this: "
  read optsourceview
  if [ "$optsourceview" = "" ];then
   cp -f rootfs-complete/usr/share/gtksourceview-2.0/language-specs/convert.py rootfs-complete/usr/share/moo/language-specs/ 2>/dev/null
   cp -f rootfs-complete/usr/share/gtksourceview-2.0/language-specs/language2.rng rootfs-complete/usr/share/moo/language-specs/ 2>/dev/null
   cp -f rootfs-complete/usr/share/gtksourceview-2.0/language-specs/language.rng rootfs-complete/usr/share/moo/language-specs/ 2>/dev/null
   cp -f rootfs-complete/usr/share/gtksourceview-2.0/language-specs/language.dtd rootfs-complete/usr/share/moo/language-specs/ 2>/dev/null
   cp -f rootfs-complete/usr/share/gtksourceview-2.0/language-specs/styles.rng rootfs-complete/usr/share/moo/language-specs/ 2>/dev/null
   rm -r -f rootfs-complete/usr/share/gtksourceview-2.0/language-specs
   rm -r -f rootfs-complete/usr/share/gtksourceview-2.0/styles
   ln -s /usr/share/moo/language-specs rootfs-complete/usr/share/gtksourceview-2.0/language-specs
   ln -s /usr/share/moo/language-specs rootfs-complete/usr/share/gtksourceview-2.0/styles
   echo "...usr/share/gtksourceview-2.0 now has links to usr/share/moo."
  fi
 fi
fi

#091123 t2 build get rid of some stray stuff...
[ -d rootfs-complete/usr/share/devhelp ] && rm -rf rootfs-complete/usr/share/devhelp
[ -d rootfs-complete/usr/share/man ] && rm -rf rootfs-complete/usr/share/man
[ -d rootfs-complete/usr/share/omf ] && rm -rf rootfs-complete/usr/share/omf

##091206 cleanup some icons if quirky build...
#c1DFP="`echo -n "$DISTRO_FILE_PREFIX" | cut -c 1`" #100516
##if [ "$DISTRO_FILE_PREFIX" = "quirky" ];then
#if [ "$c1DFP" = "q" ];then #100516
# ln -snf quirky-grey48x48.png rootfs-complete/usr/share/doc/puppylogo48.png
# ln -snf quirky-grey96x96.png rootfs-complete/usr/share/doc/puppylogo96.png
#else #111003
# rm -f rootfs-complete/usr/share/doc/quirky-grey48x48.png
# rm -f rootfs-complete/usr/share/doc/quirky-grey96x96.png
# case $DISTRO_FILE_PREFIX in
#  racy)
#   ln -snf racy48.png rootfs-complete/usr/share/doc/puppylogo48.png
#   ln -snf racy96.png rootfs-complete/usr/share/doc/puppylogo96.png
#  ;;
#  *)
#   rm -f rootfs-complete/usr/share/doc/racy48.png #111003
#   rm -f rootfs-complete/usr/share/doc/racy96.png #111003
#  ;;
# esac
#fi
#111006 generic logo mechanism for all pups...
if [ -f rootfs-complete/usr/share/doc/puplogos/${DISTRO_FILE_PREFIX}48.png ];then
 mv -f rootfs-complete/usr/share/doc/puplogos/${DISTRO_FILE_PREFIX}48.png rootfs-complete/usr/share/doc/${DISTRO_FILE_PREFIX}48.png
 ln -snf ${DISTRO_FILE_PREFIX}48.png rootfs-complete/usr/share/doc/puppylogo48.png
fi
if [ -f rootfs-complete/usr/share/doc/puplogos/${DISTRO_FILE_PREFIX}96.png ];then
 mv -f rootfs-complete/usr/share/doc/puplogos/${DISTRO_FILE_PREFIX}96.png rootfs-complete/usr/share/doc/${DISTRO_FILE_PREFIX}96.png
 ln -snf ${DISTRO_FILE_PREFIX}96.png rootfs-complete/usr/share/doc/puppylogo96.png
fi
rm -rf rootfs-complete/usr/share/doc/puplogos

#100208 hack so net-setup.sh can find ifplugstatus (pup 4.3.2 needs this)...
if [ ! -e rootfs-complete/sbin/ifplugstatus ];then
 if [ -e rootfs-complete/sbin/ifplugstatus-0.18 ];then
  ln -s ifplugstatus-0.18 rootfs-complete/sbin/ifplugstatus
 else
  if [ -e rootfs-complete/sbin/ifplugstatus-0.28 ];then
   ln -s ifplugstatus-0.28 rootfs-complete/sbin/ifplugstatus
  fi
 fi
fi

#100524 fix cups for samba, got this code from /usr/sbin/cups_shell...
#fixes from rcrsn51 for samba printing...
[ -f rootfs-complete/etc/cups/snmp.conf ] && [ "`stat --format=%U%G rootfs-complete/etc/cups/snmp.conf | grep 'UNKNOWN'`" != "" ] && chown root:nobody rootfs-complete/etc/cups/snmp.conf
#100706 no, this goes against all the docs, restore to a symlink...
#if [ ! -e rootfs-complete/usr/lib/cups/backend/smb ];then
# [ -f rootfs-complete/opt/samba/bin/smbspool ] && cp -a rootfs-complete/opt/samba/bin/smbspool rootfs-complete/usr/lib/cups/backend/smb
# [ -f rootfs-complete/usr/bin/smbspool ] && cp -a rootfs-complete/usr/bin/smbspool rootfs-complete/usr/lib/cups/backend/smb
#fi
if [ ! -e rootfs-complete/usr/lib/cups/backend/smb ];then
 [ -f rootfs-complete/opt/samba/bin/smbspool ] && ln -s /opt/samba/bin/smbspool rootfs-complete/usr/lib/cups/backend/smb
 [ -f rootfs-complete/usr/bin/smbspool ] && ln -s /usr/bin/smbspool rootfs-complete/usr/lib/cups/backend/smb
fi
[ -f rootfs-complete/etc/opt/samba/smb.conf ] && chmod 755 rootfs-complete/etc/opt/samba/smb.conf #need world-readable.
[ -f rootfs-complete/etc/samba/smb.conf ] && chmod 755 rootfs-complete/etc/samba/smb.conf #need world-readable.

#110907 rcrsn51: network printing, need this... 111027 revert, must have actual pdftops from cups pkg...
#if [ ! -e rootfs-complete/usr/lib/cups/filter/pdftops ];then
# [ -f rootfs-complete/usr/bin/pdftops ] && ln -s /usr/bin/pdftops rootfs-complete/usr/lib/cups/filter/pdftops
#fi

#111026 davids45: /tmp needs 777 permissions. i do have this in rootfs-skeleton, but lost in sandbox3/rootfs-complete
# (http://murga-linux.com/puppy/viewtopic.php?t=72258&start=90)
#130203 01micko: make that 1777 ref: http://murga-linux.com/puppy/viewtopic.php?p=677630#677630
chmod 1777 rootfs-complete/tmp
chmod 777 rootfs-complete/var

#110911 fix if any alternate drivers still at old location...
mkdir -p rootfs-complete/usr/lib/x/drivers-alternate
if [ -d rootfs-complete/usr/lib/xorg/modules/drivers-alternate ];then
 cp -a -f rootfs-complete/usr/lib/xorg/modules/drivers-alternate/* rootfs-complete/usr/lib/x/drivers-alternate/
 rm -rf rootfs-complete/usr/lib/xorg/modules/drivers-alternate
fi


#131207 for quirky6, only has modesetting and vesa drivers...
#150928 find path, may not be rootfs-complete/usr/lib/xorg/modules/drivers ...
XDRVRPATH="$(find rootfs-complete/usr -type d -name drivers | grep '/xorg/modules/drivers' | head -n 1)"
XDRVRLIST="$(ls -1 ${XDRVRPATH} | cut -f 1 -d '_' | sort | tr '\n' ' ')"
if [ "$XDRVRLIST" != "modesetting vesa " ];then 

#100319 move more xorg drivers to 'drivers-alternate' so won't be chosen by xorg...
if [ -d $XDRVRPATH ];then #well, always exists. 150928
 XORGBADDRIVERS=''

 #141206 woof-distro/*/*/*/build-choices can have some variables to preset build choices...
 if [ "$BUILD_CHOICE_XORG_DRIVERS_ALTERNATE" ];then
  #optional variable with list of xorg drivers to be moved to backup dir.
  #may have "none", none will be moved.
  NEWXORGBADDRVRS="$BUILD_CHOICE_XORG_DRIVERS_ALTERNATE"
 else
 
  if [ -f ${XDRVRPATH}/nvidia_drv.so -o -f ${XDRVRPATH}/nouveau_drv.so ];then #100527 100629
   [ -f ${XDRVRPATH}/nv_drv.so ] && XORGBADDRIVERS='nv' #120922 note, some builds don't have nv, or it may already be in drivers-alternate dir.
  fi
  [ -f ${XDRVRPATH}/modesetting_drv.so ] && XORGBADDRIVERS="${XORGBADDRIVERS} modesetting" #130330
  if [ "$XDRVRLIST" = "fbdev modesetting vesa " ];then #131208 quirky6
   XORGBADDRIVERS='fbdev'
  fi
  echo
  echo "Certain Xorg drivers have a bad reputation. Here you can choose to move them"
  echo "to /usr/lib/x/drivers-alternate so Xorg will not use them, instead"
  echo "will use the generic 'vesa' driver (or other more appropriate driver)."
  echo "However the Xorg Wizard has a mechanism to move any drivers in "
  echo "'drivers-alternate' back to 'drivers' directory."
  echo "Here is the list of drivers currently in 'drivers-alternate':"
  XORGBADDRIVERS="$XORGBADDRIVERS `ls -1 rootfs-complete/usr/lib/x/drivers-alternate | grep '_drv' | cut -f 1 -d '_' | tr '\n' ' '`"
  echo " $XORGBADDRIVERS"
  echo "Press ENTER only to accept this, or"
  echo "type a space-delimited list of drivers"
  echo -n " that you want to be in 'drivers-alternate': "
  read NEWXORGBADDRVRS
  [ "$NEWXORGBADDRVRS" = "" ] && NEWXORGBADDRVRS="$XORGBADDRIVERS"
 fi
 
 for ONEBADX in $NEWXORGBADDRVRS
 do
  #some builds have i810_drv.so symlink to intel_drv.so...
  if [ -h ${XDRVRPATH}/${ONEBADX}_drv.so ];then
   continue
  fi
  [ -f ${XDRVRPATH}/${ONEBADX}_drv.so ] && mv -f ${XDRVRPATH}/${ONEBADX}_drv.so rootfs-complete/usr/lib/x/drivers-alternate/
 done
 for ONECHK in `ls -1 rootfs-complete/usr/lib/x/drivers-alternate | grep '_drv' | cut -f 1 -d '_' | tr '\n' ' '` #110911
 do
  oPTN=" ${ONECHK} "
  if [ "`echo -n " ${NEWXORGBADDRVRS} " | grep "$oPTN"`" = "" ];then
   if [ ! -d $ONECHK ];then
    mv -f rootfs-complete/usr/lib/x/drivers-alternate/${ONECHK}_drv.so ${XDRVRPATH}/
   else
    echo "SORRY: cannot move '${ONECHK}_drv.so' from drivers-alternate back to"
    echo "main drivers, it must stay as an alternate driver only."
   fi
  fi
 done
fi
fi #131207

#101012 if 'depmod-FULL' exists, rename it to 'depmod'... 101024
if [ "$USINGKMOD" = "no" ];then #130418
 if [ ! -h rootfs-complete/sbin/depmod-FULL ];then #if hyperlink then assume to depmod.
  if [ -f rootfs-complete/sbin/depmod-FULL ];then
   mv -f rootfs-complete/sbin/depmod rootfs-complete/sbin/depmod-BB-NOTUSED
   mv -f rootfs-complete/sbin/depmod-FULL rootfs-complete/sbin/depmod
  fi
  ln -s depmod rootfs-complete/sbin/depmod-FULL
 fi
else
 [ -e rootfs-complete/bin/kmod ] && ln -snf ../bin/kmod rootfs-complete/sbin/depmod #130430 path fix.
fi

#101015 make sure our modified 'alsaconf' is used (just in case got overwritten)...
cp -a -f ../rootfs-skeleton/usr/sbin/alsaconf rootfs-complete/usr/sbin/

#w481 extra stripping...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #120502 strip will not work for cross-build.
 echo
 echo "Would you like to strip all binary executables and shared library files?"
 echo "These are usually already stripped, although some packages may have the shared"
 echo "library files stripped with the '--strip-debug' option only, and extra stripping"
 echo "should be okay. It won't do any harm answering yes here."
 if [ "`which strip`" = "" ];then
  echo
  echo "OH, NO GOOD, you don't have the 'strip' executable. The 'devx' sfs has it."
  echo "PLEASE DECLINE THIS OFFER..."
  echo
 fi
 echo -n "ENTER only to strip, any other printable char to decline: "
 read NOSTRIP
 if [ "$NOSTRIP" = "" ];then
  find rootfs-complete/bin rootfs-complete/sbin rootfs-complete/usr/bin rootfs-complete/sbin -type f |
  while read ONEFILE
  do
   ONEBASE="`basename "$ONEFILE"`"
 #  if [ "`file "$ONEFILE" | grep 'ELF' | grep 'executable' | grep 'dynamically linked'`" != "" ];then #v424 fix.
   [ "$ONEBASE" = "e3" ] && continue #v431 cannot be stripped.
   [ "$ONEBASE" = "QtWeb" ] && continue #130721 cannot be stripped.
   if [ "`file "$ONEFILE" | grep 'ELF' | grep 'executable'`" != "" ];then #v431
    echo -n "$ONEBASE "
    #strip --strip-unneeded "$ONEFILE"
    strip "$ONEFILE" #170704
   fi
  done
  echo
  find rootfs-complete/usr/lib -type f -name \*.so* |
  while read ONEFILE
  do
   ONEBASE="`basename "$ONEFILE"`"
   #v431 libgdk-x11-2.0.so* compiled in pup4 with '--enable-debug', fixes insert-key mozilla crash.
   # it may be unwise to strip its debug symbols... no, it's ok...
   #[ "`echo "$ONEBASE" | grep 'libgdk'`" != "" ] && continue #v431
   if [ "`file "$ONEFILE" | grep 'ELF' | grep 'shared object'`" != "" ];then
    echo -n "$ONEBASE "
    #strip --strip-unneeded "$ONEFILE"
    strip "$ONEFILE" #170704
   fi
  done
  echo
 fi
fi

#100527 build a .pet with lists of all builtin files...
echo
echo "Now building sandbox3/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.pet,"
echo "which is a PET package with lists of all packages and files in the build..."
rm -rf 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION} 2>/dev/null
mkdir 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
mkdir /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
for ONEGENDIR in `find ../packages-${DISTRO_FILE_PREFIX} -maxdepth 1 -type d | tr '\n' ' '`
do
 ONEGENNAME="`basename $ONEGENDIR`"
# [ "`echo "$ONEGENNAME" | grep -E '_DEV|_DOC|_NLS|_NULL'`" != "" ] && continue #not really needed.
 ogPATTERN="|${ONEGENNAME}|"
 [ "`echo "$PKGS_SPECS_TABLE" | grep '^yes' | grep "$ogPATTERN"`" == "" ] && continue
 echo -n "$ONEGENNAME "
 ogPATTERN="s%^\\.\\./packages-${DISTRO_FILE_PREFIX}/${ONEGENNAME}/%/%"
 find $ONEGENDIR | sed -e "$ogPATTERN" | sort > /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/${ONEGENNAME}.files
 sync
 #store the information more efficiently...
 mkdir -p 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files
 PREVPATH=''; PREVPATH0=''
 cat /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/${ONEGENNAME}.files |
 while read ONELINE
 do
  [ "`echo "$ONELINE" | cut -c 1`" == "." ] && continue #catch ex: ../packages-qrky/abiword
  if [ -d "rootfs-complete${ONELINE}" ];then
   #120925 ignore debian/ubuntu multiarch circular symlink (these are create by 2createpackages)...
   if [ -h "rootfs-complete${ONELINE}" ];then
    if [ "$(readlink "rootfs-complete${ONELINE}")" = "./" ];then
     PREVPATH0="$(dirname "$ONELINE")" #121010 fix, missing some files.
     [ "$PREVPATH0" != "$PREVPATH" ] && echo "$PREVPATH0" >> 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files/${ONEGENNAME} #121010
     continue
    fi
   fi
   PREVPATH="$ONELINE"
   echo "$ONELINE" >> 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files/${ONEGENNAME}
  else
   NEWPATH="`dirname "$ONELINE"`"
   [ "$NEWPATH" == "/" ] && continue #ignore top-level files.
   NEWFILE="`basename "$ONELINE"`"
   if [ -e "rootfs-complete${ONELINE}" ];then #sanity check.
    if [ "$PREVPATH" == "$NEWPATH" -o "$PREVPATH0" == "$NEWPATH" ];then #sanity check. 121010
     echo " ${NEWFILE}" >> 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files/${ONEGENNAME}
    fi
   fi
  fi
 done
done

echo "0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}|0builtin_files_${DISTRO_FILE_PREFIX}|${DISTRO_VERSION}||BuildingBlock|||0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.pet||Lists of files built-in to the SFS file||||
" > 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/pet.specs
rm -f 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.pet 2>/dev/null

dir2tgz 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
tgz2pet 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.tar.gz
rm -rf /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
echo
echo "installing pkg lists into rootfs-complete/root/.packages/builtin_files..."
cp -a -f 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files rootfs-complete/root/.packages/builtin_files
echo '...done'

#170325 /usr/local/petget/0setup wants this...
[ -f ../build-choices ] && cp -a -f ../build-choices rootfs-complete/root/.packages/

#100613 create font cache for fontconfig (in /var/cache/fontconfig)...
echo
echo "Creating Fontconfig cache files..."
rm -rf rootfs-complete/var/cache/fontconfig
mkdir -p rootfs-complete/var/cache/fontconfig
#111123 ***NOTICE*** cross-build, this will have to be executed at first boot...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 chroot rootfs-complete /usr/bin/fc-cache -s -v
fi

if [ ! -e rootfs-complete/usr/bin/pango-querymodules ];then #110517 debian squeeze hack
 #cp -f devx/usr/bin/pango-querymodules rootfs-complete/usr/bin/
 if [ -e ../packages-${DISTRO_FILE_PREFIX}/pango_DEV/usr/bin/pango-querymodules ];then #160321
  cp -f ../packages-${DISTRO_FILE_PREFIX}/pango_DEV/usr/bin/pango-querymodules rootfs-complete/usr/bin/
 fi
fi

#100622 slackware 13.1: this file is zero bytes...
#111123 ***NOTICE*** cross-build, this will have to be executed at first boot...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 mkdir -p rootfs-complete/etc/pango #141118
 PANGOMODULES="`find rootfs-complete/etc/pango -type f -name pango.modules | sed -e 's%rootfs-complete%%'`"
 [ "$PANGOMODULES" = "" ] && PANGOMODULES='/etc/pango/pango.modules'
 if [ ! -s rootfs-complete${PANGOMODULES} ];then
  if [ -e rootfs-complete/usr/bin/pango-querymodules ];then #160321
   echo "/usr/bin/pango-querymodules > ${PANGOMODULES}"  > rootfs-complete/zz
   chroot rootfs-complete /bin/ash zz
   rm -f rootfs-complete/zz
  fi
 fi
fi

#110622 hack for mageia 1 (otherwise can't find pango.modules)...
if [ -d rootfs-complete/etc/pango/i386 ];then
 cp -a -f rootfs-complete/etc/pango/pango.modules rootfs-complete/etc/pango/i386/
 [ -f rootfs-complete/etc/pango/pangox.aliases ] && cp -a -f rootfs-complete/etc/pango/pangox.aliases rootfs-complete/etc/pango/i386/
fi

#110622 /etc/rc.d/rc.update executes:  gdk-pixbuf-query-loaders > /etc/gtk-2.0/gdk-pixbuf.loaders  131229 now done below.
#however, mageia1 requires above file to be at /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
#create a symlink...
VERDIR=''
if [ -d rootfs-complete/usr/lib${xARCHDIR}/gdk-pixbuf-2.0 ];then
 [ ! -f rootfs-complete/etc/gtk-2.0/gdk-pixbuf.loaders ] && touch rootfs-complete/etc/gtk-2.0/gdk-pixbuf.loaders
 PIXBUFLOADERSDIR="`find rootfs-complete/usr/lib${xARCHDIR}/gdk-pixbuf-2.0 -maxdepth 2 -mindepth 2 -type d -name loaders | head -n 1`"
 if [ "$PIXBUFLOADERSDIR" ];then
  PIXBUFCACHEDIR="`dirname $PIXBUFLOADERSDIR`"
  VERDIR="`basename $PIXBUFCACHEDIR`" #2.10.0
  if [ "$(echo -n "$xARCHDIR" | cut -c 1)" == "/" ];then #150102
   ln -snf ../../../../../etc/gtk-2.0/gdk-pixbuf.loaders ${PIXBUFCACHEDIR}/loaders.cache #110903 change -s to -snf
  else
   ln -snf ../../../../etc/gtk-2.0/gdk-pixbuf.loaders ${PIXBUFCACHEDIR}/loaders.cache #110903 change -s to -snf
  fi
  #there may be some loaders in wrong place...
  [ -d rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/loaders ] && mv -f rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/loaders/*.so ${PIXBUFLOADERSDIR}/ 2>/dev/null
  if [ -d rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/loaders ];then
   #mv -f rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/loaders/*.so ${PIXBUFLOADERSDIR}/ 2>/dev/null
   #150726 with devx merged, have a .la file also in here...
   mv -f rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/loaders/* ${PIXBUFLOADERSDIR}/ 2>/dev/null #150726
   rmdir rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/loaders #111114
  fi
  if [ "$(echo -n "$xARCHDIR" | cut -c 1)" == "/" ];then #150102
   ln -s ../../../${ARCHDIR}/gdk-pixbuf-2.0/${VERDIR}/loaders rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/loaders
  else #161230
   ln -s ../../gdk-pixbuf-2.0/${VERDIR}/loaders rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/loaders #111114
  fi
 fi
fi

#131229 didn't work just appending this...
#131217 librsvg compiled in T2 does not have file 'gdk-pixbuf.loaders', need to insert...
#if [ "`grep 'svg' rootfs-complete/etc/gtk-2.0/gdk-pixbuf.loaders`" = "" ];then
# echo '
#"/usr/lib/gtk-2.0/2.10.0/loaders/libpixbufloader-svg.so"
#"svg" 2 "gtk20" "Scalable Vector Graphics" "LGPL"
#"image/svg+xml" "image/svg" "image/svg-xml" "image/vnd.adobe.svg+xml" "text/xml-svg" ""
#"svg" ""
#" <svg" "*    " 100
#" <!DOCTYPE svg" "*             " 100' >> rootfs-complete/etc/gtk-2.0/gdk-pixbuf.loaders
#fi
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #131229
 #chroot rootfs-complete gdk-pixbuf-query-loaders > /etc/gtk-2.0/gdk-pixbuf.loaders
 #...does not work, do to the redirection, have to do it this way...
 chroot rootfs-complete gdk-pixbuf-query-loaders > /tmp/gdk-pixbuf.loaders
 cp -a -f /tmp/gdk-pixbuf.loaders rootfs-complete/etc/gtk-2.0/gdk-pixbuf.loaders
fi

if [ ! -e rootfs-complete/usr/bin/gtk-update-icon-cache ];then #170429
 if [ -e rootfs-complete/usr/bin/gtk-update-icon-cache-2.0 ];then
  ln -s gtk-update-icon-cache-2.0 rootfs-complete/usr/bin/gtk-update-icon-cache
 elif [ -e rootfs-complete/usr/bin/gtk-update-icon-cache-3.0 ];then
  ln -s gtk-update-icon-cache-3.0 rootfs-complete/usr/bin/gtk-update-icon-cache
 fi
fi
#131217 was doing this at first bootup in rc.update, but no longer in quirky6...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then
 #note, can use  --ignore-theme-index if want to...
 chroot rootfs-complete /usr/bin/gtk-update-icon-cache -f /usr/share/icons/hicolor/
fi

#120605 shinobar ref: http://murga-linux.com/puppy/viewtopic.php?t=76961&start=195
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then
 chroot rootfs-complete /usr/bin/gtk-query-immodules-2.0 > /tmp/gtk.immodulesTEMP
 cp -a -f /tmp/gtk.immodulesTEMP rootfs-complete/etc/gtk-2.0/gtk.immodules
else
 touch rootfs-complete/etc/gtk-2.0/gtk.immodules
fi
if [ "$VERDIR" ];then #161230
 if [ "$(echo -n "$xARCHDIR" | cut -c 1)" == "/" ];then #150102
  ln -snf ../../../../../etc/gtk-2.0/gtk.immodules rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/gtk.immodules
 else
  ln -snf ../../../../etc/gtk-2.0/gtk.immodules rootfs-complete/usr/lib${xARCHDIR}/gtk-2.0/${VERDIR}/gtk.immodules
 fi
fi

#100627 recent versions of xorg server, turn modesetting on... 110822 improve...
mkdir -p rootfs-complete/etc/modprobe.d
#110621 need to chroot...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 XORGINFO="`chroot rootfs-complete /usr/bin/Xorg -version 2>&1`"
 XORGVER="`echo "$XORGINFO" | grep '^X\.Org' | rev | cut -f 1 -d ' ' | rev`"
else
 #cross-build, assume recent xorg...
 XORGVER='1.7.7'
fi
[ "$XORGVER" = "" ] && XORGVER="`echo "$XORGINFO" | grep '^X Window System Version' | rev | cut -f 1 -d ' ' | rev`" #xorg 7.3
[ "$XORGVER" = "" ] && XORGVER="1.3.0" #precaution. version used in original Xorg 7.3.
if vercmp "$XORGVER" gt "1.7.6";then

 #120616 no, don't do this...
 ##120516 check that these drivers exist...
 #EXTRADRVPTH=''
 #[ -d rootfs-complete/usr/X11R7/lib/dri ] && EXTRADRVPTH='rootfs-complete/usr/X11R7/lib/dri'
 #[ -d rootfs-complete/usr/lib/dri ] && EXTRADRVPTH="${EXTRADRVPTH} rootfs-complete/usr/lib/dri"
 #[ ! "$EXTRADRVPTH" ] && EXTRADRVPTH='/usr/lib'
 #DRILIST=''
 #for AXDRI in i915_dri.so radeon_dri.so nouveau_dri.so
 #do
 # if find ${EXTRADRVPTH} -mindepth 1 -maxdepth 1 -name ${AXDRI}; then
 #  ADRI="`echo -n "$AXDRI" | cut -f 1 -d '_'`"
 #  DRILIST="${DRILIST}${ADRI} "
 # fi
 #done
 #120616 do this...
 DRILIST='i915 radeon nouveau'
 [ "$SDFLAG" ] && DRILIST='' #assume not using kms at all when boot from sd card (arm arch).
 if [ "$DRILIST" != "" ];then
  echo
  echo "Certain Xorg drivers require KMS (Kernel ModeSetting)"
  echo "A value of '1' means on, '0' means off."
  echo "Press ENTER key only to accept the default, any other char to flip:"
  for XDRIVER in $DRILIST #i915 radeon nouveau
  do
   KMSFLG='1'
   #[ "$XDRIVER" = "radeon" ] && [ "$DISTRO_BINARY_COMPAT" = "slackware" ] && KMSFLG='0' #01micko.
   #[ "$XDRIVER" = "radeon" ] && KMSFLG='0' #110918 seems need this off. 120526 try default on. 120605 turn off. 120903 on again.
   echo -n "${XDRIVER} [${KMSFLG}]: "
   read KMSREPLY
   if [ "$KMSREPLY" ];then #110906 fix syntax error.
    #not the default...
    case $KMSFLG in
     0) echo "options ${XDRIVER} modeset=1"  > rootfs-complete/etc/modprobe.d/${XDRIVER}.conf ;;
     1) echo "options ${XDRIVER} modeset=0"  > rootfs-complete/etc/modprobe.d/${XDRIVER}.conf ;;
    esac
   else
    echo "options ${XDRIVER} modeset=${KMSFLG}"  > rootfs-complete/etc/modprobe.d/${XDRIVER}.conf
   fi
  done
 fi
fi

#110213 fix if .utf8 entries missing...
if [ "`grep 'nb_NO\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'nb_NO.utf8:					nb_NO.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi
if [ "`grep 'nn_NO\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'nn_NO.utf8:					nn_NO.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi
if [ "`grep 'ru_UA\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'ru_UA.utf8:					ru_UA.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi
if [ "`grep 'ru_RU\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'ru_RU.utf8:					ru_RU.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi

#110329 some python files, move to 'devx'...
#121022 but only if python is supposed to be in devx...
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python-tiny|')" == "" ];then #170517 python-tiny stays in main f.s.
 if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" != "" ];then
  PYTHONDIR=''
  [ -d rootfs-complete/usr/lib/python2.5 ] && PYTHONDIR='python2.5'
  [ -d rootfs-complete/usr/lib/python2.6 ] && PYTHONDIR='python2.6'
  [ -d rootfs-complete/usr/lib/python2.7 ] && PYTHONDIR='python2.7'
  if [ "$PYTHONDIR" ];then
   mkdir -p devx/usr/lib/${PYTHONDIR}
   cp -a -f --remove-destination rootfs-complete/usr/lib/${PYTHONDIR}/* devx/usr/lib/${PYTHONDIR}/
   rm -rf rootfs-complete/usr/lib/${PYTHONDIR}
  fi
 fi
fi

#110412 move all .bac, .pot and .pupdev files to 'devx'...
if [ "$BUILD_CHOICE_MERGE_DEVX" != "yes" ];then #150726
 echo "Moving .pot, .pupdev, .bac files to devx..."
 find rootfs-complete/usr -type f -name '*.pot' -o -name '*.pupdev' -o -name '*.bac' |
 while read ONEPD
 do
  DESTDIR="`dirname "$ONEPD" | sed -e 's%rootfs\-complete%%'`"
  mkdir -p "devx${DESTDIR}"
  mv -f "$ONEPD" "devx${DESTDIR}/"
  POTNAME="$(basename "$ONEPD")"
  touch -c "devx${DESTDIR}/${POTNAME}" #coz of the cp -u below.
 done
 #120224 move rootfs-complete/usr/share/doc/nls to 'devx'...
 mkdir -p devx/usr/share/doc/nls
 cp -a -f rootfs-complete/usr/share/doc/nls/* devx/usr/share/doc/nls/
 rm -r -f rootfs-complete/usr/share/doc/nls
 
 #150308 there are other .pot files scattered around...
 find ../packages-${DISTRO_FILE_PREFIX} -mindepth 5 -maxdepth 7 -type f -name '*.pot' |
 while read ONEPOT
 do
  DESTDIR="$(dirname "$ONEPOT" | cut -f 4- -d '/')" #ex: ../packages-april64/xarchive_NLS/usr/share/doc/nls/xarchive becomes usr/share/doc/nls/xarchive
  mkdir -p "devx/${DESTDIR}"
  cp -a -u "$ONEPOT" "devx/${DESTDIR}/"
 done
 sync
 
 #150308 momanager is supposed to work without devx, so copy the .pot files back...
 cp -a -f devx/usr/share/doc/nls rootfs-complete/usr/share/doc/
fi

#110417 this may be helpful for more apps than Thunar...
#this will make Thunar use ROX-Filer's icons for files...
if [ -d rootfs-complete/usr/local/apps/ROX-Filer/ROX/MIME ];then
 if [ ! -e rootfs-complete/usr/share/icons/hicolor/48x48/mimetypes ];then
  ln -s ../../../../local/apps/ROX-Filer/ROX/MIME rootfs-complete/usr/share/icons/hicolor/48x48/mimetypes
 fi
fi

#110421 get version compare utility... 140119...
cp -f ../boot/vercmp rootfs-complete/bin/

#110429 fix just in case...
busybox chown -h -R spot:spot rootfs-complete/root/spot

#110429 this is difficult. may need a fix, think want glibc scsi headers in usr/include/scsi...
mkdir -p devx/usr/include
if [ -d ../packages-${DISTRO_FILE_PREFIX}/linux_headers_DEV/usr/include/scsi ];then
 cp -a ../packages-${DISTRO_FILE_PREFIX}/linux_headers_DEV/usr/include/scsi devx/usr/include/scsi-KERNEL
fi
if [ -d ../packages-${DISTRO_FILE_PREFIX}/linux-header_DEV/usr/include/scsi ];then
 cp -a ../packages-${DISTRO_FILE_PREFIX}/linux-header_DEV/usr/include/scsi devx/usr/include/scsi-KERNEL
fi
if [ -d ../packages-${DISTRO_FILE_PREFIX}/glibc_DEV/usr/include/scsi ];then
 cp -a ../packages-${DISTRO_FILE_PREFIX}/glibc_DEV/usr/include/scsi devx/usr/include/scsi-GLIBC
fi
#also see further down, when building devx.

##110517 kms may need to be turned on... ALREADY DONE, SEE 110621 ABOVE
#XINTELMINOR=`grep '^xserver-xorg-video-intel' rootfs-complete/root/.packages/woof-installed-packages | cut -f 3 -d '|' | cut -f 2 -d '.'` #110517 ex: xserver-xorg-video-intel_2.13.0-6_i386.deb extract 13.
#[ ! $XINTELMINOR ] && XINTELMINOR=`grep '^xf86-video-intel' rootfs-complete/root/.packages/woof-installed-packages | cut -f 3 -d '|' | cut -f 2 -d '.'`
#[ ! $XINTELMINOR ] && XINTELMINOR=0
#if [ $XINTELMINOR -gt 9 ];then
# echo 'options i915 modeset=1' > rootfs-complete/etc/modprobe.d/i915.conf
# [ "`grep '^xserver-xorg-video-nouveau' rootfs-complete/root/.packages/woof-installed-packages`" != "" ] && echo 'options nouveau modeset=1' > rootfs-complete/etc/modprobe.d/nvidia.conf
# [ "`grep '^xf86-video-nouveau' rootfs-complete/root/.packages/woof-installed-packages`" != "" ] && echo 'options nouveau modeset=1' > rootfs-complete/etc/modprobe.d/nvidia.conf
# [ "`grep '^xserver-xorg-video-radeon' rootfs-complete/root/.packages/woof-installed-packages`" != "" ] && echo 'options radeon modeset=1' > rootfs-complete/etc/modprobe.d/radeon.conf
# [ "`grep '^xf86-video-radeon' rootfs-complete/root/.packages/woof-installed-packages`" != "" ] && echo 'options radeon modeset=1' > rootfs-complete/etc/modprobe.d/radeon.conf
#fi

#110523 override files from rootfs-skeleton/root/Choices/MIME-types, if rox pkg has older files...
cp -a -f ../rootfs-skeleton/root/Choices/MIME-types/* rootfs-complete/root/Choices/MIME-types/
#110620 do same for mime icons...
cp -a -f --remove-destination ../rootfs-skeleton/usr/local/apps/ROX-Filer/ROX/MIME/* rootfs-complete/usr/local/apps/ROX-Filer/ROX/MIME/

#130320 these days, i think give util-linux the preference. note, should really fix in e2fsprogs template.
##110701 possible lib clash between e2fsprogs and util-linux (i might use old util-linux pet). hack...
#if [ -e ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs/lib/libblkid.so.1 ];then
# if [ -e ../packages-${DISTRO_FILE_PREFIX}/util-linux/lib/libblkid.so.1 ];then
#  #give e2fsprogs libs preference...
#  cp -a -f --remove-destination ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs/lib/libblkid.so* rootfs-complete/lib/
#  cp -a -f --remove-destination ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs/lib/libuuid.so* rootfs-complete/lib/
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/util-linux_DEV/lib/lib*
# fi
#fi
#130320 i don't think any of this is required, as util-linux is later in the pkg-list so will override anyway.
# so, comment this out also!...
#if [ -e ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs/lib/libblkid.so.1 ];then
# if [ -e ../packages-${DISTRO_FILE_PREFIX}/util-linux/lib/libblkid.so.1 ];then
#  #give util-linux libs preference...
#  cp -a -f --remove-destination ../packages-${DISTRO_FILE_PREFIX}/util-linux/lib/libblkid.so* rootfs-complete/lib/
#  cp -a -f --remove-destination ../packages-${DISTRO_FILE_PREFIX}/util-linux/lib/libuuid.so* rootfs-complete/lib/
#  cp -a -f --remove-destination ../packages-${DISTRO_FILE_PREFIX}/util-linux/usr/lib/libblkid.so* rootfs-complete/lib/ 2>/dev/null
#  cp -a -f --remove-destination ../packages-${DISTRO_FILE_PREFIX}/util-linux/usr/lib/libuuid.so* rootfs-complete/lib/ 2>/dev/null
#  #so that the 'devx' will build ok...
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs_DEV/lib/libblkid.so* 2>/dev/null
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs_DEV/lib/libuuid.so* 2>/dev/null
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs_DEV/usr/lib/libblkid.so* 2>/dev/null
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs_DEV/usr/lib/libuuid.so* 2>/dev/null
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs_DEV/usr/lib/pkgconfig/blkid.pc
#  rm -f ../packages-${DISTRO_FILE_PREFIX}/e2fsprogs_DEV/usr/lib/pkgconfig/uuid.pc
# fi
#fi

#130111 fixed in 2createpackages...
##110726 mageia does something weird, puts all these in wrong place (see also devx further down)...
#if [ -d rootfs-complete/usr/bin/multiarch-i386-linux ];then
# cp -a -f --remove-destination rootfs-complete/usr/bin/multiarch-i386-linux/* devx/usr/bin/
# rm -rf rootfs-complete/usr/bin/multiarch-i386-linux
#fi

#110806 if yad installed, no zenity, make sure zenity is symlink to yad...
YAD="`find ./rootfs-complete/bin ./rootfs-complete/sbin ./rootfs-complete/usr/bin ./rootfs-complete/usr/sbin ./rootfs-complete/usr/local/bin -type f -name yad`"
if [ "$YAD" ];then
 ZENITY="`find ./rootfs-complete/bin ./rootfs-complete/sbin ./rootfs-complete/usr/bin ./rootfs-complete/usr/sbin ./rootfs-complete/usr/local/bin -name zenity`"
 if [ ! "$ZENITY"  ];then
  YADDIR="`dirname $YAD`"
  ln -s yad ${YADDIR}/zenity
 fi
fi

#110904 no, now done in pet pkg 'zz_wary52_fixup'...
##110901 i have experimented with building a wary "5.2pre" without libxcb.
##however, many existing apps want it, even though don't use it.
##this is a trick that satisfies them...
#if [ "`grep '^libxcb' rootfs-complete/root/.packages/woof-installed-packages`" = "" ];then
# if [ -e rootfs-complete/usr/X11R7/lib/libX11.so.6 ];then
#  ln -s libX11.so.6 rootfs-complete/usr/X11R7/lib/libxcb-xlib.so.0
#  ln -s libX11.so.6 rootfs-complete/usr/X11R7/lib/libxcb.so.1
# fi
#fi

#141207 make gtkdialog links more logical: 141213 fixed:
DLGFLGX=''; DLGFLG3=''; DLGFLG4=''
GTKDLGX="$(find rootfs-complete/usr/bin rootfs-complete/usr/sbin -maxdepth 1 -name gtkdialog | head -n 1)"
GTKDLG3="$(find rootfs-complete/usr/bin rootfs-complete/usr/sbin -maxdepth 1 -name gtkdialog3 | head -n 1)"
GTKDLG4="$(find rootfs-complete/usr/bin rootfs-complete/usr/sbin -maxdepth 1 -name gtkdialog4 | head -n 1)"
[ "$GTKDLGX" ] && DLGFLGX='X'
[ "$GTKDLG3" ] && DLGFLG3='3'
[ "$GTKDLG4" ] && DLGFLG4='4'
DLGFLGS="${DLGFLGX}${DLGFLG3}${DLGFLG4}"
case $DLGFLGS in
 X) #only have gtkdialog
  DLGPATH="$(dirname $GTKDLGX)"
  ln -s gtkdialog ${DLGPATH}/gtkdialog3
  ln -s gtkdialog ${DLGPATH}/gtkdialog4
 ;;
 X3)
  DLGPATH="$(dirname $GTKDLGX)"
  ln -s gtkdialog ${DLGPATH}/gtkdialog4
 ;;
 X4)
  DLGPATH="$(dirname $GTKDLGX)"
  ln -s gtkdialog ${DLGPATH}/gtkdialog3
 ;;
esac

#110822 some customisations provided by 01micko for Slacko...
#if [ "$DISTRO_BINARY_COMPAT" = "slackware" ];then
if [ "$DISTRO_FILE_PREFIX" = "slacko" ];then #130321
 if [ -f ../support/slacko/woof_base_hack  ];then
  echo "Running Slacko customization script ../support/slacko/woof_base_hack..."
  ../support/slacko/woof_base_hack
 fi
fi

#111123 put this into target, want to know if cross-build at 1st boot (see rc.update)...
[ -f ../WOOFMERGEVARS ] && cp -f ../WOOFMERGEVARS rootfs-complete/etc/rc.d/

#140127 multiarch fix for glib-compile-schemas...
#120522 precise puppy, seamonkey was crashing. needed /usr/share/glib-2.0/schemas/apps.gecko-mediaplayer.preferences,
# but also needs this compile operation...
# ***NOTICE*** cross-build, this will have to be executed at first boot...
#160927 always create the symlinks...
#if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then
 if [ -d rootfs-complete/usr/share/glib-2.0/schemas ];then
  [ -e rootfs-complete/usr/lib${xARCHDIR}/glib-2.0/glib-compile-schemas ] && ln -s ../lib${xARCHDIR}/glib-2.0/glib-compile-schemas rootfs-complete/usr/bin/glib-compile-schemas #140127
  [ -e rootfs-complete/usr/lib${xARCHDIR}/glib-2.0/glib-compile-resources ] && ln -s ../lib${xARCHDIR}/glib-2.0/glib-compile-resources rootfs-complete/usr/bin/glib-compile-resources #160927
  [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ] && [ -e rootfs-complete/usr/bin/glib-compile-schemas ] && chroot rootfs-complete /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas
 fi
 #120523 seems need this too... 140125...
 if [ -d rootfs-complete/usr/lib${xARCHDIR}/gio/modules ];then
  [ -e rootfs-complete/usr/lib${xARCHDIR}/glib-2.0/gio-querymodules ] && ln -s ../lib${xARCHDIR}/glib-2.0/gio-querymodules rootfs-complete/usr/bin/gio-querymodules #140127
  [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ] && [ -e rootfs-complete/usr/bin/gio-querymodules ] && chroot rootfs-complete /usr/bin/gio-querymodules /usr/lib${xARCHDIR}/gio/modules
 fi
#fi

#120618 raspi debian squeeze, links as main browser, helpsurfer html viewer, gtkmoz missing...
#120620 problem, helpsurfer cannot display /usr/share/doc/index.html, so do not point gtkmoz at basichtmlviewer...
if [ ! -e rootfs-complete/usr/local/bin/gtkmoz ];then
 ln -s defaultbrowser rootfs-complete/usr/local/bin/gtkmoz
fi

#120704 some constraints in a small system...
if [ "$SDFLAG" != "" ];then
 #ask if want to load swap partition/file...
 echo
 echo "Puppy will normally load a swap partition or swap file if it/they exist,
however you can choose to ignore them and not load them at bootup."
 echo -n "Press ENTER key to load swap at bootup, any key otherwise: "
 read wantswap
 if [ "$wantswap" != "" ];then
  echo "BOOT_DISABLESWAP='yes'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #read by /etc/rc.d/rc.sysinit
  echo "...BOOT_DISABLESWAP='yes' in /etc/rc.d/BOOTCONSTRAINED, read by rc.sysinit."
 fi
 #this also reduces writes to flash card... um, relatime seems to be the default anyway... 120707 change to noatime...
 echo "BOOT_ATIME='noatime'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #rc.sysinit will remount / with 'relatime' (constrains updating access time). 120707 change to noatime.
 #this file in rootfs-skeleton, overwrite...
 echo 'none          /proc        proc     defaults,noatime               0 0
none          /sys         sysfs    defaults,noatime               0 0
none          /dev/pts     devpts   gid=2,mode=620,noatime         0 0
shmfs         /dev/shm     tmpfs    defaults,noatime      0 0' > rootfs-complete/etc/fstab
 echo "BOOT_DIRTYWRITE='1500'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #defer writing to disk. refer: http://www.lesswatts.org/tips/disks.php
 echo "BOOT_SCHEDULER='deadline'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #my kernel defaults to 'cfq', change to 'deadline'. refer: http://tombuntu.com/index.php/2008/09/04/four-tweaks-for-using-linux-with-solid-state-drives/
 #echo "BOOT_QUICKSETUP='quickarm'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120708 leaves out X config frame. 120714 removed.
 echo "BOOT_UDEVDCHILDREN='1'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120709 is this a good idea? append --children-max=1 to udevd in rc.sysinit.
 echo "BOOT_BOARD='${BOOT_BOARD}'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120714 read by quicksetup.
 echo "BOOT_DISABLEXORGWIZARD='yes'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120723 read in xwin, also xorgwizard. also see below.
 echo "BOOT_DISABLEALSACONF='yes'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120724 'alsaconf' does not work on arm boards.
fi

#120723 code moved down, add BOOT_DISABLEXORGWIZARD test...
#110413 variable DISTRO_XORG_AUTO in /etc/DISTRO_SPECS, see also /usr/bin/xwin
autoflag='no'
if [ "$BOOT_DISABLEXORGWIZARD" != "yes" ];then
 if [ "$DISTRO_XORG_AUTO" ];then
  autoflag="$DISTRO_XORG_AUTO"
 else
  if vercmp "$XORGVER" ge "1.7.0";then #110621
   echo
   echo "Do you want Xorg to start automatically at first boot (or at 'pfix=ram'"
   echo "kernel boot param) or run Xorg Wizard? The latter has been the case for"
   echo "earlier puppies. Automatic startup of X usually works, though in some"
   echo "cases may choose the wrong monitor resolution or driver -- which can be"
   echo "fixed by running Xorg Wizard afterward."
   echo -n "Press ENTER only for automatic Xorg: "
   read xorgauto
   [ "$xorgauto" = "" ] && autoflag='yes'
  fi
 fi
fi
if [ "`grep '^DISTRO_XORG_AUTO' rootfs-complete/etc/DISTRO_SPECS`" = "" ];then #110621
 echo "DISTRO_XORG_AUTO='${autoflag}'" >> rootfs-complete/etc/DISTRO_SPECS
else
 REGEXauto="s%^DISTRO_XORG_AUTO.*%DISTRO_XORG_AUTO='${autoflag}'%"
 sed -i -e "$REGEXauto" rootfs-complete/etc/DISTRO_SPECS
fi


#120709 debian squeeze has /usr/share/misc/pci.ids, usb.ids, which confuses some apps, create symlinks...
if [ ! -e rootfs-complete/usr/share/pci.ids ];then
 if [ -e rootfs-complete/usr/share/misc/pci.ids ];then
  ln -s misc/pci.ids rootfs-complete/usr/share/pci.ids
 fi
fi
if [ ! -e rootfs-complete/usr/share/usb.ids ];then
 if [ -e rootfs-complete/usr/share/misc/usb.ids ];then
  ln -s misc/usb.ids rootfs-complete/usr/share/usb.ids
 fi
fi

#120830 my hunspell-en-us pet has pinstall.sh that creates symlinks of en_US.aff and en_US.dic
#from seamonkey and firefox. however, need to do this thoroughly...
#note: see also woof rootfs-skeleton/usr/share/doc/langpack-template (used by momanager).
if [ -d rootfs-complete/usr/share/hunspell ];then
 for ONEHUN in `find rootfs-complete/usr/share/hunspell -mindepth 1 -maxdepth 1 -type f -name '*.dic' -o -name '*.aff' | tr '\n' ' '`
 do
  HUNBASE="`basename $ONEHUN`"
  DICTDIRS="`find rootfs-complete/usr/lib -mindepth 2 -maxdepth 2 -type d -name dictionaries | tr '\n' ' '`"
  for ONEDICTDIR in $DICTDIRS
  do
   [ ! -e ${ONEDICTDIR}/${HUNBASE} ] && ln -s ../../../share/hunspell/${HUNBASE} ${ONEDICTDIR}/${HUNBASE}
  done
 done
fi

#121022 may need this (see below similar code if python in devx)...
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" = "" ];then
 [ -e rootfs-complete/usr/bin/python2.5 ] && ln -s python2.5 rootfs-complete/usr/bin/python 2>/dev/null
 [ -e rootfs-complete/usr/bin/python2.6 ] && ln -s python2.6 rootfs-complete/usr/bin/python 2>/dev/null
 [ -e rootfs-complete/usr/bin/python2.7 ] && ln -s python2.7 rootfs-complete/usr/bin/python 2>/dev/null
fi

#121203 bacon hug gui apps need some .so libs, for example libgtk-x11-2.0.so,
#(refer /usr/sbin/welcome1stboot.bac), however these are only in the devx.
#so need to create them... 161231 fix lib path...
#note, i think this problem only in wary/racy, as gtk template creates these symlinks.
if [ ! -e rootfs-complete/usr/lib${xARCHDIR}/libgtk-x11-2.0.so ];then
 FNDGTKLIB="$(find rootfs-complete/usr/lib${xARCHDIR}/ -mindepth 1 -maxdepth 1 -name 'libgtk-x11-2.0.so.[0-9]' | head -n 1 | rev | cut -f 1 -d '/' | rev)"
 [ "$FNDGTKLIB" ] && ln -s $FNDGTKLIB rootfs-complete/usr/lib${xARCHDIR}/libgtk-x11-2.0.so #2> /dev/null
fi
#i'll do the same for libgdk-x11-2.0.so ...
if [ ! -e rootfs-complete/usr/lib${xARCHDIR}/libgdk-x11-2.0.so ];then
 FNDGDKLIB="$(find rootfs-complete/usr/lib${xARCHDIR}/ -mindepth 1 -maxdepth 1 -name 'libgdk-x11-2.0.so.[0-9]' | head -n 1 | rev | cut -f 1 -d '/' | rev)"
 [ "$FNDGTKLIB" ] && ln -s $FNDGTKLIB rootfs-complete/usr/lib${xARCHDIR}/libgdk-x11-2.0.so #2> /dev/null
fi

#121212 puinstall.sh was not getting removed...
[ -f rootfs-complete/puninstall.sh ] && rm -f rootfs-complete/puninstall.sh

#130326 now permanently 96... 130327 reintroduce a choice...
##130129 /root/.Xresources has dpi set to 78 in all prior pups. In future, might prefer 96...
#141206 now have DEFAULT_THEME_XORG_TEXT_DPI (usually =96).
if [ "$DEFAULT_THEME_XORG_TEXT_DPI" != "" ];then #141206
 dpisizeflag="$DEFAULT_THEME_XORG_TEXT_DPI"
else
 DPILINE="$(grep '^Xft\.dpi:' rootfs-complete/root/.Xresources)"
 DPIVALUE=$(echo -n "$DPILINE" | tr '\t' ' ' | tr -s ' ' | cut -f 2 -d ' ')
 echo
 echo "rootfs-complete/root/.Xresources has this line:"
 echo "$DPILINE"
 echo "which sets the displayed size of fonts on the screen (but not bitmap fonts)."
 DPINEXT1=`expr $DPIVALUE + 6`
 DPINEXT2=`expr $DPINEXT1 + 6`
 echo "To accept this size, just press ENTER key."
 echo "However, if you would like fonts to display bigger on the screen, type in
a value now. The value should be in steps of 6, for example ${DPINEXT1} or ${DPINEXT2}.
The default size is ${DPIVALUE}, you might try the next-up, ${DPINEXT1}."
 echo -n "Press ENTER key for '${DPIVALUE}' dpi, or type a value: "
 read dpisizeflag
fi
if [ "$dpisizeflag" ];then #130512 scsijon: fix size...
 fsPTN='s%^Xft\.dpi:.*%Xft.dpi: '"${dpisizeflag}%"
 sed -i -e "$fsPTN" rootfs-complete/root/.Xresources
 echo "...ok, dpi now ${dpisizeflag}"
fi

#130226 wary: /usr/bin/X was missing...
if [ ! -e rootfs-complete/usr/bin/X ];then
 if [ -e rootfs-complete/usr/bin/Xorg -o -h rootfs-complete/usr/bin/Xorg ];then
  ln -s Xorg rootfs-complete/usr/bin/X
 fi
fi

#130601 optional, run internet apps as user 'spot'...
echo
echo "Puppy is normally run as the 'administrator' (root) user, though there is
also 'fido' which is not currently very mature.
The structure of Puppy is such that we consider root to be safe (with a full
disclaimer of any responsibility if anything does go wrong), but there is a
compromise, to run as root but to run Internet apps as user 'spot'."
if [ -e rootfs-complete/usr/bin/seamonkey ];then #161231
 echo
 echo "Type any character then ENTER if you want SeaMonkey to run as spot,
or just ENTER not to. Note, in a running 'Puppy Menu->System->Login & Security
Manager' can be used to enable or disable running as spot."
 echo
 echo -n "ENTER only to not run SeaMonkey as spot: "
 read SPOTAPPS
 if [ "$SPOTAPPS" ];then
  ../support/setup-spot 'seamonkey=true' #130604
  echo '...ok, SeaMonkey will run as spot.'
 else
  echo 'seamonkey=false' > rootfs-complete/root/.spot-status #130604 so that an unticked checkbox will display in loginmanager.
  echo '...ok, SeaMonkey will not run as spot.'
 fi
fi
#130720 add QtWeb... 130723 add opera... 130821 add firefox... 140215 chromium...
for AINTERNETAPP in chromium QtWeb opera firefox
do
 [ ! -e rootfs-complete/usr/bin/${AINTERNETAPP} ] && continue
 echo
 echo "Type any character then ENTER if you want ${AINTERNETAPP} to run as spot,
or just ENTER not to. Note, in a running Puppy 'Menu->System->Login & Security
Manager' can be used to enable or disable running as spot."
 echo
 echo -n "ENTER only to not run ${AINTERNETAPP} as spot: "
 read SPOTAPPS
 if [ "$SPOTAPPS" ];then
  ../support/setup-spot "${AINTERNETAPP}=true"
  echo "...ok, ${AINTERNETAPP} will run as spot."
 else
  echo "${AINTERNETAPP}=false" >> rootfs-complete/root/.spot-status #so that an unticked checkbox will display in loginmanager.
  echo "...ok, ${AINTERNETAPP} will not run as spot."
 fi
done
#setup-spot is also called by the Login & Security Manager in running Puppy...
cp -f ../support/setup-spot rootfs-complete/usr/sbin/

#130618 code above sets DEVTMPFSFLG...
#130612 if kernel has CONFIG_DEVTMPFS=y (and CONFIG_DEVTMPFS_MOUNT=y) then empty /dev...
if [ $DEVTMPFSFLG -ne 0 ];then
 rm -rf rootfs-complete/dev/*
 sed -i -e 's%^DEVTMPFSFLG=.*%DEVTMPFSFLG=2%' rootfs-complete/etc/rc.d/rc.sysinit
fi

#130725 want Menu -> Help to use secondary browser... 130726 fix...
#code to detect dual browsers, taken out of /usr/sbin/delayedrun...
ALTBROWSER=''
#the pinstall.sh script in qtweb and opera pets create separate desktop icon if there is another major browser...
[ "`grep 'QtWeb' rootfs-complete/root/Choices/ROX-Filer/PuppyPin`" != "" ] && ALTBROWSER='QtWeb'
[ "`grep 'opera' rootfs-complete/root/Choices/ROX-Filer/PuppyPin`" != "" ] && ALTBROWSER='opera'
if [ "$ALTBROWSER" != "" ];then
 MAINBROWSER="`grep '^exec' rootfs-complete/usr/local/bin/defaultbrowser | tr '\t' ' ' | tr -s ' ' | cut -f 2 -d ' '`"
 if [ "$MAINBROWSER" != "$ALTBROWSER" ];then
  echo '#!/bin/sh' > rootfs-complete/usr/local/bin/defaulthtmlviewer
  echo "exec ${ALTBROWSER} \"\$@\"" >> rootfs-complete/usr/local/bin/defaulthtmlviewer
  chmod 755 rootfs-complete/usr/local/bin/defaulthtmlviewer
 fi
fi

#140117 files imported from quirky6 post-woof, may have these postfixes...
#141205 currently only have rootfs-skeleton/usr/bin/seamonkeyQNEW. removed busyboxQSTATIC ...no, leave, see check below...
for AQ6 in `find rootfs-complete -maxdepth 5 -type f -name '*QSTATIC' | tr '\n' ' '`
do
 QNAME="`basename $AQ6 QSTATIC`"
 QPATH="`dirname $AQ6`"
 if [ -e ${QPATH}/${QNAME} ];then #141205
  if [ "$(file ${QPATH}/${QNAME} | grep 'statically linked')" != "" ];then
   #the $QNAME is already static, so don't replace it. remove unecessary file:
   rm -f ${AQ6}
  else
   rm -f ${QPATH}/${QNAME}
   mv -f $AQ6 ${QPATH}/${QNAME} #ex: cpSTATIC renamed to cp.
  fi
 fi
done
for AQ6 in `find rootfs-complete -maxdepth 5 -type f -name '*QNEW' | tr '\n' ' '`
do
 QNAME="`basename $AQ6 QNEW`"
 QPATH="`dirname $AQ6`"
 [ -e ${QPATH}/${QNAME} ] && rm -f ${QPATH}/${QNAME}
 mv -f $AQ6 ${QPATH}/${QNAME} #ex: cpQSTATIC renamed to cp.
done

if [ "$BUILD_CHOICE_MERGE_DEVX" != "yes" ];then #150814
 #140124 there may be some stray .a files, move them to devx... 161231 fix...
 [ "$xARCHDIR" == "64" ] && EXTRALIBS="rootfs-complete/lib${xARCHDIR} rootfs-complete/usr/lib${xARCHDIR}"
 for ASO in `find rootfs-complete/usr/lib rootfs-complete/lib ${EXTRALIBS} -name '*.a' | sed -e 's%rootfs-complete/%%' | tr ' ' 'x' | tr '\n' ' '`
 do
  ADIR="`dirname $ASO`"
  ANAME="`basename $ASO`"
  if [ -e rootfs-complete/${ADIR}/${ANAME} ];then
   mkdir -p devx/${ADIR}
   mv -f rootfs-complete/${ADIR}/${ANAME} devx/${ADIR}/
  fi
 done
fi
sync

#140125 disable gtk dependency on a stupid gnome daemon... do always, in case future install gtk3...
#ref: http://forums.gentoo.org/viewtopic-t-947210-start-0.html
#if [ -d rootfs-complete/usr/lib${xARCHDIR}/gtk-3.0 ];then
 mkdir -p rootfs-complete/etc/profile.d
 echo 'export NO_AT_BRIDGE=1' > rootfs-complete/etc/profile.d/gtk3
#fi

#140202 set default dirs into /file...
###WORK IN PROGRESS###
#hmmm, rox cannot change "home directory", but, can do this...
sed -i -e 's%label="file"%label="file" args="--dir=/file"%' rootfs-complete/root/Choices/ROX-Filer/PuppyPin
if [ -d rootfs-complete/root/.mozilla/seamonkey ];then
 SMPREFS="$(find rootfs-complete/root/.mozilla/seamonkey -type f -name 'prefs.js' | head -n 1)"
 [ "$SMPREFS" ] && sed -i -e 's%/root/my-documents%/file/downloads%' -e 's%/root/Downloads%/file/downloads%' ${SMPREFS}
fi

#140215 chromium needs some libs that are in seamonkey, make sure all symlinks exist. 161231 fix...
SMPATH=""
[ -e rootfs-complete/usr/lib/seamonkey ] && SMPATH='usr/lib'
[ -e rootfs-complete/usr/lib64/seamonkey ] && SMPATH='usr/lib64' #slackware pkg.
if [ "$SMPATH" ];then
 for ALIBLINK in libmozsqlite3.so libnspr4.so libnss3.so  libnssckbi.so libnssutil3.so libplc4.so libplds4.so libsmime3.so libsoftokn3.so libssl3.so
 do
  if [ ! -e rootfs-complete/${SMPATH}/${ALIBLINK} ];then
   ln -s seamonkey/${ALIBLINK} rootfs-complete/${SMPATH}/${ALIBLINK}
  fi
 done
fi

#140215 chromium looks for executable 'lsb_release' but this is a python3 script,
#so have created my own script, see rootfs-skeleton/usr/bin
#also create this, maybe debian/ubuntu apps want it...
echo "LSB_VERSION=n/a
DISTRIB_ID=Quirky
DISTRIB_RELEASE=${DISTRO_VERSION}
DISTRIB_CODENAME=${DISTRO_FILE_PREFIX}
DISTRIB_DESCRIPTION=\"${DISTRO_NAME}\"" > rootfs-complete/etc/lsb-release

#141207 'planner' pet installs /var/scrollkeeper, but 'scrollkeeper' pkg has same stuff in /var/lib
#(which I have put into the devx). hope not really needed at runtime...
if [ -d rootfs-complete/var/scrollkeeper ];then
 SKFND=0
 [ -d ../packages-${DISTRO_FILE_PREFIX}/scrollkeeper/var/scrollkeeper ] && SKFND=1
 [ -d ../packages-${DISTRO_FILE_PREFIX}/scrollkeeper_DEV/var/scrollkeeper ] && SKFND=1
 if [ $SKFND -eq 0 ];then
  #so, scrollkeeper has that info elsewhere, so delete this planner stuff
  rm -rf rootfs-complete/var/scrollkeeper
 fi
fi

#150224 moved up... 170731 removed...
##maybe need link to release notes...
##note, removed some code from rootfs-skeleton/pinstall.sh
#if [ ! -f rootfs-complete/usr/share/doc/release-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.htm ];then
# RELNOTE="$(ls -1 rootfs-complete/usr/share/doc/release-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}*.htm 2>/dev/null | rev | cut -f 1 -d '/' | rev | sort --key=3 --field-separator='-' --version-sort | tail -n 1)" #161022
# [ ! "$RELNOTE" ] && RELNOTE="$(ls -1 rootfs-complete/usr/share/doc/release-${DISTRO_FILE_PREFIX}*.htm 2>/dev/null | rev | cut -f 1 -d '/' | rev | sort --key=3 --field-separator='-' --version-sort | tail -n 1)"
# [ ! "$RELNOTE" ] && RELNOTE="$(ls -1 rootfs-complete/usr/share/doc/release-Quirky*.htm | rev | cut -f 1 -d '/' | rev | sort --key=3 --field-separator='-' --version-sort | tail -n 1)"
# RELNOTEVER="$(echo -n "$RELNOTE" | cut -f 3 -d '-' | rev | cut -f 2- -d '.' | rev)"
# ln -s ${RELNOTE} rootfs-complete/usr/share/doc/release-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.htm
#fi

if [ -d rootfs-complete/defaults ];then #150725 left behind by busybox.
 rm -rf rootfs-complete/defaults
fi

if [ "$BUILD_CHOICE_MERGE_DEVX" == "yes" ];then #150725
 #there is some stuff did down when building devx, now do it here...
 if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|')" != "" ];then
  [ -e rootfs-complete/usr/bin/python2.7 ] && ln -s python2.7 rootfs-complete/usr/bin/python 2>/dev/null
  [ -e rootfs-complete/usr/bin/python2.6 ] && ln -s python2.6 rootfs-complete/usr/bin/python 2>/dev/null
  [ -e rootfs-complete/usr/bin/python2.5 ] && ln -s python2.5 rootfs-complete/usr/bin/python 2>/dev/null
 fi

 rm -f rootfs-complete/usr/lib/mozilla/plugins/*.a 2>/dev/null #maybe .a, .la files in here.
 rm -f rootfs-complete/usr/lib/mozilla/plugins/*.la 2>/dev/null

 #there's unwanted docs here, move them out...
 rm -rf ../packages-${DISTRO_FILE_PREFIX}/leftovers_DOC 2>/dev/null
 mkdir -p ../packages-${DISTRO_FILE_PREFIX}/leftovers_DOC/usr/share
 mv rootfs-complete/usr/share/doc-base ../packages-${DISTRO_FILE_PREFIX}/leftovers_DOC/usr/share/ 2>/dev/null
 mv rootfs-complete/usr/share/man ../packages-${DISTRO_FILE_PREFIX}/leftovers_DOC/usr/share/ 2>/dev/null
 
 ##hack, this symlink needed...
 #if [ -d rootfs-complete/usr/X11R7/include/xorg ];then
 # [ ! -e rootfs-complete/usr/include/xorg ] && ln -s ../X11/include/xorg rootfs-complete/usr/include/xorg
 #fi
 
 #remove overhead of this script running every bootup...
 mkdir -p rootfs-complete/etc/profile.d
 rm -f rootfs-complete/etc/profile.d/pkgconfig* 2>/dev/null #improve...
 DEVXLIBnorm=''; DEVXLIB64=''; DEVXUSRLIB64=''
 [ -d rootfs-complete/lib ] && DEVXLIBnorm='rootfs-complete/lib'
 [ -d rootfs-complete/lib64 ] && [ ! -h rootfs-complete/lib64 ] && DEVXLIB64='rootfs-complete/lib64'
 [ -d rootfs-complete/usr/lib64 ] && [ ! -h rootfs-complete/usr/lib64 ] && DEVXUSRLIB64='rootfs-complete/usr/lib64'
 PKG_CONFIG_PATH="`find ${DEVXLIBnorm} ${DEVXLIB64} ${DEVXUSRLIB64} rootfs-complete/usr/share rootfs-complete/usr/lib rootfs-complete/opt rootfs-complete/usr/local/lib -type d -name pkgconfig | sed -e 's%rootfs\-complete%%' | tr '\n' ':' | sed -e 's%:$%%'`"
 echo "export PKG_CONFIG_PATH='${PKG_CONFIG_PATH}'" > rootfs-complete/etc/profile.d/pkgconfig
 
 #maybe stray /install dir from slackware pkgs...
 rm -rf rootfs-complete/install 2>/dev/null
 [ -f rootfs-complete/pet.specs ] && rm -f rootfs-complete/pet.specs
 
 #think want glibc scsi headers in usr/include/scsi...
 if [ -d rootfs-complete/usr/include/scsi-GLIBC ];then
  #probably have kernel scsi headers in usr/include/scsi, fix...
  cp -a -f rootfs-complete/usr/include/scsi-GLIBC/* rootfs-complete/usr/include/scsi/
 fi
 
 #mageia1 python puts 30python.csh here...
 rm -f rootfs-complete/etc/profile.d/*.csh
 
 #140122 not sure about this...
 if [ "$(echo -n "$xARCHDIR" | cut -c 1)" == "/" ];then #150102
  #CPATH works any language, replaces C_INCLUDE_PATH and CPLUS_INCLUDE_PATH
  echo "export CPATH=/usr/include/${ARCHDIR}" > rootfs-complete/etc/profile.d/archinc
 fi
 
 #140123 'man-1.6f' binary pkg from T2 has bug, everything in /usr/usr...
 if [ -d rootfs-complete/usr/usr ];then
  cp -a -f --remove-destination rootfs-complete/usr/usr/bin/* rootfs-complete/usr/bin/ 2>/dev/null
  cp -a -f --remove-destination rootfs-complete/usr/usr/sbin/* rootfs-complete/usr/sbin/ 2>/dev/null
  cp -a -f --remove-destination rootfs-complete/usr/usr/share/* rootfs-complete/usr/share/ 2>/dev/null
  sync
  rm -rf rootfs-complete/usr/usr
 fi
 
 #140122 seamonkey compile, unable to find gdkconfig.h, glibconfig.h... (note, i actually put these in /usr/include, but this should work also...)
 if [ "$xARCHDIR" ];then #150102 fix
  for AINC in `find rootfs-complete/usr/lib${xARCHDIR} -type d -name 'include' | sed -e "s%rootfs-complete/usr/%%" | tr '\n' ' '` #ex: glib-2.0/include
  do
   mkdir -p rootfs-complete/usr/${AINC} #ex: rootfs-complete/usr/lib/glib-2.0/include
   xAINC="$(echo -n "$AINC" | sed -e 's%lib${xARCHDIR}/%%')"
   cp -a -f --remove-destination rootfs-complete/usr/${AINC}/*.h rootfs-complete/usr/lib/${xAINC}/ 2>/dev/null
  done
 fi
 
 #141017 quirky unicorn, compile seamonkey needs /usr/sbin/i686-linux-gnu-gcc, but only have ...-gcc-4.6 symlink.
 GCCLINK="$(find rootfs-complete/usr/bin -mindepth 1 -maxdepth 1 -type l -name '*-linux-gnu-gcc-*' | head -n 1)"
 if [ "$GCCLINK" ];then
  xxLINK="$(echo -n "$GCCLINK" | rev | cut -f 2- -d '-' | rev)"
  #xxBASE="$(basename $GCCLINK)"
  #ln -s $xxBASE $xxLINK
  [ ! -e $xxLINK ] && cp -a $GCCLINK $xxLINK
 fi
 #these also...
 GCCLINK="$(find rootfs-complete/usr/bin -mindepth 1 -maxdepth 1 -type l -name '*-linux-gnu-cpp-*' | head -n 1)"
 if [ "$GCCLINK" ];then
  xxLINK="$(echo -n "$GCCLINK" | rev | cut -f 2- -d '-' | rev)"
  [ ! -f $xxLINK ] && cp -a $GCCLINK $xxLINK
 fi
 GCCLINK="$(find rootfs-complete/usr/bin -mindepth 1 -maxdepth 1 -type l -name '*-linux-gnu-g++-*' | head -n 1)"
 if [ "$GCCLINK" ];then
  xxLINK="$(echo -n "$GCCLINK" | rev | cut -f 2- -d '-' | rev)"
  [ ! -e $xxLINK ] && cp -a $GCCLINK $xxLINK
 fi
 
 #141019 quirky unicorn has lots of /usr/share/doc/*-dev folders...
 DOCDEVDIRS="$(find rootfs-complete/usr/share/doc -mindepth 1 -maxdepth 1 -type d -name '*-dev')"
 if [ "$DOCDEVDIRS" ];then
  echo
  echo 'Deleting rootfs-complete/usr/share/doc/*-dev folders...'
  for ADDD in $DOCDEVDIRS
  do
   [ -d $ADDD ] && rm -rf ./$ADDD
  done
 fi
 #also clean out more files...
 DOCDEVFILES="$(find rootfs-complete/usr/share/doc -type f -name '*.gz')"
 if [ "$DOCDEVFILES" ];then
  echo
  echo 'Deleting rootfs-complete/usr/share/doc/*/*.gz files...'
  for ADDF in $DOCDEVFILES
  do
   [ -f $ADDF ] && rm -f ./$ADDF
  done
 fi
 DOCDEVFILES="$(find rootfs-complete/usr/share/doc -type f -name 'copyright')"
 if [ "$DOCDEVFILES" ];then
  echo
  echo 'Deleting rootfs-complete/usr/share/doc/*/copyright files...'
  for ADDF in $DOCDEVFILES
  do
   [ -f $ADDF ] && rm -f ./$ADDF
  done
 fi

 #probably a good idea. quirky devx pet 6.1 is 236MB (sfs is 135MB --xz'ed), after removing .a's is 198MB...
 for ASO in `find rootfs-complete -name '*.so' | tr ' ' 'x' | tr '\n' ' '`
 do
  [ "`echo -n "$ASO" | grep -i 'qt'`" != "" ] && continue
  [ "`echo -n "$ASO" | grep -i 'mm'`" != "" ] && continue
  ADIR="`dirname $ASO`"
  ANAME="`basename $ASO .so`"
  
  #150925 want to leave these .a's alone (from glibc)...
  [ "$ANAME" == "libc" ] && continue
  [ "$ANAME" == "libanl" ] && continue
  [ "$ANAME" == "libbrokenLocale" ] && continue
  [ "$ANAME" == "libc_nonshared" ] && continue
  [ "$ANAME" == "libcrypt" ] && continue
  [ "$ANAME" == "libdl" ] && continue
  [ "$ANAME" == "libm" ] && continue
  [ "$ANAME" == "libnsl" ] && continue
  [ "$ANAME" == "libresolv" ] && continue
  [ "$ANAME" == "librt" ] && continue
  [ "$ANAME" == "libutil" ] && continue
  [ "$ANAME" == "libpthread" ] && continue
  
  [ -e ${ADIR}/${ANAME}.a ] && rm -f ${ADIR}/${ANAME}.a
 done
 sync

 #140201 deleting the .a, leaves some broken links behind. ex in quirky tahr /lib/i386-linux-gnu/libcurses.a -> libncurses.a
 for AA in `find rootfs-complete -type l -name '*.a' | tr ' ' 'x' | tr '\n' ' '`
 do
  ALINK="`readlink $AA`"
  [ ! "$ALINK" ] && continue
  AL1="${ALINK:0:1}"
  if [ "$AL1" = "/" ];then
   ALSPEC="rootfs-complete${ALINK}"
  else
   ALDIR="`dirname $AA`"
   ALSPEC="${ALDIR}/${ALINK}"
  fi
  [ ! -e ${ALSPEC} ] && rm -f $AA 2>/dev/null
 done
 
 #140201 this is a hack...
 #quirky tahr, devx has /usr/bin/man, but main f.s. has man as a symlink to script pman...
 if [ -e rootfs-complete/usr/bin/man ];then
  rm -f rootfs-complete/usr/bin/man
  ln -s pman rootfs-complete/usr/bin/man #so as to restore symlink.
 fi
fi

#150726 want a desktop readme icon...
if [ "$BUILD_CHOICE_README_DEV_DESK_ICON" == "yes" ];then
 #see 7build-live-cd in woofQ, 'save' icon does not conflict with this one.
 #see appinventor PET, 'ai2' icon does not conflict with this one. x=768 y=224
 #see android-studio PET, 'AStudio' icon does not conflict. x=832 y=224
 #qtcreator icon using x=768 y=320
 #desktop icons vertical spacing is 96, horiz spacing is 64.
 sed -i -e 's%^</pinboard>$%  <icon x="704" y="224" label="README">/usr/sbin/app-dev-setup-readme.sh</icon>\n</pinboard>%' rootfs-complete/root/Choices/ROX-Filer/PuppyPin
 #also, put icon...
 sed -i -e 's%^</special-files>$%  <rule match="/usr/sbin/app-dev-setup-readme.sh">\n    <icon>/usr/local/lib/X11/pixmaps/info48.xpm</icon>\n  </rule>\n</special-files>%' rootfs-complete/root/Choices/ROX-Filer/globicons
fi

#150727
#repacking .jar files with zero compression will allow them to be xz'ed smaller.
echo
echo "Do you want to repack .jar files with zero compression?"
echo -n "ENTER only for no: "
read repackjars
if [ "$repackjars" != "" ];then
 cp -a ../support/uncompress-jar-files ./
 ./uncompress-jar-files
fi

#150928
if [ -d rootfs-complete/usr/share/X11/app-defaults ];then
 if [ ! -h rootfs-complete/usr/share/X11/app-defaults ];then
  mkdir -p rootfs-complete/etc/X11/app-defaults
  touch rootfs-complete/etc/X11/app-defaults/* 2>/dev/null
  cp -a -u rootfs-complete/usr/share/X11/app-defaults/* rootfs-complete/etc/X11/app-defaults/
  rm -rf rootfs-complete/usr/share/X11/app-defaults
  ln -s /etc/X11/app-defaults rootfs-complete/usr/share/X11/app-defaults
 fi
fi

if [ "$BUILD_CHOICE_MERGE_DEVX" != "yes" ];then #151113 werewolf, some stray files here
 if [ -d rootfs-complete/usr/include ];then
  mkdir -p devx/include
  cp -a -f --remove-destination rootfs-complete/usr/include/* devx/include/
  sync
  rm -rf rootfs-complete/usr/include
 fi
fi

#161012 raspberry pi hardware acceleration. note, /opt/vc may be in sd image file. 161020 moved down.
[ "$BUILD_CHOICE_BOARD" == "raspi" ] && echo 'export PATH=${PATH}:/opt/vc/bin' > rootfs-complete/etc/profile.d/vc

#161230 offer to dump llvm_DEV
if [ -d ../packages-${DISTRO_FILE_PREFIX}/llvm_DEV/usr ];then
 echo
 echo 'Do you want to delete llvm_DEV?'
 echo -n 'Enter only to keep it: '
 read keepit
 if [ "$keepit" == "" ];then
  echo '...keeping llvm_DEV'
 else
  rm -rf ../packages-${DISTRO_FILE_PREFIX}/llvm_DEV
  mkdir ../packages-${DISTRO_FILE_PREFIX}/llvm_DEV
  echo '...dumped llvm_DEV'
 fi
fi

#170107 offer to disable entries in rootfs-complete/root/Startup
echo
echo 'If you would like to disable any tray applets in rootfs-complete/root/Startup.
do so now. Maybe for testing, disable bluepup_tray for now.
If you would like to disable any daemons in /etc/init.d, do so now.'
echo -n 'Then press ENTER to continue: '
read keepgoing

#170224 for security reasons, do not turn on these daemons by default.
if [ "$BUILD_CHOICE_INITD_DAEMON_DEFAULT_OFF" ];then
 for aDAEMON in ${BUILD_CHOICE_INITD_DAEMON_DEFAULT_OFF}
 do
  [ -x rootfs-complete/etc/init.d/${aDAEMON} ] && chmod 644 rootfs-complete/etc/init.d/${aDAEMON}
 done
fi

#170511 'ca-certificates' package...
if [ -f rootfs-complete/usr/sbin/update-ca-certificates ];then
 if [ "$WOOF_HOSTARCH" == "$WOOF_TARGETARCH" ];then
  chroot rootfs-complete /usr/sbin/update-ca-certificates
 else
  echo "Note, need to run /usr/sbin/update-ca-certificates in rc.sysinit at first bootup."
 fi
fi

#170515 oe, usr/lib/gconv/gconv-modules.cache is missing...
if [ ! -f rootfs-complete/usr/lib${xARCHDIR}/gconv/gconv-modules.cache ];then
 if [ "$WOOF_HOSTARCH" == "$WOOF_TARGETARCH" ];then
  chroot rootfs-complete /usr/sbin/iconvconfig
 else
  echo "Note, rootfs-complete/usr/lib${xARCHDIR}/gconv/gconv-modules.cache missing
need to create it rc.sysinit at first bootup."
 fi
fi
sync

#170716 set in file build-choices (which will be /root/.packages/build-choices in running distro)
#ref: /usr/sbin/savesession, /usr/local/install_quirky/install-funcs
if [ "$BUILD_CHOICE_FRUGAL_SAVE_ASK" == "true" ];then
 echo -n "$BUILD_CHOICE_FRUGAL_SAVE_ASK" > rootfs-complete/var/local/frugal-save-ask-flag
fi

#161210 now have boot/easyinit
cd ../boot
[ -d easyinit-populated ] && rm -rf easyinit-populated
cp -a easyinit easyinit-populated
#currently don't need some of the binaries (that i compiled in buildroot)...
[ -f easyinit-populated/bin/coreutils ] && rm -f easyinit-populated/bin/coreutils
[ -f easyinit-populated/bin/mksquashfs ] && rm -f easyinit-populated/bin/mksquashfs
[ -f easyinit-populated/bin/unsquashfs ] && rm -f easyinit-populated/bin/unsquashfs
[ "$BOOT_BOARD" != "pc" ] && [ -f easyinit-populated/bin/ntfs-3g ] && rm -f easyinit-populated/bin/ntfs-3g
./populate-easyinit
cd easyinit-populated
[ -f ../easyinit.cpio ] && rm -f ../easyinit.cpio
find . | cpio -o -H newc > ../easyinit.cpio
sync
mkdir -p ../../sandbox3/rootfs-complete/boot
cp -a -f ../easyinit.cpio ../../sandbox3/rootfs-complete/boot/easyinit
cd ../../sandbox3

rm -rf rootfs-complete/tmp/* #121123 some above chroot operations may have left something behind in here.


###########################################################################
#140119 no longer building $PUPPYSFS from rootfs-complete.
sync
###########
#now build main f.s....


case $DISTRO_FILE_PREFIX in #091203
 racy) #110917
  BOOTLOGO="racy-splash" #110928
  BOOTLABEL="puppy"
  VERPREFIX="racy "
 ;;
 *) #quirky, tahr
  BOOTLOGO="quirky"
  BOOTLABEL="quirky"
  VERPREFIX="${DISTRO_FILE_PREFIX} "
 ;;
esac
#111006 generic mechanism, boot logo for any pup...
xDISTRO_FILE_PREFIX="$(echo -n "$DISTRO_FILE_PREFIX" | sed -e 's%64$%%')" #151108
[ -f ../boot/boot-dialog/${xDISTRO_FILE_PREFIX}-splash.gif ] && BOOTLOGO="${xDISTRO_FILE_PREFIX}-splash"
blPATTERN="s%BOOTLABEL%${BOOTLABEL}%"
namePATTERN="s/DISTRO_NAME/${DISTRO_NAME}/"
verPATTERN="s/DISTRO_VERSION/${DISTRO_VERSION}/"
prefixPATTERN="s/DISTRO_FILE_PREFIX/${DISTRO_FILE_PREFIX}/"
sed -e "$namePATTERN" -e "$verPATTERN" -e "$prefixPATTERN" -e "$blPATTERN" ../boot/boot-dialog/help.msg > build/help.msg

cp -f ../boot/boot-dialog/boot.msg build/boot.msg
#cat ../boot/boot-dialog/isolinux.cfg | sed -e "$blPATTERN" > build/isolinux.cfg
cat ../boot/boot-dialog/syslinux.cfg | sed -e "$blPATTERN" > build/syslinux.cfg
export RGBDEF=/usr/share/X11/rgb.txt

#151206 don't know why, but have to break this up...
#../boot/boot-dialog/textongif.sh ../boot/boot-dialog/${BOOTLOGO}.gif "${VERPREFIX}${RIGHTVER}" > logo.gif
cat ../boot/boot-dialog/${BOOTLOGO}.gif | giftopnm > logo1.pnm
sync
cat logo1.pnm | ppmlabel -background transparent -color "dark orange" -size 22 -x 330 -y 315 -text "$RIGHTVER" -background transparent > logo2.ppm
sync
cat logo2.ppm | ppmquant 256 > logo3.ppm
sync
cat logo3.ppm | ppmtogif > logo.gif
sync
rm -f logo1.pnm logo*.ppm

../boot/boot-dialog/gif2lss logo.gif > build/logo.16

#120217 translate early-boot splash screens... (expect building with langpack)
if [ "$DEFAULTLANG" != "en_US" ];then
 DEFAULTLANG1="${DEFAULTLANG%_*}" #ex: de
 DEFAULTLANG12="${DEFAULTLANG%.*}" #ex: de_DE
 SPLASHFILE=""
 [ -f ../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG12} ] && SPLASHFILE="../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG12}"
 [ ! "$SPLASHFILE" ] && [ -f ../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG1} ] && SPLASHFILE="../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG1}"
 if [ "$SPLASHFILE" ];then
  #translate boot.msg...
  sPTN="/^\[boot.msg\]/,/^$/p" #this is a multi-line block find expression.
  CODEBLOCK="`sed -n "$sPTN" ${SPLASHFILE} | sed -e '/^#/d' -e '/%%/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
  if [ "$CODEBLOCK" ];then
   echo "$CODEBLOCK" > /tmp/3builddistro-boot-splash-translation
   sed -i -f /tmp/3builddistro-boot-splash-translation build/boot.msg
  fi
  #translate help.msg...
  sPTN="/^\[help.msg\]/,/^$/p" #this is a multi-line block find expression.
  CODEBLOCK="`sed -n "$sPTN" ${SPLASHFILE} | sed -e '/^#/d' -e '/%%/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
  if [ "$CODEBLOCK" ];then
   echo "$CODEBLOCK" > /tmp/3builddistro-boot-splash-translation
   sed -i -f /tmp/3builddistro-boot-splash-translation build/help.msg
  fi
 fi
fi

#110426 help file for Windows users
CUT2INSERT="`echo -n "$DISTRO_FILE_PREFIX" | cut -c 1,2`"
CUT3INSERT="`echo -n "$DISTRO_FILE_PREFIX" | cut -c 1,2,3`"
cut2PATTERN="s%CUT2INSERT%${CUT2INSERT}%"
cut3PATTERN="s%CUT3INSERT%${CUT3INSERT}%"
sed -e "$verPATTERN" -e "$prefixPATTERN" -e "$cut2PATTERN" -e "$cut3PATTERN" ../boot/README.HTM > build/README.HTM

sync

########
if [ "$SDFLAG" = "" ];then #120506
 #140119 no longer creating live-cd .iso file.
 #instead, get code from script /mnt/sda10/quirky6/create-deployable-quirky...
 
 rm -rf quirkyfs 2>/dev/null
 mkdir quirkyfs
 cp -a rootfs-complete/* quirkyfs/
 sync
 mkdir -p quirkyfs/boot/syslinux
 cp -f build/vmlinuz quirkyfs/boot/
 cp -f build/boot.msg quirkyfs/boot/syslinux/
 cp -f build/help.msg quirkyfs/boot/syslinux/
 cp -f build/logo.16 quirkyfs/boot/syslinux/
 cp -f build/syslinux.cfg quirkyfs/boot/syslinux/
 #delete files...
 for AFILE in `find ../boot/rootfs-deleted -type f | sed -e 's%../boot/rootfs-deleted/%%' | tr '\n' ' '`
 do
  [ -f quirkyfs/${AFILE} ] && rm -f quirkyfs/${AFILE}
 done
 echo "depmod..."
 rm -f quirkyfs/lib/modules/$KERNELVER/modules.*
 cp -f rootfs-complete/etc/modules/modules.builtin quirkyfs/lib/modules/$KERNELVER/
 cp -f rootfs-complete/etc/modules/modules.order quirkyfs/lib/modules/$KERNELVER/
 ./depmod -b quirkyfs -F System.map $KERNELVER
 echo "PUPMODE=2" > quirkyfs/etc/rc.d/PUPSTATE
 sync

 ###create deployable image file###
 echo
 echo "Creating an uncompressed sfs image, file ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs..." #ex: tahr-0.101.usfs
 rm -f ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs 2>/dev/null
 mksquashfs quirkyfs ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs -noI -noD -noF -noX -no-exports -processors 1
 sync
 #rm -rf quirkyfs
 echo
 echo "Compressing, creating ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz..."
 #default is -6. sizes: -6 107.80MB, -7 106.93MB, -8 106.05MB, -9 103.91MB
 rm -f ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz 2> /dev/null
 xz -z -7 -c ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs > ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz
 sync
 echo
 echo "...done, ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz created. This is a deployable file."
 
else #120506 sd image
 
 if [ "$DISTRO_SKELETON_IMAGE" ];then #161026
  SDIMAGE="$DISTRO_SKELETON_IMAGE"
  echo "Using skeleton image '${SDIMAGE}'"
  if [ ! -f ../sd-skeleton-images/$DISTRO_SKELETON_IMAGE  ];then
   echo "ERROR: ../sd-skeleton-images/${DISTRO_SKELETON_IMAGE} is missing."
   echo -n "Put it there then press ENTER:"
   read wantfile
  fi
 else
  echo
  echo "Please choose the SD-card skeleton image file, to suit target board."
  CNT=1
  echo -n "" > /tmp/3builddistro-probeimage
  ls -1 ../sd-skeleton-images | grep 'xz$' | grep "$BOOT_BOARD" | #120714 BOOT_BOARD is raspi, mele, or odroidx. 161103 or pc
  while read ONEIMAGE
  do
   echo "${CNT} ${ONEIMAGE}" >> /tmp/3builddistro-probeimage
   CNT=`expr $CNT + 1`
  done
  while [ 1 ];do
   echo
   echo "Type number which is your choice of SD image:"
   cat /tmp/3builddistro-probeimage
   read sdnumber
   SDIMAGE="`cat /tmp/3builddistro-probeimage | head -n $sdnumber | tail -n 1 | cut -f 2 -d ' '`"
   echo -n "You chose '${SDIMAGE}' Press ENTER if correct: "
   read sdcorrect
   [ "$sdcorrect" = "" ] && break
  done
 fi
 
 echo
 echo "Please insert the SD card. Make sure that it is the same size or bigger than
indicated on the filename of the skeleton image file that you chose."
 echo -n "Press ENTER after it is inserted: "
 read waitinsert
 sleep 2
 while [ 1 ];do
  CNT=1
  echo -n "" > /tmp/3builddistro-probedisk
  probedisk | 
  while read ONEPROBE
  do
   echo "${CNT} ${ONEPROBE}" >> /tmp/3builddistro-probedisk
   CNT=`expr $CNT + 1`
  done
  echo
  echo "Type number which is your SD card:"
  cat /tmp/3builddistro-probedisk
  read sdnumber
  SDDEVICE="`cat /tmp/3builddistro-probedisk | head -n $sdnumber | tail -n 1 | cut -f 2 -d ' ' | cut -f 1 -d '|'`"
  echo -n "You chose ${SDDEVICE} Press ENTER if correct: "
  read sdcorrect
  [ "$sdcorrect" = "" ] && break
 done
 echo
 echo "Sanity check: ../sd-skeleton-images/${SDIMAGE}
is to be written to ${SDDEVICE}."
 echo -n "Press ENTER to continue: "
 read yepgo
 echo
 
 #need to know uncompressed size of image...
 echo "Uncompressing image, please wait..."
 cp -f ../sd-skeleton-images/${SDIMAGE} ./${SDIMAGE}
 sync
 SDBASE="`basename $SDIMAGE .xz`"
 [ -f ./${SDBASE} ] && rm -f ./${SDBASE}
 unxz ${SDIMAGE}
 if [ $? -ne 0 ];then
  [ -f ./$SDIMAGE ] && rm -f ./$SDIMAGE
  [ -f ./$SDBASE ] && rm -f ./$SDBASE
  echo "Uncompress fail. Aborting."
  exit 1
 fi
 sync

 IMGBYTES=`stat --format=%s $SDBASE`
 SDCARDINFO="`disktype ${SDDEVICE}`"
 #120506b check that sd card big enough...
 SDCARDBYTES=`echo "$SDCARDINFO" | grep '^Block device' | cut -f 2 -d '(' | cut -f 1 -d ' '` #ex: 4023386112
 if [ $IMGBYTES -gt $SDCARDBYTES ];then
  echo
  echo "Sorry, the image file is ${IMGBYTES}bytes, however the
SD card is only ${SDCARDBYTES}bytes. Cannot continue."
  exit 1
 fi

 #120703 allow 2nd partition to be ext2, ext3 or ext4...
 SDIMGINFO="`disktype ${SDBASE}`"
 SDFS2="`echo "$SDIMGINFO" | grep -o 'Ext[0-9] file system' | cut -f 1 -d ' ' | tr '[A-Z]' '[a-z]'`"
 case $SDFS2 in
  ext2|ext3|ext4) SDFS2="ext4" ;; #120706 hack for now. disktype misreports ext4 without journal as ext2.
  *)
   echo -n "wrong f.s. ${SDFS2} in ${SDBASE}, aborting. Press ENTER: "
   read exitme
   exit
  ;;
 esac
 
 #130530 better to write everything to the image file first, then write to sd afterward...
 #need to know the offsets of the filesystems...
 P1BYTES=`echo "$SDIMGINFO" | grep '^Partition 1:' | cut -f 2 -d '(' | cut -f 1 -d ' '`
 P1SECTORS=`echo "$SDIMGINFO" | grep '^Partition 1:' | cut -f 2 -d '(' | cut -f 3 -d ' '`
 P1STARTSECTORS=`echo "$SDIMGINFO" | grep '^Partition 1:' | rev | cut -f 1 -d ' ' | rev | cut -f 1 -d ')'`
 BYTESPERSECTOR=`expr $P1BYTES \/ $P1SECTORS` #normally 512.
 P1STARTBYTES=`expr $P1STARTSECTORS \* $BYTESPERSECTOR`
 
 P2BYTES=`echo "$SDIMGINFO" | grep '^Partition 2:' | cut -f 2 -d '(' | cut -f 1 -d ' '`
 P2SECTORS=`echo "$SDIMGINFO" | grep '^Partition 2:' | cut -f 2 -d '(' | cut -f 3 -d ' '`
 P2STARTSECTORS=`echo "$SDIMGINFO" | grep '^Partition 2:' | rev | cut -f 1 -d ' ' | rev | cut -f 1 -d ')'`
 P2STARTBYTES=`expr $P2STARTSECTORS \* $BYTESPERSECTOR` #160824
 
 echo
 echo "Copying Linux kernel to SD image file..."
 mkdir -p /mnt/sdimagep1
 mkdir -p /mnt/sdimagep2
 
 echo
 echo "Copying Puppy filesystem to SD image file, please wait..."
 echo "Executing: mount -t ${SDFS2} -o loop,offset=${P2STARTBYTES} ${SDBASE} /mnt/sdimagep2"
 mount -t ${SDFS2} -o loop,offset=${P2STARTBYTES} ${SDBASE} /mnt/sdimagep2
 if [ $? -ne 0 ];then
  echo "Sorry, mounting ${SDFS2} partition 2 (at offset ${P2STARTBYTES}) of ${SDBASE} failed. Aborting script."
  exit 1
 fi

 if [ "$DISTRO_KERNEL_PET" != "" ];then #160824 ############
  #170703 mount error, have to specify size of partition...
  echo "Executing: mount -t vfat -o loop,offset=${P1STARTBYTES},sizelimit=${P1BYTES} ${SDBASE} /mnt/sdimagep1"
  mount -t vfat -o loop,offset=${P1STARTBYTES},sizelimit=${P1BYTES} ${SDBASE} /mnt/sdimagep1 #160824
  if [ $? -ne 0 ];then
   echo "Sorry, mounting vfat partition 1 (at offset ${P1STARTBYTES}) of ${SDBASE} failed. Aborting script."
   exit 1
  fi
  echo "copying to /mnt/sdimagep1"
  if [ -f rootfs-complete/boot/zImage ];then #160928 new pi2 and xu4 boards. 160929
   mv -f rootfs-complete/boot/zImage /mnt/sdimagep1/
   #rm -f /mnt/sdimagep1/*.dtb 2> /dev/null
   cp -a -f rootfs-complete/boot/*.dtb /mnt/sdimagep1/
   #rm -rf /mnt/sdimagep2/lib/modules/* 2> /dev/null
   #rm -rf /mnt/sdimagep2/lib/firmware/* 2> /dev/null
   ##a little hack...
   #if [ -f /mnt/sdimagep1/boot.ini ];then
   # if [ -f rootfs-complete/boot/exynos5422-odroidxu3.dtb ];then
   #  sed -i 's%xu4\.dtb%xu3.dtb%' /mnt/sdimagep1/boot.ini
   # fi
   # if [ -f rootfs-complete/boot/exynos5422-odroidxu4.dtb ];then
   #  sed -i 's%xu3\.dtb%xu4.dtb%' /mnt/sdimagep1/boot.ini
   # fi
   #fi
  else
   #120613 restore correct kernel image name...
   case $REALKERNAME in
    uImage)     cp -f build/vmlinuz /mnt/sdimagep1/uImage ;;
    kernel.img) cp -f build/vmlinuz /mnt/sdimagep1/kernel.img ;;
    *)          cp -f build/vmlinuz /mnt/sdimagep1/ ;;
   esac
   echo -n "$REALKERNAME" > /mnt/sdimagep1/REALKERNAME #just in case need to know, in a running puppy.
  fi
  sync
  umount /mnt/sdimagep1 2>/dev/null #160824
  #echo "  ...done"
 fi #160824 #############
 
 #161123 need to create a .usfs.xz file, for creating service-packs (see also below)...
 #need all of the boot partition in that .usfs.xz, to update when install service-pack pet...
 #170703 mount error, have to specify size of partition...
 echo "Executing: mount -t vfat -o loop,offset=${P1STARTBYTES},sizelimit=${P1BYTES} ${SDBASE} /mnt/sdimagep1"
 mount -t vfat -o loop,offset=${P1STARTBYTES},sizelimit=${P1BYTES} ${SDBASE} /mnt/sdimagep1
 if [ $? -ne 0 ];then
  echo "Sorry, mounting vfat partition 1 (at offset ${P1STARTBYTES}) of ${SDBASE} failed. Aborting script."
  exit 1
 fi
 
 #161130 hack, set max usb current to 1.2A in Pi2 and Pi3...
 #[ -f /mnt/sdimagep1/config.txt ] && sed -i -e 's%^#max_usb_current.*%max_usb_current=1%' /mnt/sdimagep1/config.txt
 #170704 new variable in file 'build-choices'...
 if [ "$BUILD_CHOICE_RASPI_CONFIG_TXT" ];then
  for aCONF in $BUILD_CHOICE_RASPI_CONFIG_TXT #ex: max_usb_current=1 hdmi_force_hotplug=0
  do
   aPARAM="$(echo -n "$aCONF" | cut -f 1 -d '=')"
   aVAL="$(echo -n "$aCONF" | cut -f 2 -d '=')"
   sed -i -e "s%^[#]*${aPARAM}=.*%${aPARAM}=${aVAL}%" /mnt/sdimagep1/config.txt
  done
 fi
 if [ "$BUILD_CHOICE_RASPI_CMDLINE_TXT" ];then
  echo "$BUILD_CHOICE_RASPI_CMDLINE_TXT" > /mnt/sdimagep1/cmdline.txt
 fi
 
 echo "Copying all files from /mnt/sdimagep1 to /mnt/sdimagep2/boot/part1/ ..."
 mkdir -p /mnt/sdimagep2/boot/part1
 cp -a -f /mnt/sdimagep1/* /mnt/sdimagep2/boot/part1/
 sync
 umount /mnt/sdimagep1 2>/dev/null
 
 #170704 hack for pi, has opt/vc/lib/*.a libs...
 if [ -d /mnt/sdimagep2/opt/vc/lib ];then
  mkdir -p devx/opt/vc/lib
  mv -f /mnt/sdimagep2/opt/vc/lib/*.a devx/opt/vc/lib/ 2> /dev/null
  if [ -d /mnt/sdimagep2/opt/vc/include ];then
   mv -f /mnt/sdimagep2/opt/vc/include devx/opt/vc/
  fi
  if [ -d /mnt/sdimagep2/opt/vc/src ];then
   mv -f /mnt/sdimagep2/opt/vc/src devx/opt/vc/
  fi
 fi
 
 echo 'copying to /mnt/sdimagep2...'
 cp -a -f rootfs-complete/* /mnt/sdimagep2/
 #170705 boot/easyinit must be kept...
 if [ "$SDFLAG" ];then
  if [ "$DISTRO_KERNEL_PET" == "" ];then
   mv -f /mnt/sdimagep2/boot/easyinit ./ 2>/dev/null
   rm -rf /mnt/sdimagep2/boot/* #170604
   mv -f ./easyinit /mnt/sdimagep2/ 2>/dev/null
  fi
 fi
 
 sync
 #120704 add to /etc/fstab...
 echo "/dev/${SDDEVICE}2     /     ${SDFS2}     defaults,noatime   0 1" >> /mnt/sdimagep2/etc/fstab #120707 change relatime to noatime.
 sync
 
 #161020 copied this block of code down to here, as as sd-card image skeleton for Pi2 has /opt/vc/lib
 #in the skeleton image (so ldconfig does not work properly before)...
 #generate /etc/ld.so.cache shared lib loading cache file... 140204 fix...
 xLDCONFIG="$(find /mnt/sdimagep2/sbin /mnt/sdimagep2/usr/sbin -maxdepth 2 -type f -name ldconfig | head -n 1 | sed -e 's%/mnt/sdimagep2%%')" #140204
 if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123  140204 set -maxdepth 4
  echo "Running ldconfig..."
  if [ "$xLDCONFIG" ];then #140204
   chroot /mnt/sdimagep2 ${xLDCONFIG}
  else
   LDCONFIG="`find ../packages-${DISTRO_FILE_PREFIX}/ -maxdepth 4 -type f -name ldconfig | grep '/sbin/' | head -n 1`"
   cp -a $LDCONFIG /mnt/sdimagep2/
   chroot /mnt/sdimagep2 /ldconfig
   rm -f /mnt/sdimagep2/ldconfig
  fi
  sync
 else
  #***NOTICE*** have to run ldconfig at first boot.
  if [ ! "$xLDCONFIG" ];then #140204
   LDCONFIG="`find ../packages-${DISTRO_FILE_PREFIX}/ -maxdepth 4 -type f -name ldconfig | grep '/sbin/' | head -n 1`"
   cp -a -f $LDCONFIG /mnt/sdimagep2/sbin/
  fi
 fi
 sync
 
 echo "...done"
 
 #161123 need a .usfs.xz file to be able to create service-packs (copy code from above)...
 ###create deployable image file###
 echo
 echo "Need to create a .usfs.xz file, for purpose of creating service-packs."
 echo "From folder /mnt/sdimagep2, creating an uncompressed sfs image,"
 echo " file ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs..." #ex: tahr-0.101.usfs
 rm -f ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs 2>/dev/null
 mksquashfs /mnt/sdimagep2 ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs -noI -noD -noF -noX -no-exports -processors 1
 sync
 echo "Compressing, creating ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz..."
 #default is -6. sizes: -6 107.80MB, -7 106.93MB, -8 106.05MB, -9 103.91MB
 rm -f ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz 2> /dev/null
 #161123 change -7 to -6 ...
 xz -z -6 -c ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs > ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz
 sync
 echo "...done, ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.usfs.xz created. This is a deployable file."
 
 umount /mnt/sdimagep2 2>/dev/null
 
 echo
 echo "Writing image file ${SDBASE} to SD card ${SDDEVICE}..."
 dd if=${SDBASE} of=${SDDEVICE} bs=4M #120704 added bs=4M
 if [ $? -ne 0 ];then
  echo "Sorry, operation failure. Aborting script."
  exit 1
 fi
 sync
 
 echo
 echo "Please type the name that you want to give the SD image file, or press ENTER"
 SDBASEBASE="`basename $SDBASE .img | sed -e 's%-201[0-9]*%-%' -e 's%-skeleton%-%' | cut -f 1,2,3 -d '-'`"
 PUPIMG="${SDBASEBASE}-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.img"
 echo -n "only for the default [${PUPIMG}]: "
 read PUPIMG1
 [ "$PUPIMG1" != "" ] && PUPIMG="$PUPIMG1"
 echo "...chosen $PUPIMG"
 echo
 IMGK=`expr $IMGBYTES \/ 1024`
 echo "The image file is ${IMGK}KB, so needs to be compressed for distribution."
 echo "Compressing, please wait..."
 [ -f ./${PUPIMG}.xz ] && rm -f ./${PUPIMG}.xz
 xz --stdout ${SDBASE} > ${PUPIMG}.xz
 sync
 rm -f ./${SDBASE}
 echo "...${PUPIMG}.xz created."
 

 #update desktop drive icons. note, this is also done in /usr/sbin/bootflash, puppyinstaller, gparted_shell...
 #/tmp/pup_event_frontend_block_request is used in /sbin/pup_event_frontend_d to refresh drv...
 THEDRIVE="`echo -n "$SDDEVICE" | cut -f 3 -d '/'`"
 echo "$THEDRIVE" > /tmp/pup_event_frontend_block_request
 COMPRIMGBYTES=`stat --format=%s ${PUPIMG}.xz`
 echo
 echo "The image is now ${PUPIMG}.xz and is ${COMPRIMGBYTES}bytes."
 COMPRIMGK=`expr $COMPRIMGBYTES \/ 1024`
 echo "(${COMPRIMGK}KB)"
 echo "Image file may be distributed to others!"
 echo

 #120510...
 echo "If the SD card currently plugged in is bigger than the image, for example
you have a 4GB card and used a 1GB image, optionally now you may increase the
${SDFS2} partition to fill the remaining space -- this is for your own use."
 echo -n "ENTER only to decline: "
 read makebig
 if [ "$makebig" != "" ];then
  if [ "`which gparted`" = "" ];then
   echo "ERROR, gparted not installed!!!"
  else
   gparted $SDDEVICE
   sync
   echo
   echo "Checking the ${SDFS2} filesystem..."
   fsck.${SDFS2} -p ${SDDEVICE}2
   sync
   echo "$THEDRIVE" > /tmp/pup_event_frontend_block_request
  fi
 fi

fi




cd $WKGDIR
###########################################################################
#now do the devx...
if [ "$BUILD_CHOICE_MERGE_DEVX" == "yes" ];then #150725
 echo
 echo "Variable BUILD_CHOICE_MERGE_DEVX in file 'build-choices' is 'yes',"
 echo "so the 'devx' is merged into rootfs-complete. There will not be"
 echo "a devx PET. Finished, exiting."
 exit
fi
echo
echo -n "Hit ENTER to build the 'devx' PET file, any other key to exit: "
read dodevx
[ "$dodevx" != "" ] && exit
echo
echo "Building 'devx' PET..."

#150928
mkdir -p sandbox3/devx/usr #actually, probably already created above.
if [ -d sandbox3/devx/usr/X11R7 ];then
 if [ ! -h sandbox3/devx/usr/X11R7 ];then
  cp -a -f --remove-destination sandbox3/devx/usr/X11R7/* sandbox3/devx/usr/
  sync
  rm -rf sandbox3/devx/usr/X11R7
 else
  rm -f sandbox3/devx/usr/X11R7
 fi
fi
[ -e sandbox3/devx/usr/X11 ] && rm -f sandbox3/devx/usr/X11
[ -e sandbox3/devx/usr/X11R6 ] && rm -f sandbox3/devx/usr/X11R6
ln -s . sandbox3/devx/usr/X11R7
ln -s . sandbox3/devx/usr/X11R6
ln -s . sandbox3/devx/usr/X11

#170801 /lib64 and /usr/lib64 may have to be symlinks...
mkdir -p sandbox3/devx/lib
mkdir -p sandbox3/devx/usr/lib
case $WOOF_TARGETARCH in #161002
 x86|armv7) #32-bit
  true
 ;;
 *) #64-bit ex: amd64
  if [ "$ARCHDIR" ];then #ex1: i386-linux-gnu  ex2: x86_64-linux-gnu
   if [ "$ARCHDIR" != "lib64" ];then #150102
    if [ "$DISTRO_ARCHDIR_SYMLINKS" = "no" ];then
     mkdir -p sandbox3/devx/lib/${ARCHDIR}
     mkdir -p sandbox3/devx/usr/lib/${ARCHDIR}
     ln -snf lib/${ARCHDIR} sandbox3/devx/lib64
     ln -snf lib/${ARCHDIR} sandbox3/devx/usr/lib64
    else
     ln -snf ./ sandbox3/devx/lib64
     ln -snf ./ sandbox3/devx/usr/lib64
    fi
   else
    if [ "$DISTRO_ARCHDIR_SYMLINKS" = "no" ];then
     mkdir -p sandbox3/devx/lib64
     mkdir -p sandbox3/devx/usr/lib64
    else
     ln -snf ./ sandbox3/devx/lib64
     ln -snf ./ sandbox3/devx/usr/lib64
    fi
   fi
  fi
 ;;
esac

#rm -rf sandbox3/devx no, done above.
#mkdir sandbox3/devx
echo " building sandbox3/devx ..."
rm -f /tmp/3builddistro_removed_alt_dev #101013
ALLGENNAMESD="`echo "$PKGS_SPECS_TABLE" | grep '^yes' | cut -f 2 -d '|' | sed -e 's%$%_DEV%'`"
for ONEDEV in `ls -1 packages-${DISTRO_FILE_PREFIX} | grep '_DEV$' | tr '\n' ' '`
do

 ONEPKG="`echo -n "$ONEDEV" | sed -e 's%_DEV%%'`"
 
 devPATTERN='^'"$ONEDEV"
 if [ "`echo "$ALLGENNAMESD" | grep "$devPATTERN"`" != "" ];then
  
  #170801 fixed devx copy, following symlinks...
  cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEDEV}/* sandbox3/devx/ 2> /tmp/3builddistro-cp-errlog
  sync #110727 running drake pup 0.3 with k2.6.39-3 new laptop, mysterious loss of dirs/files. try sync.
  if [ -s /tmp/3builddistro-cp-errlog ];then #130430 next line fixes those quote chars... 150929 weird, tr creating multiple ' chars...
   #cat /tmp/3builddistro-cp-errlog | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | tr -s "'" | cut -f 2 -d "'" |
   while read ONEDIRSYMLINK
   do
    xONEDIRSYMLINK="`echo -n "$ONEDIRSYMLINK" | sed -e 's%sandbox3/devx%%'`"
    #adding that extra trailing / does the trick...
    cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEDEV}${xONEDIRSYMLINK}/* sandbox3/devx${xONEDIRSYMLINK}/ 2> /tmp/3builddistro-cp-errlog2
    #170418 installing some april pkgs into yocto morty, there are two levels of symlinks, /usr/X11R7/lib64...
    if [ -s /tmp/3builddistro-cp-errlog2 ];then
     cat /tmp/3builddistro-cp-errlog2 | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | tr -s "'" | cut -f 2 -d "'" |
     while read ONEDIRSYMLINK2
     do
      xONEDIRSYMLINK2="`echo -n "$ONEDIRSYMLINK2" | sed -e 's%sandbox3/devx%%'`"
      #adding that extra trailing / does the trick...
      cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEDEV}${xONEDIRSYMLINK2}/* sandbox3/devx${xONEDIRSYMLINK2}/
     done
     sync
    fi
   done<<_END1
$(cat /tmp/3builddistro-cp-errlog | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | tr -s "'" | cut -f 2 -d "'")
_END1
 
  sync
 fi
done
sync

rm -rf sandbox3/devx/DEBIAN* 2> /dev/null #150801

#earlier above i moved all invalid symlinks into the devx module, yeah but i
#think should delete them if they really point nowhere...
echo " Deleting really invalid symlinks in devx..."
mkdir layer_top
if [ "$LAYERFS" = "aufs" ];then
 #170731 recent kernel 4.11.12 configured without aufs layer reval...
 #mount -t aufs -o udba=reval,diropq=w,dirs=sandbox3/devx=rw:sandbox3/rootfs-complete=ro layerfs layer_top
 mount -t aufs -o br=sandbox3/devx=rw:sandbox3/rootfs-complete=ro layerfs layer_top
 if [ $? -ne 0 ];then
  echo "aufs failed to mount. ABORTING"
  exit 1
 fi
else
 #mount -t unionfs -o dirs=sandbox3/devx=rw:sandbox3/rootfs-complete=ro layerfs layer_top
 #160902 now using overlay fs...
 mkdir tempwork
 mount -t overlay -o lowerdir=sandbox3/rootfs-complete,upperdir=sandbox3/devx,workdir=tempwork overlay layer_top
 if [ $? -ne 0 ];then
  echo "overlay fs failed to mount. ABORTING"
  exit 1
 fi
fi
for ONESYMLINK in `find layer_top/ -type l`
do
 [ "`echo -n "$ONESYMLINK" | grep '/dev/'`" != "" ] && continue
 [ "`echo -n "$ONESYMLINK" | grep '/proc/'`" != "" ] && continue
 xONESYMLINK="`echo -n "$ONESYMLINK" | sed -e 's/^layer_top//'`"
 #111123 cross-build, cannot do chroot...
 if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
  if [ "`chroot layer_top readlink -e $xONESYMLINK`" = "" ];then
   echo " $ONESYMLINK"
   rm -f $ONESYMLINK
  fi
 else
  #do it without chroot...
  LINKTO="`readlink layer_top${xONESYMLINK}`"
  [ -e layer_top${LINKTO} ] && continue #absolute path
  UPONE="`dirname "$xONESYMLINK"`"
  [ -e layer_top${UPONE}/${LINKTO} ] && continue #relative path
  echo " $ONESYMLINK"
  rm -f $ONESYMLINK
 fi
done
sync
umount layer_top
rm -rf tempwork 2>/dev/null #160902
rmdir layer_top

###HACK###
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" != "" ];then #121022
 [ -e sandbox3/devx/usr/bin/python2.5 ] && ln -s python2.5 sandbox3/devx/usr/bin/python 2>/dev/null
 [ -e sandbox3/devx/usr/bin/python2.6 ] && ln -s python2.6 sandbox3/devx/usr/bin/python 2>/dev/null
 [ -e sandbox3/devx/usr/bin/python2.7 ] && ln -s python2.7 sandbox3/devx/usr/bin/python 2>/dev/null
fi
 rm -f sandbox3/devx/usr/lib/mozilla/plugins/* #100407 maybe .a, .la files in here.
 
#131212 weird, this should not be there (was removed way above)...
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" != "" ];then
 [ -e sandbox3/rootfs-complete/usr/lib/python2.5 ] && rm -rf sandbox3/rootfs-complete/usr/lib/python2.5
 [ -e sandbox3/rootfs-complete/usr/lib/python2.6 ] && rm -rf sandbox3/rootfs-complete/usr/lib/python2.6
 [ -e sandbox3/rootfs-complete/usr/lib/python2.7 ] && rm -rf sandbox3/rootfs-complete/usr/lib/python2.7
fi
###END HACK###

#v424 no, i have needed docs in usr/share/doc...
#w003 there's docs here, move them out...
rm -rf packages-${DISTRO_FILE_PREFIX}/devx_DOC 2>/dev/null
mkdir -p packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share
#mv sandbox3/devx/usr/share/doc packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share/ 2>/dev/null
mv sandbox3/devx/usr/share/doc-base packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share/ 2>/dev/null
mv sandbox3/devx/usr/share/man packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share/ 2>/dev/null

##100831 hack, this symlink needed...
#if [ -d sandbox3/devx/usr/X11R7/include/xorg ];then
# [ ! -e sandbox3/devx/usr/include/xorg ] && ln -s ../X11/include/xorg sandbox3/devx/usr/include/xorg
#fi

#100622 remove overhead of this script running every bootup...
mkdir -p sandbox3/devx/etc/profile.d
rm -f sandbox3/devx/etc/profile.d/pkgconfig* 2>/dev/null #140102 improve...
#141230 add sandbox3/devx/lib 141231 lib64...
DEVXLIBnorm=''; DEVXLIB64=''; DEVXUSRLIB64=''
[ -d sandbox3/devx/lib ] && DEVXLIBnorm='sandbox3/devx/lib'
[ -d sandbox3/devx/lib64 ] && DEVXLIB64='sandbox3/devx/lib64'
[ -d sandbox3/devx/usr/lib64 ] && DEVXUSRLIB64='sandbox3/devx/usr/lib64'
PKG_CONFIG_PATH="`find ${DEVXLIBnorm} ${DEVXLIB64} ${DEVXUSRLIB64} sandbox3/devx/usr/share sandbox3/devx/usr/lib sandbox3/devx/opt sandbox3/devx/usr/local/lib -type d -name pkgconfig | sed -e 's%sandbox3/devx%%' | tr '\n' ':' | sed -e 's%:$%%'`"
echo "export PKG_CONFIG_PATH='${PKG_CONFIG_PATH}'" > sandbox3/devx/etc/profile.d/pkgconfig

#maybe stray /install dir from slackware pkgs...
rm -rf sandbox3/devx/install 2>/dev/null
[ -f sandbox3/devx/pet.specs ] && rm -f sandbox3/devx/pet.specs #w478
sync

#110215 BaCon...
#111203 remove offer to download and compile bacon (no good for cross-builds)...
if [ ! -f sandbox3/devx/usr/bin/bacon ];then
#if [ -f sandbox3/devx/usr/bin/bacon ];then
# BACONPKG="`grep '|bacon|' sandbox3/rootfs-complete/root/.packages/woof-installed-packages | cut -f 1 -d '|'`"
# echo
# echo "The devx has BaCon compiler package: ${BACONPKG}"
# echo "Great, but if you have an Internet connection, you may update it, however this"
# echo "does not always work as a very recent /usr/bin/bacon must be installed..."
#else
 echo
 echo "Oh, you do not have the BaCon compiler in devx."
 echo "It is recommended that variable PKGS_SPECS_TABLE in file DISTRO_PKGS_SPECS-* have this entry:"
 echo "yes|bacon||exe>dev,dev,doc>dev,nls"
 echo "It is recommended that all Puppy distros standardise on having BaCon available."
# echo "Anyway, if you have an Internet connection, BaCon can be downloaded now, however"
# echo "this does not always work as you need a very recent /usr/bin/bacon already installed..."
fi
echo -n "Press ENTER to continue: "
read keepgoing
##101217 get latest BaCon...
#if [ -f support/fetch ];then #see http://www.basic-converter.org/fetch.bac
# if [ "`which bacon`" != "" ];then
#  echo
#  echo "Press any printable key (then ENTER) to download latest BaCon BASIC compiler"
#  echo "and support files. You will need Internet access to do this."
#  echo -n "ENTER key only to decline, any other printable char to download: "
#  read dobacon
#  if [ "$dobacon" != "" ];then
#   mkdir -p sandbox3/devx/usr/share/BaCon
#   rm -f sandbox3/devx/usr/share/BaCon/* 2>/dev/null
#   cp support/fetch sandbox3/devx/usr/share/BaCon/
#   cd sandbox3/devx/usr/share/BaCon
#   ./fetch
#   sync
#   [ ! -f documentation.pdf ] && wget http://www.basic-converter.org/documentation.pdf
#   [ ! -f documentation.html ] && wget http://www.basic-converter.org/documentation.html
#   [ ! -f hug.txt ] && wget http://www.basic-converter.org/hug.txt
#   [ ! -f sqlite3.txt ] && wget http://www.basic-converter.org/sqlite3.txt
#   [ ! -f gmp.txt ] && wget http://www.basic-converter.org/gmp.txt
#   [ ! -f curses.txt ] && wget http://www.basic-converter.org/curses.txt
#   [ ! -f pthreads.txt ] && wget http://www.basic-converter.org/pthreads.txt
#   [ ! -f gd.txt ] && wget http://www.basic-converter.org/gd.txt
#   [ ! -f gtk.txt ] && wget http://www.basic-converter.org/gtk.txt
#   [ ! -f gl.txt ] && wget http://www.basic-converter.org/gl.txt
#   ##fetch has already downloaded bacon.bac, but want beta version...
#   #mv -f bacon.bac bacon-released.bac
#   #wget http://www.basic-converter.org/beta/bacon.bac
#   #[ $? -ne 0 ] && mv -f bacon-released.bac bacon.bac
#   #mv -f documentation.html documentation-released.html
#   #wget http://www.basic-converter.org/beta/documentation.html
#   #[ $? -ne 0 ] && mv -f documentation-released.html documentation.html
#   sync
#   if [ -f bacon.bac ];then
#    bacon bacon.bac
#    sync
#    if [ -f bacon ];then
#     cp -f -a bacon ../../bin/
#     echo "...done"
#    else
#     echo "ERROR: bacon did not compile!"
#    fi
#   fi
#   cd ../../../../../ #back to woof-tree project dir.
#  fi
# else
#  echo
#  echo "WARNING: 'devx' SFS not loaded, cannot install latest BaCon BASIC compiler."
#  echo "         (or current loaded devx SFS does not have BaCon compiler in it)"
# fi
#fi

#110429 see above, think want glibc scsi headers in usr/include/scsi...
if [ -d sandbox3/devx/usr/include/scsi-GLIBC ];then
 #probably have kernel scsi headers in usr/include/scsi, fix...
 cp -a -f sandbox3/devx/usr/include/scsi-GLIBC/* sandbox3/devx/usr/include/scsi/
fi

#110702 mageia1 python puts 30python.csh here...
rm -f sandbox3/devx/etc/profile.d/*.csh

#140122 not sure about this...
if [ "$(echo -n "$xARCHDIR" | cut -c 1)" == "/" ];then #150102
 #CPATH works any language, replaces C_INCLUDE_PATH and CPLUS_INCLUDE_PATH
 echo "export CPATH=/usr/include/${ARCHDIR}" > sandbox3/devx/etc/profile.d/archinc
fi

#140123 'man-1.6f' binary pkg from T2 has bug, everything in /usr/usr...
if [ -d sandbox3/devx/usr/usr ];then
 cp -a -f --remove-destination sandbox3/devx/usr/usr/bin/* sandbox3/devx/usr/bin/ 2>/dev/null
 cp -a -f --remove-destination sandbox3/devx/usr/usr/sbin/* sandbox3/devx/usr/sbin/ 2>/dev/null
 cp -a -f --remove-destination sandbox3/devx/usr/usr/share/* sandbox3/devx/usr/share/ 2>/dev/null
 sync
 rm -rf sandbox3/devx/usr/usr
fi

#130111 fixed in 2createpackages...
##110726 mageia does something weird, puts all these in wrong place...
#if [ -d sandbox3/devx/usr/bin/multiarch-i386-linux ];then
# cp -a -f --remove-destination sandbox3/devx/usr/bin/multiarch-i386-linux/* sandbox3/devx/usr/bin/
# rm -rf sandbox3/devx/usr/bin/multiarch-i386-linux
#fi

#131229 quirky6, devx now a pet, need to delete some files...
[ -f sandbox3/devx/etc/ld.so.conf ] && rm -f sandbox3/devx/etc/ld.so.conf
[ -h sandbox3/devx/etc/localtime ] && rm -f sandbox3/devx/etc/localtime
#140102 [ -f sandbox3/devx/etc/profile.d/pkgconfig ] && rm -f sandbox3/devx/etc/profile.d/pkgconfig

#140122 seamonkey compile, unable to find gdkconfig.h, glibconfig.h... (note, i actually put these in /usr/include, but this should work also...)
if [ "$xARCHDIR" ];then #150102 fix
 for AINC in `find sandbox3/devx/usr/lib${xARCHDIR} -type d -name 'include' | sed -e "s%sandbox3/devx/usr/%%" | tr '\n' ' '` #ex: glib-2.0/include
 do
  mkdir -p sandbox3/devx/usr/${AINC} #ex: sandbox3/devx/usr/lib/glib-2.0/include
  xAINC="$(echo -n "$AINC" | sed -e 's%lib${xARCHDIR}/%%')"
  cp -a -f --remove-destination sandbox3/devx/usr/${AINC}/*.h sandbox3/devx/usr/lib/${xAINC}/ 2>/dev/null
 done
fi

#141017 quirky unicorn, compile seamonkey needs /usr/sbin/i686-linux-gnu-gcc, but only have ...-gcc-4.6 symlink.
GCCLINK="$(find sandbox3/devx/usr/bin -mindepth 1 -maxdepth 1 -type l -name '*-linux-gnu-gcc-*' | head -n 1)"
if [ "$GCCLINK" ];then
 xxLINK="$(echo -n "$GCCLINK" | rev | cut -f 2- -d '-' | rev)"
 #xxBASE="$(basename $GCCLINK)"
 #ln -s $xxBASE $xxLINK
 [ ! -e $xxLINK ] && cp -a $GCCLINK $xxLINK
fi
#these also...
GCCLINK="$(find sandbox3/devx/usr/bin -mindepth 1 -maxdepth 1 -type l -name '*-linux-gnu-cpp-*' | head -n 1)"
if [ "$GCCLINK" ];then
 xxLINK="$(echo -n "$GCCLINK" | rev | cut -f 2- -d '-' | rev)"
 [ ! -f $xxLINK ] && cp -a $GCCLINK $xxLINK
fi
GCCLINK="$(find sandbox3/devx/usr/bin -mindepth 1 -maxdepth 1 -type l -name '*-linux-gnu-g++-*' | head -n 1)"
if [ "$GCCLINK" ];then
 xxLINK="$(echo -n "$GCCLINK" | rev | cut -f 2- -d '-' | rev)"
 [ ! -e $xxLINK ] && cp -a $GCCLINK $xxLINK
fi

#141019 quirky unicorn has lots of /usr/share/doc/*-dev folders...
DOCDEVDIRS="$(find sandbox3/devx/usr/share/doc -mindepth 1 -maxdepth 1 -type d -name '*-dev')"
if [ "$DOCDEVDIRS" ];then
 echo
 echo 'Deleting sandbox3/devx/usr/share/doc/*-dev folders...'
 for ADDD in $DOCDEVDIRS
 do
  [ -d $ADDD ] && rm -rf $ADDD
 done
fi
#also clean out more files...
DOCDEVFILES="$(find sandbox3/devx/usr/share/doc -type f -name '*.gz')"
if [ "$DOCDEVFILES" ];then
 echo
 echo 'Deleting sandbox3/devx/usr/share/doc/*/*.gz files...'
 for ADDF in $DOCDEVFILES
 do
  [ -f $ADDF ] && rm -f $ADDF
 done
fi
DOCDEVFILES="$(find sandbox3/devx/usr/share/doc -type f -name 'copyright')"
if [ "$DOCDEVFILES" ];then
 echo
 echo 'Deleting sandbox3/devx/usr/share/doc/*/copyright files...'
 for ADDF in $DOCDEVFILES
 do
  [ -f $ADDF ] && rm -f $ADDF
 done
fi

#150724 app-inventor pkg has .git folder, 381MB, offer to remove...
echo
echo "Searching for any .git folders in sandbox3/devx..."
FNDGIT="$(find sandbox3/devx -type d -name '.git')"
if [ "$FNDGIT" ];then
 echo
 echo "These .git folders have been found:"
 echo "$FNDGIT"
 echo
 echo -n "Press ENTER only to delete them: "
 read deletethem
 if [ "$deletethem" == "" ];then
  for AGIT in `echo -n "$FNDGIT" | tr '\n' ' '`
  do
   echo " deleting ${AGIT}"
   rm -rf ./${AGIT}
  done
 fi
fi

##150925 april, this 'fonts' folder is a symlink, but devx has it as a folder. hack...
#if [ -d sandbox3/devx/usr/X11R7/share/fonts ];then
# rm -rf sandbox3/devx/usr/X11R7/share/fonts
#fi

sync

############################
#140120 create devx .pet (not .sfs)...
cd sandbox3
VER="$DISTRO_VERSION"
[ -f devx-${VER}-${DISTRO_FILE_PREFIX}.pet ] && rm -f devx-${VER}-${DISTRO_FILE_PREFIX}.pet
rm -rf devx-${VER}-${DISTRO_FILE_PREFIX} 2>/dev/null
mkdir -p devx-${VER}-${DISTRO_FILE_PREFIX}
cp -a -f devx/* devx-${VER}-${DISTRO_FILE_PREFIX}/
sync

#170526 keep the .a static libs!...
##probably a good idea. quirky devx pet 6.1 is 236MB (sfs is 135MB --xz'ed), after removing .a's is 198MB...
#for ASO in `find devx-${VER}-${DISTRO_FILE_PREFIX} -name '*.so' | tr ' ' 'x' | tr '\n' ' '`
#do
# [ "`echo -n "$ASO" | grep -i 'qt'`" != "" ] && continue
# [ "`echo -n "$ASO" | grep -i 'mm'`" != "" ] && continue
# ADIR="`dirname $ASO`"
# ANAME="`basename $ASO .so`"
#
# #150925 want to leave these .a's alone (from glibc)...
# [ "$ANAME" == "libc" ] && continue
# [ "$ANAME" == "libanl" ] && continue
# [ "$ANAME" == "libbrokenLocale" ] && continue
# [ "$ANAME" == "libc_nonshared" ] && continue
# [ "$ANAME" == "libcrypt" ] && continue
# [ "$ANAME" == "libdl" ] && continue
# [ "$ANAME" == "libm" ] && continue
# [ "$ANAME" == "libnsl" ] && continue
# [ "$ANAME" == "libresolv" ] && continue
# [ "$ANAME" == "librt" ] && continue
# [ "$ANAME" == "libutil" ] && continue
# [ "$ANAME" == "libpthread" ] && continue
#  
# [ -e ${ADIR}/${ANAME}.a ] && rm -f ${ADIR}/${ANAME}.a
#done
#sync
##140201 deleting the .a, leaves some broken links behind. ex in quirky tahr /lib/i386-linux-gnu/libcurses.a -> libncurses.a
#for AA in `find devx-${VER}-${DISTRO_FILE_PREFIX} -type l -name '*.a' | tr ' ' 'x' | tr '\n' ' '`
#do
# ALINK="`readlink $AA`"
# [ ! "$ALINK" ] && continue
# AL1="${ALINK:0:1}"
# if [ "$AL1" = "/" ];then
#  ALSPEC="devx-${VER}-${DISTRO_FILE_PREFIX}${ALINK}"
# else
#  ALDIR="`dirname $AA`"
#  ALSPEC="${ALDIR}/${ALINK}"
# fi
# [ ! -e ${ALSPEC} ] && rm -f $AA 2>/dev/null
#done

#140201 this is a hack...
#quirky tahr, devx has /usr/bin/man, but main f.s. has man as a symlink to script pman...
if [ -e devx-${VER}-${DISTRO_FILE_PREFIX}/usr/bin/man ];then
 rm -f devx-${VER}-${DISTRO_FILE_PREFIX}/usr/bin/man
 ln -s pman devx-${VER}-${DISTRO_FILE_PREFIX}/usr/bin/man #so as to restore symlink if earlier devx deleted it.
fi

SIZEK="$(du -s -k devx-${VER}-${DISTRO_FILE_PREFIX} | cut -f 1)"
echo "devx-${VER}-${DISTRO_FILE_PREFIX}|devx|${VER}-${DISTRO_FILE_PREFIX}||Utility;development|${SIZEK}K||devx-${VER}-${DISTRO_FILE_PREFIX}.pet||A complete C/C++/Vala/Genie/BaCon compiling environment for Quirky, with extras such as svn, git, gdb|${DISTRO_BINARY_COMPAT}|${DISTRO_COMPAT_VERSION}||" > devx-${VER}-${DISTRO_FILE_PREFIX}/pet.specs

#cat << 'EX1' >> devx-${VER}-${DISTRO_FILE_PREFIX}/pinstall.sh
echo "#!/bin/sh
if [ \$DISPLAY ];then
pupmessage -bg '#80FF80' -title \"devx version: ${VER}\" \"Congratulations, Quirky has been converted into a complete C/C++/Vala/Genie/BaCon compiling environment for Quirky, with extras such as svn, git, gdb, nasm, yasm and python.

It is strongly recommended to reboot now, for the package installation to take full effect (please wait a few minutes though, for some final install operations to complete).

Note: This package can be uninstalled by the Quirky Package Manager.
Suggestion: After rebooting, take a snapshot of the system (see Snapshot Manager in Filesystem menu) -- very handy for later, if you want to get rid of packages after having compiled and installed them.\" &
fi" > devx-${VER}-${DISTRO_FILE_PREFIX}/pinstall.sh
chmod 755 devx-${VER}-${DISTRO_FILE_PREFIX}/pinstall.sh
#EX1

sync
[ -f devx-${VER}-${DISTRO_FILE_PREFIX}.tar.gz ] && rm -f devx-${VER}-${DISTRO_FILE_PREFIX}.tar.gz
[ -f devx-${VER}-${DISTRO_FILE_PREFIX}.pet ] && rm -f devx-${VER}-${DISTRO_FILE_PREFIX}.pet
dir2tgz devx-${VER}-${DISTRO_FILE_PREFIX}/
tgz2pet devx-${VER}-${DISTRO_FILE_PREFIX}.tar.gz
sync

#also create .sfs file, used by 5create-devx-service-packs...
[ -f devx-${VER}-${DISTRO_FILE_PREFIX}.sfs ] && rm -f devx-${VER}-${DISTRO_FILE_PREFIX}.sfs
mksquashfs devx-${VER}-${DISTRO_FILE_PREFIX} devx-${VER}-${DISTRO_FILE_PREFIX}.sfs ${COMPCHOICE} -processors 1
sync
rm -rf devx-${VER}-${DISTRO_FILE_PREFIX}
echo
echo "Created: devx-${VER}-${DISTRO_FILE_PREFIX}.pet"
echo "Also created devx-${VER}-${DISTRO_FILE_PREFIX}.sfs, used by 5create-devx-service-packs"

cd ..
sync
echo "...done"

###END###

